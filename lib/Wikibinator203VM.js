/*
LICENSE AT TIME 2023-2-9:[[[
Wikibinator203 license: The whole turing-complete and hypercomputing space derived from
this universal combinator/lambda or forks of it and other software (prototype by Ben F Rayfield Y2023),
including every lambda of this kind called on a lambda to find/create a lambda or which never halts
(which the author of is defined as the universal combinator since these are tiny shared math objects),
is offered to everyone under opensource GNU AGPL 3 license, plus these extra permissions:
* Classpath/linking exception. Hook it to whatever you want, but within the space (no proprietary lambdas) is AGPL.
* License is instantly unterminated when you start obeying it.
* Free speech absolutism in the evilbit=true namespace in which all possible lambdas are allowed, even viruses etc.
<br><br>
                    GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007
<br><br>
 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.
<br><br>
                            Preamble
<br><br>
  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.
<br><br>
  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.
<br><br>
  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.
<br><br>
  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.
<br><br>
  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.
<br><br>
  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.
<br><br>
  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.
<br><br>
  The precise terms and conditions for copying, distribution and
modification follow.
<br><br>
                       TERMS AND CONDITIONS
<br><br>
  0. Definitions.
<br><br>
  "This License" refers to version 3 of the GNU Affero General Public License.
<br><br>
  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.
<br><br>
  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.
<br><br>
  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.
<br><br>
  A "covered work" means either the unmodified Program or a work based
on the Program.
<br><br>
  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.
<br><br>
  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.
<br><br>
  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.
<br><br>
  1. Source Code.
<br><br>
  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.
<br><br>
  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.
<br><br>
  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.
<br><br>
  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.
<br><br>
  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.
<br><br>
  The Corresponding Source for a work in source code form is that
same work.
<br><br>
  2. Basic Permissions.
<br><br>
  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.
<br><br>
  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.
<br><br>
  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.
<br><br>
  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
<br><br>
  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.
<br><br>
  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.
<br><br>
  4. Conveying Verbatim Copies.
<br><br>
  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.
<br><br>
  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.
<br><br>
  5. Conveying Modified Source Versions.
<br><br>
  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:
<br><br>
    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.
<br><br>
    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".
<br><br>
    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.
<br><br>
    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.
<br><br>
  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.
<br><br>
  6. Conveying Non-Source Forms.
<br><br>
  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:
<br><br>
    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.
<br><br>
    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.
<br><br>
    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.
<br><br>
    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.
<br><br>
    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.
<br><br>
  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.
<br><br>
  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.
<br><br>
  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.
<br><br>
  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).
<br><br>
  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.
<br><br>
  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.
<br><br>
  7. Additional Terms.
<br><br>
  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.
<br><br>
  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.
<br><br>
  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:
<br><br>
    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or
<br><br>
    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or
<br><br>
    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or
<br><br>
    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or
<br><br>
    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or
<br><br>
    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.
<br><br>
  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.
<br><br>
  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.
<br><br>
  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.
<br><br>
  8. Termination.
<br><br>
  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).
<br><br>
  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.
<br><br>
  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.
<br><br>
  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.
<br><br>
  9. Acceptance Not Required for Having Copies.
<br><br>
  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.
<br><br>
  10. Automatic Licensing of Downstream Recipients.
<br><br>
  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.
<br><br>
  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.
<br><br>
  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.
<br><br>
  11. Patents.
<br><br>
  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".
<br><br>
  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.
<br><br>
  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.
<br><br>
  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.
<br><br>
  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.
<br><br>
  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.
<br><br>
  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.
<br><br>
  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.
<br><br>
  12. No Surrender of Others' Freedom.
<br><br>
  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.
<br><br>
  13. Remote Network Interaction; Use with the GNU General Public License.
<br><br>
  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.
<br><br>
  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.
<br><br>
  14. Revised Versions of this License.
<br><br>
  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.
<br><br>
  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.
<br><br>
  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.
<br><br>
  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.
<br><br>
  15. Disclaimer of Warranty.
<br><br>
  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
<br><br>
  16. Limitation of Liability.
<br><br>
  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.
<br><br>
  17. Interpretation of Sections 15 and 16.
<br><br>
  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.
<br><br>
                     END OF TERMS AND CONDITIONS
<br><br>
            How to Apply These Terms to Your New Programs
<br><br>
  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.
<br><br>
  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.
<br><br>
    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>
<br><br>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
<br><br>
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
<br><br>
    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
<br><br>
Also add information on how to contact you by electronic and paper mail.
<br><br>
  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.
<br><br>
  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<http://www.gnu.org/licenses/>.
<br>
<br><br>
                           Classpath/Linking Exception
<br><br>
Linking this library statically or dynamically with other modules is making a 
combined work based on this library. Thus, the terms and conditions of the GNU 
Affero General Public License cover the whole combination.
<br><br>
As a special exception, the copyright holders of this library give you 
permission to link this library with independent modules to produce an 
executable, regardless of the license terms of these independent modules, 
and to copy and distribute the resulting executable under terms of your choice,
provided that you also meet, for each linked independent module, the terms 
and conditions of the license of that module. An independent module is a 
module which is not derived from or based on this library. If you modify 
this library, you may extend this exception to your version of the library, 
but you are not obligated to do so. If you do not wish to do so, delete this 
exception statement from your version.
]]]
*/
















//TODO doWikibLoopsIfelsePluseqEtcAsBringtofrontlistSoListDoesntGetTooBigButIsStillSimple



















//No, keep it the old way, not this: console.log('TODO!!!!: Changing the syntax of vm.eval(codeString)->lambda. Theres 4 s-expression-like things: {a b} is normal call. {a b c} is {{a b} c}. (this is (just data) put anything {a b} here). () is an empty such list. <a b> is {S a b}. <a b c> is {S {S a b} c}. [a b c] is <,a b c>. ,a is {T a}');
















/*
#wikibinator ids (of a lambda) are like #hashtags, derived from any 2 ids and will look like λb7018ef5ffffffff43ad4c915f93a4f8582f7447ee6e22f208b4d9d2eae50d36
Its 32 bits of header, 32 bits of bitstring size (if bitstring), 192 bits of sha256(concat(2 child ids)), or literal bits
*/








// https://github.com/benrayfield/wikibinator203

//alert('TODO for vm.eval, make another layer, of vararg tree, for [] {} () <> a:b:c:d syntaxs, before evaling anything, which means it wont merge duplicate fns in code string at this level (and at lazyDedup level it will mostly except for some blobs, and at globalId256 level everything is deduped). Make that tree so can look at it in browser debugger to make sure it parsed right before evaling its parts, since thats unnecessary extra work to do at once when tracking down bugs. Eventually the eval func will be derived from combos of U/TheUniversalLambda, so you can make new syntaxes at the same level as the default syntax. Do that in vm.ParseTree. ParseTree comment, add a fifth kind of list, \':\' where literal \':\' or \'\' (as in \'a(b c)d\' or \'M[...]\') is the fifth kind, < [ { (. It evals a:b:c:d as (a (b (c d))), unlike (a b c d) means (((a b) c) d).');

/*TODOS...

TODO todoWrite30VariedUsecases.wikibinator203 first.

implement op (getLocalId128 x) gives the 4 ints (in js) x().idA x().idB x().blobFrom and x().blobTo.
blobFrom and blobTo are both 0 in any node thats not a cbt so you only need half the id then.
Use it in a treemap (Lambda [...] ...) of #SomeName to fn, for use as a code editor.
Strings that fit in an id256 dont need to be hashed (which is slow, .0001 to .0000001 per second per hash id).
Using an idmaker that uses literalinid (or (typeval "text/plain;charset=utf8" TheBits)) or hashidofanyfn,
together as just whatever (AnIdMaker SomeFn) returns, could view code being made and deleted,
much faster without having to hash it, but can only be
run in vm.stackAllow* mode, some dirty mode (not purely deterministic)
depending on salt of course for nondeterministic recursion and caching.
The localid of a fn may differ from other times that fn is observed,
but for the same localid in the same VM run (til wikibinator203 VM is restarted),
there is at most 1 val, so [localid128 many-to-1 dedupedFn (within same run of VM)].
For each localid128 there is at most 1 dedupedFn, until restart VM then those may change.
Each VM running simultaneously can be running a different "VM run",
so the nondeterministic localid128s should be limited to when vm.mask_stackAllowReadLocalIds (now 1 of 5 kinds of clean/dirty).
..
also see "TODO use this to, with StackAllowReadLocalIds true, make a fast evallable textarea" comment in code far below.
..
see mask_stackAllowReadLocalIds

/*TODO WRITE 30 VARIED USECASES, THEN FIND HOW TO OPTIMIZE FOR THEM...
30 varied usecases, optimize for. Find efficient way to do all of these, relevant to opmutinner opmutouter Float64Array Int32Array Node lambdize gpujs mutableWrapperLambda etc... Find an efficient-enough way to make things i find fun and useful, focusing on memory and compute bandwidth at first.
Moving that to todoWrite30VariedUsecases.wikibinator203, so this wikibinator203VM.js file can work again.
*

TODO for vararg syntax use A[B C D] meaning (A [B C D]), where A B C and D are #Names.
In general if you dont put a space before ( { [ or < then it means a call.
This simplifies _ , ? and maybe the first . like in .abc.def .
(?2 (?2 (? z) y) length) is written as something like <z y length>,
but you could also write that as A[z y length] if A is the #Name of a fn that does (?2 (?2 (? z) y) length) with [z y length],
as it would be (A [z y length] [...stream...]).
I'm willing to sacrifice the code being a little longer, having to write (W (X (Y Z))) with spaces before the (s, instead of (W(X(Y Z))),
but the new syntax also allows W(X (Y Z)) or W(X(Y Z)) since lack of a prefix space implies calling.
You cant have 2 names touching eachother, except if its a builtin name like _ , ?.
W(X(Y Z))   //smaller, but more complex to parse. maybe more confusing to read?
(W(X(Y Z))) //bigger
Maybe also allow : between #Names, to mean the same thing as lacking a space between them, but you cant write WX to mean (W X), so you write W:X.
/*But what about direction? What does W:X:Y mean, (W (X Y)) or ((W X) Y)? Would having 2 symbols fix that, like W<X<Y vs W>X<Y vs W<X>Y ?
W<Anything means W before Anything. W>Anything means W after Anything??? So what would W<X<Y mean? W first, so (W X<Y).
What would W>X<Y mean? W after X<Y, but what does that mean? X<Y and X>Y both mean (X Y), so W>(X Y). Its (W (X Y)).
What would W>X>Y mean? W after X>Y. so (W (X Y)).
What would W<X<Y<Z mean? (W X<Y<Z). (W (X Y<Z)). (W (X (Y Z))).
Wait... which one means (((W X) Y) Z) ?
Forget that < > stuff above. Do it this way instead....
*/
/*
> means ) and implies the ( happened before it.
< means ( and implies the ) happens after it.
W<X<Y<Z means W(X(Y(Z with some )s implied, which means (W (X (Y Z))).
W>X<Y<Z means W)X(Y(Z, which means (W X (Y Z)) ???? that doesnt seem right. might be right. try few more examples...
W>X>Y<Z  W)X)Y(Z  ((W)X)Y(Z)  ((((W)X)Y)(Z))  (W X Y Z). Its just (W X Y Z). The last < vs > never matters, since theres only 2 things. W>X>Y:Z .
But if the last < vs > doesnt matter, how would i write (W X (Y Z)) ?
Maybe this syntax doesnt work either. Or maybe W>X>Y>Z means (W X Y Z), and W>X>Y<Z means (W X (Y Z)) ? What parsing rule could detect that?
How many possible trees are there of W X Y Z that have each of those once and occur in that order? Write them all...
(((W X) Y) Z)
((W X) (Y Z))
((W (X Y)) Z)  W<X<Y>Z  problem, these 2 seem to need the same syntax
(W (X (Y Z)))  W<X<Y>Z  problem, these 2 seem to need the same syntax
*
Figure out more syntaxes later. For now just use W:X:Y:Z to mean (W X:Y:Z) aka (W (X Y:Z)) aka (W (X (Y Z))).
That will make it easier to read and small enuf that can make custom syntaxes by prefixing by a fn that does parsing (and can Evaler optimize some of them).
Example: (Y[A B C] D) could do the same as ({A B C} D) if Y is a fn that takes a [...] of any size and does what {...} does.
Similarly Y{A B C} or Y(A B C), but [...] is the most useful for vararg.
Keep <...> for the ?2 and ? syntax, as in "(?2 (?2 (? z) y) length) is written as something like <z y length>" but I'm not completely sure of that part
as I'm still figuring out how these parts of syntax fit together.
..
(=d .z.abc .i .z.y?i) //z.abc[i] = z.y[i];
...could be written as...
ED[.z.abc .i .z.y?i]   where ED is a #Name of a fn that does with [...] that same thing when it gets 1 more param., 







lambda
ja code generator for mutlam. test it on a Fo loop with hypot3 (a derived mutlam of 3 params) and the js code should inline it as Math.sqrt(Square?x...codegen y.. z..) without heap alloc in loop, by detecting its all doubles. add optimization to often detect if something always returns doubles.
Mut.m is js {}.
Mut.d is Float64Array overlapping buffer with Int32Array and Float32Array. Mut.e is a double. Mut.k is dedupedfn and Mut.o is whichopmutspacenum which together are the primarykey. Mut.j is dup fn. i might add more fields later such as jj being js [] of dup fn. (ObKeyVal ob key val) (ObCbt ob acbt) etc. cache mutevaler of Mut.k andor mutevaler of Mut.j?
..
For MutLam params, use a js {} (either pooled and emptied after used or new {} each mutlam call) of varnameorstringid to val. val is Mut or double. use ?x for mutlam var x, and.x for rootstate Mut.m.x. i could, but dont use {}.prototype being lower {} on mutlamcallstackwhichisjystjsstack, cuz namespaces are only supposed to see their own vars. can still share Muts as params of mutlam, in Mut.m.varnameorstringid.
...
(;[a b c] d) means (a ;[a b c] d), or maybe (a [a b c] d), as a way of defining vararg and custom syntaxes. or maybe <a b c d> means (a [b c d]) if a is (some certain op with FuncBody param).
The problem this is meant to solve is <.xy .zz {...} ...>, as way to getvar ? and ?2, is not general enuf cuz theres =dd =d =j and getters of those etc. need general vararg syntax and im willing to pay an extra char for it. maybe A<b c d> instead of writing it as <A b c d>, and A is a #Name, and if you dont give a fn before the < then its ? and ?2 default syntax. will optimize for that.
..
yes, do that, but as []... A[B C D] is (A [B C D]). more generally if you dont put a space before ( or { or < or [ then its automatically a call. that simplifies , and _ and maybe the first . but im unsure if i want to ((...) (...) (...))
*/






















/*
(
	Lambda
	[arrayAB arrayBC aSize bSize cSize]
	{
		,Opmut
		,_[
			(Push ,x ,10)
			(Push ,x ,hello)
			(Push ,x ,20)
			(=3 ,z ,y ?x)
			(=3 ,z ,abc FixmeHowToDefineAJsListOrIsItViewedAsMapB)
			(For (= ,i ,0) (Lt .i .z.y.length) (++ ,i) _[ //TODO this syntax is too long: (?2 (?2 (? z) y) length)
				(=d .z.abc .i .z.y?i) //z.abc[i] = z.y[i];
			])
		]
		LambdaParamsStream
	}
)#MatmulInCpu







/*

Mut has to compile to using string keys in js {} map, since otherwise i'd have to make my own stack which would be slow.
The strings can be: anything that starts with a lowercase letter, such as varABC or x hello etc,
or a text form of a 256 bit global id, or a deduped localId.
Otherwise it should be a double used as an int for Float64Array (or maybe Int32Array in some cases).
FIXME if dedup a localId, then its garbcoled, how could i know to use the same id again if its made again? I wouldnt,
	THEREFORE deduped ids only verify that at most 1 deduped id exists at a time for a certain forest shape,
	but it does not guarantee its the same 64 bits if its garbcoled and allocated again as a deduped id,
	so during opmut, if using deduped id64 that way, dont allow garbcol during opmut,
	and dont reuse compiled evalers that depend on a string for of deduped localid such as 'n'+node.idA+'_'+node.idB.
	Could use a global id256, such as around 46 chars (is that base64 or base58?), in js {} map key,
	but that would be slow. Mostly it would be small var names like abc and x and double indexs.
	
	
This depends on ability to make var names like [ballA x] which is (infcur ballA x), var names that are fns in general,
and I'm unsure how to compile it to js code, so needs redesign...
(
	Lambda
	[arrayAB arrayBC aSize bSize cSize]
	{
		,{
			,Opmut //,{OptimizationHint opmut}//,Opmut
			_[
				(= ?arrayAC {,NewDoubles {,* ?aSize ?cSize}})
				(For (= ?a ,0) (lt ?a ?aSize) (++ ?a) [
					(For (= ?c ,0) (< ?c ?cSize) (++ ?c) _[
						(= ?sum ,0)
						(For (= ?c ,0) (< ?c ?cSize) (++ ?c)
							(+=D ?sum {,*
								{,D ?arrayAB {,+ {,* ?a ?bSize} ?b}}
								{,D ?arrayBC {,+ {,* ?b ?cSize} ?c}}
							})
						)
						(=D ?arrayAC {,+ {,* ?a ?cSize} ?c} ?sum)
					])
				])
				?arrayAC
			]
		}
		(...This gets [arrayAB someVal arrayBC anotherVal ...]...)#LambdaParams
	}
)#Matmul

Instead of each mut in [...muts...] being a key and around 4 vals (of type double, double[], fn, mut[], etc),
each mut is a map, so things come in threes: ob key val, like mutA mutB mutC means mutA[mutB] = mutC,
and similar for Float64Array except thats stored in pairs of: mutA cbt.
LambdaParamsStream op would give its own params as keys of some given ob,
such as (LambdaParamsStream (pair s "hello") (Lambda [a b c] 10 15))
-> [... (ObKeyVal (pair s "hello")#psh a 10) (ObKeyVal psh b 15) (ObCbt psh aCbtOfFloat64Array) ...],
or something like that.

Old: (= ?arrayAC {,NewDoubles {,* ?aSize ?cSize}})
New: (= ,psh ,arrayAC {,NewDoubles {,* ?aSize ?cSize}}) but could save space by naming (= ,psh) and reusing that.
	WAIT, i might have mixed up ? aka GetVar, and , aka t.

How would I write code that does the same as this javascript[
	let x = [10,'hello',20];
	let z = {y: x, abc: []};
	for(let i=0; i<z.y.length; i++){
		z.abc[i] = z.y[i];
	}
	//do this outside the Opmut: return z;
]?
Trying to write that as wikibinator203 syntax (which you can derive whatever syntaxes you want, but this is what comes in the prototype):
(
	Opmut
	_[
		(=2 ,x FixmeHowToDefineAJsListOrIsItViewedAsMapA)
		(=3 ,z ,y ?x)
		(=3 ,z ,abc FixmeHowToDefineAJsListOrIsItViewedAsMapB)
		(For (= ,i ,0) (Lt ?i (?2 (?2 (? z) y) length)) (++ ,i) _[ //TODO this syntax is too long: (?2 (?2 (? z) y) length)
			//(=3 (?2 (? z) abc) ?i (?2 z (?2 y ?i)))
			(=d (?2 (? z) abc) ?i (?2 z (?2 y ?i)))
		])
	]
	[] //muts go in here, if it starts with any
)
PROBLEM: cant use =3 for double indexs or double vals. Use =d instead.



_[
	(push ,x ,10)
	(push ,x ,hello)
	(push ,x ,20)
	(=3 ,z ,y ?x)
	(=3 ,z ,abc FixmeHowToDefineAJsListOrIsItViewedAsMapB)
	(For (= ,i ,0) (Lt ?i (?2 (?2 (? z) y) length)) (++ ,i) _[ //TODO this syntax is too long: (?2 (?2 (? z) y) length)
		(=d (?2 (? z) abc) ?i (?2 z (?2 y ?i)))
	])
]




//z.y.length
TODO this syntax is too long, but consider that var names could be lambdas such as (Pair S hello) or huge lambdas:
(?2 (?2 (? z) y) length)
(?2 (?2 ?z y) length)
?z.y.length

What about z.abc[i] ...
?z.abc<?i>
?z.abc<i>
?z,abc<i>
Im mixing things up here. Its not consistent.
Use a<b> to mean the same as a.b but <> gives you a place to write more stuff.
a<b<c>> means the same as a.b.c.
,a means (T a) aka (T 'a').
?a means (GetVar a).
?a<?b<?c>> ???
?a<,b<?c>> ???
?a<{..some stuff..}<?c>> ???

Put <> as the outer thing, cuz this syntax is getting confusing.

<,a ,b ,c ,b> means js: root.a.b.c.b .
<,a ,b c ,b> means js: root.a.b[c].b aka root['a']['b'][c]['b'].
<,a ,b {...any code...} ,b> means js: root.a.b[c].b aka root['a']['b'][whateverThatCodeReturnsWhenCalledOnStream]['b'].
	Its the same for ,b being whatever (,b theStream) returns, aka (T 'b' theStream) which returns 'b' aka b.
(<w x y z> aStream) evals (w aStream) and (x aStream) and (y aStream) and (z aStream) and calls ?2 for the first 3 and ? for the last.


_[
	(push ,x ,10)
	(push ,x ,hello)
	(push ,x ,20)
	(=3 ,z ,y ?x)
	(=3 ,z ,abc FixmeHowToDefineAJsListOrIsItViewedAsMapB)
	(For (= ,i ,0) (Lt ?i <,z ,y ,length>) (++ ,i) _[ //TODO this syntax is too long: (?2 (?2 (? z) y) length)
		(=d <,z ,abc> ?i <,z ,y ?i>)
	])
]

Syntax .abc.def.ghi means <,abc ,def ,ghi>

_[
	(push ,x ,10)
	(push ,x ,hello)
	(push ,x ,20)
	(=3 ,z ,y ?x)
	(=3 ,z ,abc FixmeHowToDefineAJsListOrIsItViewedAsMapB)
	(For (= ,i ,0) (Lt .i .z.y.length) (++ ,i) _[ //TODO this syntax is too long: (?2 (?2 (? z) y) length)
		(=d .z.abc .i .z.y?i) //z.abc[i] = z.y[i];
	])
]












/*TODO consider using fn directly as mut, such as (anyDoubleAsWhichopmutspace anyFn)
or as (MutId whichOpmutSpace anyFn), so (MutId whichOpmutSpace) would be used for a call of Opmut.
There would be mutable fields in fn in general, that would get erased after Opmut call,
and fn wouldnt be able to read or write them (only Opmut could read and write them as mutable optimization
of immutable/stateless calculation). A vm.OpmutState would just need to somehow remember which fns
have mutable state, so when that specific Opmut call ends, their mutable contents can be cleared.
Example fn: (MutId whichOpmutSpace (MutId whichOpmutSpaceB anyFnB)), since its all fns.
Only dedupedFns would be allowed as mut keys, but their fields dont have to be deduped.
So all objects visible to fns would be either fn or double,
and double is a cbt64 or (todo? wrapper of it to say its a double of those 64 bits).
fn.e would be a double.
fn.ee would be a Float64Array.
fn.ii would be an Int32Array that shares same ArrayBuffer as fn.ee, unless they're both frozen and empty.
fn.j would be a dup fn.
fn.jj would be an Array of dup fn.
fn.m would be a deduped fn.
fn.mm would be an Array of deduped fn.
FIXME in what lambdize returns (a function), its prototype cant be changed.
	BUT I might could put something in the prototype of functions in general.
Maybe its best to just put 1 mutable field in fn, the Mut, since function prototypes dont work like {} prototypes.
At least that way theres at most 1 Mut per fn. Also, a dup fn could still have a Mut,
but it would be shared among all the dups (and the 1 deduped of it).
..
(MutId whichOpmutSpace anyFn) could automatically force instant dedup of
MutId, (MutId whichOpmutSpace), and (MutId whichOpmutSpace anyFn), and (MutId whichOpmutSpace anyFn)
be at 7th param (where op is known) and 8th param infloops, so you could know by o8 that it is a (MutId whichOpmutSpace anyFn).
..
Theres 2 ways Opmut can call itself:
(1) OpmutOuter uses a new whichOpmutSpace (VM chooses one not used yet in by this run of the VM) and
	an empty namespace or given namespace of [...muts...] snapsshot.
(2) OpmutInner is called on an existing mutable state and returns a fn or double.
	This allows you to make new funcs that work in a mutable state instead of having to inline their parts.
..
Garbcol of mutable contents of a (MutId whichOpmutSpace anyFn), which lets call that a fnmut,...
A fnmut is any fn thats a (MutId whichOpmutSpace anyFn), known by its o8 can be any of 4 values since MutId is at param 5.
At any specific time and specific VM (mutable parts arent shared across VMs but snapshots of them are),
	a fnmut either has mutable parts or not.
For each unique (MutId whichOpmutSpace), I need a set of fnmuts that have mutable state.
That set could be stored in mutable vars in (MutId whichOpmutSpace), which is created at start of an OpmutOuter call.
I could easily put a bit field in each fn to say it has such mutable state, but I need the ability to find them fast,
and during Opmut I MIGHT want the ability to remove their mutable state?
OR, is it ok to not garbcol any of it until the Opmut call ends (which is likely a small fraction of a second)?
If garbcol only at end of (small fraction of a second) whole outermost OpmutOuter call,
then I only need 1 set of fnmuts.
THEREFORE, vm.fnmutsWithState = anyFnmut, a linkedlist using someFnmut.prevFnmut ptrs, only between deduped fns.
At end of the outermost Opmut call, just loop over vm.fnmutsWithState and free the memory in their mutable parts,
but dont free those fns since thats still controlled by FuncallCache.
PROBLEM: This kind of opmut garbcol could prevent FuncallCache from doing its normal garbcol during opmut,
which aFuncallCache.touch (TODO) does it by leastRecentlyUsed.
A basic way to limit that is a kind of gas* for putting state in opmut nodes,
or maybe just reuse the stackTime and stackMem kinds of gas*.
..
THEREFORE, add a prevFnmut field to Node or maybe to fn (which lambdize returns), TODO which???.
..
TODO I was going to have aFn(aMut) vs aFn(anotherFn) know the difference between mut/stateful and fn/stateless,
and still use them as javascript lambdas (call with parens).
How would that work if (MutId whichOpmutSpace anyFn) is both a mut and a fn?
It would have to be a fn in OpmutInner and OpmutOuter are those fns???
But theres still the [...muts...] immutable/stream/snapshot of it, vs the mutable datastructs themselves.
..
Should there be a few kinds of Mut, one for mutable Float64Array
(such as (MutDoubles anyDedupedFn) would be key, and its value is mutable),
one for mutable array of nondeduped fns, one for mutable double, etc?
I could have a different o8 (or at most a few o8s) for each kind.
But could it be done efficiently?
They could all have the same fields but some of those fields could be frozen as empty arrays etc,
which could be detectable by the o8.
..
OR... just use a [] of such fnmuts, and have a bit in each fnmut to say if its in the [] or not.
Maybe fn would have an int to say which index in the [] (vm.fnmuts = [], just 1 of them per VM) its in,
and could have a Float64Array parallel to it.
If a fn loses its mutable state during opmut, since it knows its index, it could be replaced by the highest index fnmut.
There might also be an Array() parallel to that, with various other mutable things in it, instead of in a Mut.
There might be advantage to this way, since an int could be used instead of a Mut.
Such ints could be allocated using (MutId whichOpmutSpace anyFn), so you could have things like (MutId whichOpmutSpace [ball5 x]).
Fns wouldnt get to know what those ints are since they're reference not pointer,
but basically as internal vm optimization you could say give me the int for (MutId whichOpmutSpace [ball5 x]),
and it would check if that fn has such an int field else would allocate one.
Careful not to change such ints during a primitive optimization that uses them.
Maybe just the infcurCallPairs would make good keys, since I can actually allocate ints for those really fast in an Int32Array.
But do I want fns as keys, or just the combos of var names like [you can even write a sentence here [ball5 x] abc 22] could be a key?
Remember, any token that starts with a lowercase letter and has no whitespace (might be few other excluded chars)
is a utf8 (or is it utf16?) string literal of itself.
If I want the ability to optimize mutable maps of fn to fn, then I must support fns as keys, not just combos of infcur.
..
..
..
OR...
consider using just the hash ids of nodes as mut keys, such as 192 bits of hash and 32 bits of array index (of maybe up to 4 kinds of arrays) in it?
concat(192bitsHash,32bitsOfMakingATempIdOfThose192Bits,2BitsWhichArrayType,30BitsArrayIndex) is 256 bit key. could loop over 30BitsArrayIndex.
could look up the 192 bits in an Int32Array, using 32bitsOfMakingATempIdOfThose192Bits.
Or maybe I want an immutable 256 bit space including arrays, thats all possible immutable states,
so you could for example have a certain 192bitsHash..30BitsArrayIndex point at 5000 of 192bitsHash..30BitsArrayIndex ???
An advantage over 256 bit keys is garbcol is alot easier. but you cant have 32bitsOfMakingATempIdOfThose192Bits in the hashes,
just as an optimization, so that part would have to be set to 32 0s before hashing.
What if Mut has 2 such 192 bit ids, one as you just make it up randomly (whichOpmutSpace) and the other can be the id of a fn.
fn's bizeInt field could be used as "2BitsWhichArrayType,30BitsArrayIndex" in some cases?



/*
Add 2 more int fields, for size of val_dupDoubles and val_dupMuts,
and include wikibinator203 ops (which can have a max of 128 ops) to,
given a Mut, pop 2 doubles off its stack then push a multiply, UNLESS the Float64Array in the Mut is not big enough and in that case
use something like objectThatReturns0ForAllFieldValues for all doubles outside its range etc is constant 0,
and let stackSize wrap as twosComplement of int32, or something like that. i dont want to auto enlarge the array
cuz that might slow it down when doing a sequence of such ops.
Similar, some ops for copying between the double or Mut stacks in multiple Muts.
Could use a Mut as an array of such "multiple Muts" such as having 3 stacks which is a simple way to do permutations.
TODO figure out details of that while using it to derive (from these up to 128 ops) the y10x10rgb12 voxel system,
or y10x10bright4 or y9x9rgb6 etc would fit in a float32 which GPU.js is limited to but CPU can do ints such as y10x10rgb12.




TODO use 1 char long field names, but other than that, I like this design,
and it will go in vm.ops.Mut which has these 5 things (excluding whichOpmutSpace cuz fns cant see that),
and TODO make a hashtable in it, as a proofofconcept, combining val_dupMuts and val_dupDoubles (or maybe Int32Array view of it?).
FIXME would it cause a problem to have to allocate dedupedFn for each potentially nondedupedFn?
You could, in the worst case, dedup that same fn and use it as its own key,
or simpler would be to just count doubles up from 0 to use as keys since every double can be viewed as a dedupedFn.
TODO allocate range of idA_idB for dedupedFns, and that range will be a subset of nonnormedNaNs
	(or maybe the nonnormed negative infinities) where idA is high 32 bits idB is low 32.
Mut = function(dedupedFn, whichOpmutSpace){
	this.key_dedupedFn = dedupedFn;
	this.key_whichOpmutSpace = whichOpmutSpace;
	
	//this.val_dedupedNum = 0;
	//this.val_dupFn = u;
	//this.val_dupDoubles = emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) and Object.setPrototypeOf null of it.
	//this.val_dupMuts = emptyFrozenMutsArray; //can replace with new Array() and Object.setPrototypeOf null of it.
	
	//TODO objectThatReturns0ForAllFieldValues andOr Object.setPrototypeOf(this.m,null); etc, for sandboxing.
};
Mut.prototype.val_dedupedNum = 0;
Mut.prototype.val_dupFn = u;
Mut.prototype.val_dupDoubles = emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) and Object.setPrototypeOf null of it.
Mut.prototype.val_dupMuts = emptyFrozenMutsArray; //can replace with new Array() and Object.setPrototypeOf null of it.
freeze the above few default vals somehow.
..
[
	(Mut [...theMutsAsInfcurList...] cbt num fn fnAsKeyA)
	(Mut [...theMutsAsInfcurList...] cbt num fn fnAsKeyB)
	(Mut [...theMutsAsInfcurList...] cbt num fn fnAsKeyA)
	...
]




It appears that if the first 13 bits are 1 (UPDATE: 14?), then thats never used (a subrange of nonnormed negative infinity), leaving me 51 bits for ids.
Anything that doesnt start with 13 1s is viewed as a double.
Use the first 3 of those 51 bits to choose between 8 kinds of things, of up to 2^48 possible ids each?
Those 8 things: split on deduped/dup, so 4 things left: literalBitsThatFitInId64, fn, other(prefixByteOfOther_*), reservedForFutureExpansion.
I might want more than the first 3 bits to do that.

https://en.wikipedia.org/wiki/Double-precision_floating-point_format
0 00000000000 0000000000000000000000000000000000000000000000000000 2 ≙ 0000 0000 0000 000016 ≙ +0
1 00000000000 0000000000000000000000000000000000000000000000000000 2 ≙ 8000 0000 0000 000016 ≙ −0
0 11111111111 0000000000000000000000000000000000000000000000000000 2 ≙ 7FF0 0000 0000 000016 ≙ +∞ (positive infinity)
1 11111111111 0000000000000000000000000000000000000000000000000000 2 ≙ FFF0 0000 0000 000016 ≙ −∞ (negative infinity)
0 11111111111 0000000000000000000000000000000000000000000000000001 2 ≙ 7FF0 0000 0000 000116 ≙ NaN (sNaN on most processors, such as x86 and ARM)
0 11111111111 1000000000000000000000000000000000000000000000000001 2 ≙ 7FF8 0000 0000 000116 ≙ NaN (qNaN on most processors, such as x86 and ARM)
0 11111111111 1111111111111111111111111111111111111111111111111111 2 ≙ 7FFF FFFF FFFF FFFF16 ≙ NaN (an alternative encoding of NaN)









/*
Which fields should Mut have?...
..
Outerjoin these:
deduped or dup.
fn or bits.
list or one.

Write them out...
key: deduped fn.
key: deduped whichOpmutSpace, but fns cant see this, is only to separate the Muts per Opmut call.
val: deduped fn, actually a Mut, (can put any of the dup parts here, since the only way to dedup something in this system is as a fn)
val: dup fn
val: dup fn[], could implement a hashtable in this. The Array() and fn are both dup.
val: dup Mut[], could implement a hashtable in this. the Array() is dup, but the Mut is not.
val: deduped double, deduped by Node.idA and .idB, if they are anything except the high and low bits of a nonnormed NaN, are a double.
val: dup Float64Array, dup ArrayBuffer (and views of it like Float64Array Int32Array Float32Array Uint8Array)
//val: dupFnSize?
//val: arrayBufferSize?
cache: Int32Array, sharing the Float64Array.buffer.

Or maybe each Mut should have only 1 kind of val, except a second kind of val tells which kind that is,
	and Mut.prototype puts empty stuff in for the rest, such as fn[0].
	
	
vm.Mut = function(dedupedFn, whichOpmutSpace){
	just have 1 of the fields different.
};
vm.Mut.prototype.fieldA = TODO
vm.Mut.prototype.fieldB = TODO
vm.Mut.prototype.fieldC = TODO



VALS...
fn[]
bit[]
???


const objectThatReturns0ForAllFieldValues = new Proxy({}, { get(obj, prop){  return 0; } });
	Object.freeze(objectThatReturns0ForAllFieldValues);
	vm.objectThatReturns0ForAllFieldValues = objectThatReturns0ForAllFieldValues;


Mut = function(dedupedFn, whichOpmutSpace){
	keys: dedupedFn, whichOpmutSpace.
	
	key?: Maybe another key thats a double thats only ever (in the run of a VM) used in 1 Mut, and let that be the id of the Mut instead of the dedupedFn, so can put nondedupedFns in its vals? So could merge fn[] with Mut[] vals?
	Maybe make that be part of whichOpmutSpace? Probably not enuf space there.
	
	val: Mut[]
	val: bit[]
	Remember, I have code (objectThatReturns0ForAllFieldValues) to
		make a Float64Array (and probably similarly Array()/[]) return any chosen object for keys it doesnt have,
		so can do that instead of & or min/max memory fencing, by putting it as prototype
		
	Dont forget to set prototype to null (Object.setPrototypeOf) so cant access __proto__ etc
		which would allow things to escape into the outer browser tab sandbox.
	
	
	val: double
	this probably helps js compiler/eval optimize loops, as aMut.val instead of aMut.doubleArray[0]
	
}


Mut = function(n,aFn,whichOpmutSpace){
	this.dedupedFn = aFn;
	this.whichOpmutSpace = whichOpmutSpace;
	
	//this.w = whichOpmutSpace
	//FIXME how can Mut.j be a non-deduped fn? Its id would have to be something else.
	//this.j = aFn; //fn, TODO is this always deduped?
	//this.w = whichOpmutSpace
	//FIXME how can Mut.j be a non-deduped fn? Its id would have to be something else.
	
	this.j = u; //dup (not necessarily deduped) fn, so it must be part of the value. To have an array of these, use the array of Mut, and these be its vals.
	this.e = 0;
	this.m = Array(); //array of Muts which have same whichOpmutSpace
	//this.i = new Int32Array(n<<1); //.d and .i overlap the same memory
	//this.d = new Float64Array(this.i.buffer);
	this.d = new Float64Array(n); //array of doubles
	Object.setPrototypeOf(this.m,null);
	Object.setPrototypeOf(this.d,null);
	//Object.setPrototypeOf(this.i,null);
};

Mut = function(dedupedFn, whichOpmutSpace){
	this.key_dedupedFn = dedupedFn;
	this.key_whichOpmutSpace = whichOpmutSpace;
	
	//this.val_dedupedNum = 0;
	//this.val_dupFn = u;
	//this.val_dupDoubles = emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) and Object.setPrototypeOf null of it.
	//this.val_dupMuts = emptyFrozenMutsArray; //can replace with new Array() and Object.setPrototypeOf null of it.
	
	//TODO objectThatReturns0ForAllFieldValues andOr Object.setPrototypeOf(this.m,null); etc, for sandboxing.
};
Mut.prototype.val_dedupedNum = 0;
Mut.prototype.val_dupFn = u;
Mut.prototype.val_dupDoubles = emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) and Object.setPrototypeOf null of it.
Mut.prototype.val_dupMuts = emptyFrozenMutsArray; //can replace with new Array() and Object.setPrototypeOf null of it.
freeze the above few default vals somehow.


	




//TODO add to readme andor this js file comments, https://en.wikipedia.org/wiki/Explainable_artificial_intelligence , probably is relevant enough to include.

/*stream snapshot is [...] of
[cbtNotNecessarilyDeduped doubleThatIsOrWillBeDeduped fnThatIsOrWillBeDeduped fnNotNecessarilyDeduped fnAsKeyThatIsOrWillBeDeduped],
though I might change the order of those 5 things. The last has to be fnAsKeyThatIsOrWillBeDeduped.
Its basically 4 maps in 1, of fnAsKeyThatIsOrWillBeDeduped to the other 4 things.
If you want to dedup something else, you can make it into a key in another Mut.
Mut key is fnAsKeyThatIsOrWillBeDeduped_and_intordoubleOfWhichMutSpace.
intordoubleOfWhichMutSpace is only created in Opmut and lambdas dont see it.
fnThatIsOrWillBeDeduped is, in Opmut, a Mut(fnThatIsOrWillBeDeduped,same intordoubleOfWhichMutSpace).
Mut = function(fnAsKeyThatIsOrWillBeDeduped, intordoubleOfWhichMutSpace){
	fn key; //fnAsKeyThatIsOrWillBeDeduped
	number whichMutSpace; //intordoubleOfWhichMutSpace. lambda cant see this. its just for dedup of Mut, since you can do more than 1 Opmut at a time by recursion.
	FIELDS:
	Float64Array (or sharing buffer with Int32Array Uint8Array etc? those might also be fields?) cbtNotNecessarilyDeduped;
	number doubleThatIsOrWillBeDeduped;
	Mut fnThatIsOrWillBeDeduped;
	fn fnNotNecessarilyDeduped;
	
	
	//MAYBE THESE FIELDS:
	//Int32Array sharing buffer with the cbtNotNecessarilyDeduped;
	//Float32Array sharing buffer with the cbtNotNecessarilyDeduped;
	//Int16Array sharing buffer with the cbtNotNecessarilyDeduped;
	//Uint8Array sharing buffer with the cbtNotNecessarilyDeduped;
};
Getting Lambda params this way can reuse some constant [cbtNotNecessarilyDeduped doubleThatIsOrWillBeDeduped fnThatIsOrWillBeDeduped],
maybe this one: [0 0 u], where number literals such as 0 mean a raw cbt64 of those double/float64 bits,
or maybe [(0 0) 0 u] since that makes it clear which is the array ((0 0) is a cbt128 and actually wouldnt be displayed that way since its just raw bits),
or maybe [(pi e) 0 u].
and just append (since its an infcur) fnNotNecessarilyDeduped fnAsKeyThatIsOrWillBeDeduped to it.
In Lambda params, fnAsKeyThatIsOrWillBeDeduped is key and fnNotNecessarilyDeduped is val.
The not necessarily deduped part of val is important so it can efficiently wrap large arrays made by GPU.js or compiled javascript code etc.
The logic of the universal lambda function (combinator), while clean at least, works exactly the same if things are deduped or not, except for efficiency.

Should "number whichMutSpace" just be an idA_idB like in Node? No, cuz its not going in the same dedup map as fns.
There will be 3 dedup maps, for: fn, FuncallCache, Mut. Or maybe 1 dedup map per whichMutSpace.
fn is deduped by: idA idB blobFrom blobTo, so 4 ints.
FuncallCache is deduped by: 2 fns and a StackStuff, so 4+4+5=13 ints.
Mut is deduped by: fn and a whichMutSpace, so 4+1or2=5or6 ints
(UPDATE: change that 4 to 2 cuz blobFrom and blobTo will always be 0 in a perfectDeduped fn, so ...=3or4),
not sure if I need 1 or 2 ints (or a double) for number of Mut spaces during 1 run of the VM
(so could go on for up to a month or might even be able to run for years without restarting if you're not creating alot of objects often, as the bottleneck on that is theres only around 2^52 possible blobs+nonblobFns (idA_idB that fit in nonnormed NaN bits, else are a double), or the VM boots runs and ends in a tiny fraction of a second as its very lightweight). And even if you do restart the VM, you can save state and continue from where it left off. Alternatively to feeling the effects of restarting a server, you may snapshot the state of a server at runtime and boot another server using that state and, in theory, get them in sync, then drop either of them and continue from that, normally dropping the older one since it uses bigger values of idA_idB which are in danger of running out of approx 2^52 number of ids. Or, you could in theory run 5 VMs at once in sync, even if all 5 are written in a 5 different programming languages, though if they are 5 different OS processes you're likely to get much higher latency (less latency in linux for things like that, I'd guess, but still OS processes are slow).
You'll be able to sync, verify, redundantly mirror, load-balance, etc, the same ways inside 1 computer as you can across the Internet.
..
Since Opmut might be called on many small things, I want at least another 52 bit id space (or 64, but keep in mind it has to be hashable if multiple OpmutSpaces are in the same hashtable, which I'm undecided if they will be or not in this VM).

Theres 4 kinds of vals in Mut, so I need 4 chars for reading and writing them...
These buttons are easy to push: / ;

Example stream:
[
	[0 5 u u [ballA x]]
	[0 10 u u [ballA y]]
	[0 6 u u [ballB x]]
	[0 5.1 u u [ballA x]]
]


TODO syntax to only display [a b c] once in [[a b c d e] [a b c x y]].
[([a b c]#Ab d e) (Ab x y)] does that, BUT how would it automatically know to display it that way instead of: [[a b c d e] [a b c x y]]?

Maybe I should use...
[
	(Mut 0 5 u u [ballA x])
	(Mut 0 10 u u [ballA y])
	(Mut 0 6 u u [ballB x])
	(Mut 0 5.1 u u [ballA x])
]
and (Mut 0 0 u)#Mu so (Mu val key) is (Mut 0 0 u val key), and those last 2 params are what Lambda params become, the way it gives them to Opmut.
Its not a complete Mut, cuz it still needs whichMutSpace. Its a snapshot of a Mut. Fns correctly cant see whichMutSpace.




OLD:
TODO change stream/[] [keyA valA keyB valB...] to [keyALambda valALambda valADoubleRaw valADoubleArrayRaw keyBLambda ...] which will mirror Mut having intOrDouble_whichMutSpace and keyALambda as primaryKey and the 3 vals as val. And make there be 3 char prefixs of the 3 vals instead of just ?{...keyALambda...}, and keep using the Syntax described below.








/*
Maybe start with the approx (2^(1.5^height)) space of sparse keys (of binforest shapes), and double values from -1 to 1??? I could easily alloc ints to a set of keys from (2^(1.5^height)) in realtime and use a double[] of that expanding size. But that seems to make it harder to reuse "musical instrument parts" cuz its too low level.



...................
...................

TODO start with (using "key valLambda valDouble valDoubleArray") making simple small musical instrument parts that interact with eachother thru double[] in double[] out fn otherState, CUZ the density of interestingToHumans patterns of that is much higher than the density for games. If you take part of one game and put it in an other game, its likely to unbalance the gameplay and make it not fun, except some rare times it would make it more fun, but if you take part of one musical instrument and combine it with other instruments, it far more often sounds interesting. Do this with opmut. I have some existing instruments in my code from years ago in various opensource, that I can rebuild as a basic start. I still plan to do games, science tools, number crunching in GPU, etc, but I need a fun proofofconcept first. Theres alot of strange sound effects that most people done know how to make, that they could make and share and combine into new lambdas as musical instrument parts and so on... so the demand is there (as in supply and demand) and supply very very low, for alot of instrument parts. Theres high supply of some few experts using them in recordings, but very low supply of just anyone's ability to make these sounds based on realtime input. That niche appears to be the strongest place for wikibinator203 to start. TODO maybe reproduce the first 18 seconds of "the who - who are you" like in https://www.youtube.com/watch?v=LYb_nqU_43w as lambdas (before the voice, just the electronic instruments), as a basic demo? If I could make lambdas that do (especially with a few params to vary in each to make it sound different), approximations of a few hundred small pieces of existing music like that, might be interesting enough to motivate people to build more things with it. Its all equations to me. Realtime input only, so only things simple enough to move the hands etc on computer/etc controls to change the sound in realtime. Focus on sound effects of a small fraction of a second, a "kind of sound" instead of something that varies based on a sequence of notes. Optimize for a powOf2 number of sound samples per second, such as 256. 256 is the smallest that WebAudioAPI allows??? [[["The bufferSize parameter determines the buffer size in units of sample-frames. If it’s not passed in, or if the value is 0, then the implementation will choose the best buffer size for the given environment, which will be constant power of 2 throughout the lifetime of the node. Otherwise if the author explicitly specifies the bufferSize, it MUST be one of the following values: 256, 512, 1024, 2048, 4096, 8192, 16384." -- https://www.w3.org/TR/webaudio/ 2022-3-18]]]. Optimize to do a fast-varying set of musical instrument parts (made of lambdas) in CPU L1 cache. Linux is usually lower lag for sound than windows.
..
DETAILS...
..DETAILS........
..
Consider using unit (length 1) vectors, or vectors where all dimensions/dims range -1 to 1 (like i did in audivolv), of approx a googolplex number of sparse dims, which means lambdas from height 0 to approx height a few thousand (even though they could easily go into the millions of height) as key and double/float64 as value. Could define lots of musical instruments in that, as a space of dims big enuf that they would rarely accidentally overlap and interfere with eachother. Maybe do it like audivolv did with a double[30] or double[100] etc, except in that bigger sparse dimensional space. I could, very soon if I wanted to (so many details to think about...) have such a music system working at around, I estimate, 100 million flops in CPU. Since sound only needs about 20k samples per second for 1 channel sound, to sound "good enough" for music etc, that leaves 5k flop per sample. More generally, this could be a kind of sparse dimensional vector. I could make 5k javascript objects or 5k int pointers into a Float64Array, though sparseness might have it jumping around alot more than th at. So the combined state of a set of musical instruments being played would, very very very sparsely, be, in abstract math, a number from 1 to a googolplexplex ( https://en.wiktionary.org/wiki/googolplexian ).
Each musical instrument part might read and write a few specific dims, similar to how audivolv does it but not limited to those specific sound transforms, and have a sort value to say what order it happens in the sequence of musical instrument transforms that are turned on or off.
...
...
Some useful sound transforms I've made over the years...
.......
decaymax, as in jsoundcard example code.
the audivolv transforms of a few doubles to the same number of doubles, where all those doubles range -1 to 1.
...
The most efficient connection between sim musical instruments I know of, is a state space of double[] with 4 ranges: inputs, state, tempVars, outputs. [inputs,state]->[nextState,outputs]. This could be generated many possible ways, such as in theory by lambdas.
...
PROBLEM... how to reset dim_as_key/double_as_val to some random double or to 0 as val??? cuz dont want it to get stuck.




TODO start with simple 2d games that fit on 1 screen with no scrolling.

TODO??? make stream/[] datastruct be blocks of 4 things instead of 2???: key valLambda valDouble valDoubleArray,
	so it aligns with Mut datastruct. (=D ?arrayAC ?D?_something {...}), or something like that.
Or maybe an op that infloops unless its params are those 4 types (checks for nonnormed doubles etc), and [...] of that?
[(thatOp keyLambda valLambda valDouble valDoubleArray) (thatOp keyAnotherLambda.... ].
Could do it as 3 of [key val key val]..., but 1 of [key vala valb valc] would be more efficient on average.
Have 3 prefix chars for reading, and maybe 3 other prefix chars for writing, those 3 vals of each keyLambda,
instead of just ? in ?x etc. writing into valDoubleArray takes an extra param during opmut.
Opmut verifies incoming stream/[] is that datastruct before running the For/DoWhile/etc.
Could instead do it by varargAx, but that makes it potentially infinitely expensive to verify.

{,Fork ?aSize ,?a ,ForkBody} ???

yes (=D ?sum ,0) no (= ?sum ,0)

3 types: fn (the most general), double_asRawCbt64, double[]_asRawCbtOfPowOf2Size ???
	These types are used in opmut.
	
TODO??? replace Math.sin Math.exp * etc, by 2 ops, one of (double,double)->double and one of double->double, with an extra param of deriving those bits? Problem is, theres alot of fast hardware out there, that people are using already, which has nondeterministic roundoff, some uses float32, some approximates ops using combos of other ops, etc.


(
	Lambda
	[arrayAB arrayBC aSize bSize cSize]
	{
		,{
			,Opmut //,{OptimizationHint opmut}//,Opmut
			_[
				(= ?arrayAC {,NewDoubles {,* ?aSize ?cSize}})
				(For (= ?a ,0) (lt ?a ?aSize) (++ ?a) [
					(For (= ?c ,0) (< ?c ?cSize) (++ ?c) _[
						(= ?sum ,0)
						(For (= ?c ,0) (< ?c ?cSize) (++ c)
							(+=D ?sum {,*
								{,D ?arrayAB {,+ {,* ?a ?bSize} ?b}}
								{,D ?arrayBC {,+ {,* ?b ?cSize} ?c}}
							})
						)
						(=D ?arrayAC {,+ {,* ?a ?cSize} ?c} ?sum)
					])
				])
				?arrayAC
			]
		}
		(...This gets [arrayAB someVal arrayBC anotherVal ...]...)#LambdaParams
	}
)#Matmul



Syntax:
(_[a b c] x) means ((Seq [a b c]) x) which does (c (b (a x))), for any vararg in the [].
Xyz means the (...)#Xyz constant lambda, since it starts with a capital letter (or things like =D or =).
abc means 'abc' since it starts with a lowercase letter.
{a b} means (s a b)
{a b c} means {{a b} c} aka (s (s a b) c), aka in javascript this code will actually work: s(s(a)(b))(c).
,a means (t a), often used like ({,+ getX getY} treemapZ) which evals to (+ (getX treemapZ) (getY treemapZ)).
abc.def<<ghi<5>>> FIXME i might not need this syntax anymore and would write ?[abc def] or something like that?
<<>> gets from something like what {} means in javascript, a map of string to thing.
<> gets from a Float64Array. These 2 things are used in small blocks of javascript-like code that compiles to javascript but blocks access to Float64Array.buffer etc so it can guarantee that all lambda calls halt within chosen limits of memory and time that can be tightened recursively on stack.

[a b c] means (infcur a b c). Infcur takes infinity params aka never evals, so its a kind of list.


/*
(
	Lambda
	[arrayAB arrayBC aSize bSize cSize]
	{
		...TODO make sure to use (For ...) instead of {,For ...} cuz opmut-like stuff doesnt use funcallcaching...
		...and use the Mut datastruct which has [[int(ordouble?) whichMutspace] and dedupedFn] as primaryKey
			and has Float64Array and Mut as vals. and uses [keyA valA keyB valA...] as state when copying
			between that (immutable by forkedit) and Muts.
		{
			,Opmut
			(For...)
			...TODO copy the lambda params in somehow...
		}
	}
)#matmul
*/

/*TODO very important, write some example code where opLambda and [...] as stream, pass params between eachother.
Make a conwayLife or chuasCircuit or paint or something, where loops and ifelse and lambdas use eachother.
fibonacci is ok test of lambda but still need test of stream/[]/For/While/etc.

TODO verify this works by reading about the opcodes used, then make it work by filling in those opcodes in rootEvaler (cuz this VM is incomplete), then work on syntax such as lambdaGet and streamGet and lambdaGetOrStreamGet each have 1 char prefix (? $ _ maybe), and lets just call (lambdaGetOrStreamGet x) ?x for now, and [a b c] is (infcur a b c), and lambda is opLambda, and it automaticly uses funcParamRet caching (TODO make it cache doubles by Node.idA and node.idB, if they hold double bits (a certain prefix that leaves around 2^50 ids for nondoubles in the nonnormedNans) that is automatically deduped) so costs linear instead of exponential (the lambda does that, but For/While/opStream/etc does not and is more for number crunching kind of things...
..
(
	Lambda
	[x]
	{
		,IfElse
		{,Lt ?x ,3}
		,1
		{,+ {Recur1 ?x} {Recur1 {,- ?x ,1}}}
	}
)#Fibonacci
..
TODO test
(Fibonacci 1) -> 1
(Fibonacci 2) -> 1
(Fibonacci 3) -> 2
(Fibonacci 4) -> 3
(Fibonacci 5) -> 5
(Fibonacci 6) -> 8


SOLUTION:
(opLambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (opLambda FuncBody [x y z] valX valY) valZ)),
where (LazyEval a b c) -> (a b c).
FuncBody can contain {,Recur1 makeOtherValZ} or {,Recur2 makeOtherValY makeOtherValZ} etc, to call itself recursively.
(While SomeCondition SomeLoopBody [varNameABC valABC x valX]) -> forkEdited [varNameABC valABC x valX]
?x and $x are (or choose different prefix byte) (lambdaGet x) and (streamGet x). Theres no lambdaPut. There is streamPut.
..
TODO very important, write some example code where opLambda and [...] as stream, pass params between eachother.
Write a matmul func (in cpu, not well optimized yet) thats a lambda but uses a stream/[] with For loops, but uses opLambda to do plus multiply lessThan etc, and the outer lambda will have an extra lambda param that the loops call for some reason.
Or make a lambda that calls a stream/[] of double for loop to call each in a list of lambdas on each other lambda in the list, in all pairs, or call them on the loop counter squared, or something. Whatever the example code is, it has to have stream/[] and opLambda call eachother, both directions, passing params to eachother, and maybe reading eachothers params during the middle of a calculation or getting the state of loop as stream/[]. Something like that.
..
(While SomeCondition SomeLoopBody [varNameABC valABC x valX]) -> forkEdited [varNameABC valABC x valX]
(opLambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (opLambda FuncBody [x y z] valX valY) valZ))
FuncBody can contain {,Recur1 makeOtherValZ} or {,Recur2 makeOtherValY makeOtherValZ} etc, to call itself recursively.
?x and $x are (or choose different prefix byte) (lambdaGet x) and (streamGet x). Theres no lambdaPut. There is streamPut.
TODO very important, write some example code where opLambda and [...] as stream, pass params between eachother.
Make a conwayLife or chuasCircuit or paint or something, where loops and ifelse and lambdas use eachother.



/*
SOLUTION???
(opLambda FuncBody [] [z y x varNameABC])
(opLambda FuncBody [] [z y x varNameABC] valABC) -> (opLambda FuncBody [varNameABC valABC] [z y x]).
opStream would just be infcur as [keyA valA keyB valB ...], and one of those is in opLambda.
(opGetRecur (opLambda FuncBody [varNameABC valABC x valX] [z y])) -> (opLambda FuncBody [varNameABC valABC] [z y x]).
(opGetRecur (opLambda FuncBody [varNameABC valABC x valX] [z y]) otherValForX)
-> (opLambda FuncBody [varNameABC valABC x otherValForX] [z y]).
(While SomeCondition SomeLoopBody [varNameABC valABC x valX]) -> forkEdited [varNameABC valABC x valX].
streamGet and lambdaGet should be different ops, and have different prefix such as ?x and $x ? Theres no lambdaPut. Maybe also some prefix for streamPut. If its done that way, thats areOplambdaAndOpstreamMerged being false. lambdas and streams must be able to interact with eachother. I could make a lambdaOrStreamGet op, thats less efficient cuz it checks for 2 different o8s.
The datastruct FuncBody is called on is WHAT??
WHAT??
(opLambda FuncBody [varNameABC valABC x xVal y yVal z zVal] []) ? Its halted since it doesnt have a nextParam.
But it interferes with getting evaler from l child, and it creates too many nodes.
FIXME
FIXME
FIXME



/*
Designing these ops: opStream streamGet streamPut (and possibly a separate opLambda if cant merge it with stream op efficiently).
Start by defining some designVars, such as areOplambdaAndOpstreamMerged.

areOplambdaAndOpstreamMerged - If true, opLambda is a way of using opStream. If false, opLambda takes an opStream as one of its params and forkAppends it as new params come in, that opLambda has a list of param names to forkPop from. If true, then streamGet and streamPut are simpler and maybe faster, cuz they just use opStream like a linkedlist of key_and_val and (depending on the design I choose) in some cases u may be in that list and is ignored by streamGet and only slightly interacted with by streamPut. I strongly prefer this be true but its hard to make it efficient.

whatAreTheKeysOfTheFewConstants - (only if areOplambdaAndOpstreamMerged). such as p for nextParam, b for funcBody, q for popParams, like (streamGet p) means (streamGet 'p'), and p means 'p' cuz lowercase, and names that start with capital letter are #Names. Or maybe it should be as small as possible such as u and (u u) etc. If false, then there are no such standard constants used in opStream. This and areOplambdaAndOpstreamMerged will probably be true. Also, this might be merged all into 1 key as in isThereOnly1ConstantKeyThatTheFewConstantKeysAreMergedInto.

doesOpstreamHaveFuncbodyKey - (only if areOplambdaAndOpstreamMerged). This is probably going to be true if areOplambdaAndOpstreamMerged, since the alternative is to make streamGet and streamPut check for some structure other than the normal key/vals that opStream is made of.

doesOpstreamHaveNextparamKey - (only if areOplambdaAndOpstreamMerged). If true, then funcBody val reads ?nextParam (but something smaller as in whatAreTheKeysOfTheFewConstants) to get the param that just came in to the opStream (such as when u is the second last param, and when u is the last param its waiting for such a param then puts it before the u).

doesOpstreamHavePopparamsKey - (only if areOplambdaAndOpstreamMerged). If true, the funcBody val does not have turingComplete control of the vararg while there are still params in the Popparams val, but after that runs out (putting in key/vals), the funcBody val could (if I choose a flexible enuf design) forkEdit the streamOp in turingComplete ways such as to remove all keys matching a certain pattern or to return a completely different thing than a streamOp or to put more params in popparamsKey such as just 1 more param so funcBody val runs each next param or waits for n more params etc. If false, then either NOT areOplambdaAndOpstreamMerged OR funcBody val must contain the param names to put in, as it handles its own currying before it has enuf params, which would make it more complex and maybe slower.

howManyCurriesDoesOpstreamWaitOn - max curries anything can wait on is 254 (since 255 means never evals, like in infcur). But in some designs (that I will probably do one or some of) it always waits on only 1 more curry and forkEdits itself or verifies it is halted, such as by evaling (using b/funcbody val) when second last param is u, and not allowing third last or earlier params (except the first 7 params before opcode is known) to be u except if its the last param (or if its second last then that evals). For example, it could be waiting on 300 params (which is more than 254), each with a name, by that being in some kind of list (infcur?) in q/popParams val.

isThereOnly1ConstantKeyThatTheFewConstantKeysAreMergedInto - If true then whatAreTheKeysOfTheFewConstants has only 1 built in key. If there were going to be 3 built in keys, for example, of p/nextParam, q/popParams, and b/funcBody (or whatever those keys are), then that would be put in some datastruct in the val of the one built in key (which may be u as in (streamGet u) or may be _ or empty string or something). This would slow down evaling funcBody but would not slow down other uses of opStream such as opmut-style for if/else * + etc and would make those simpler cuz of simpler streamGet and streamPut. The p/nextParam would only be set if second last param is u (or however thats marked, such as maybe second last param's key is u). If true then, in some possible designs, in (opStream [keyA valA] [keyB valB] [u Stuff]), Stuff would be such a datastruct, maybe an infcur of 3 things, or maybe another opStream with 3 keys but it just doesnt eval cuz is just a few key/vals none of which are the built in constants (or just 1 constant if its merged as in isThereOnly1ConstantKeyThatTheFewConstantKeysAreMergedInto).

howIsOpstreamMarkedToEvalWhenGets1MoreParam - The simplest way is it evals when the second last param is u. Another way is to eval when the second last param is a key/val whose key is u, such as (opStream [keyA valA] [keyB valB] [u Stuff]) is waiting on 1 more param, and (opStream [keyA valA] [keyB valB] [u Stuff] x) would forkEdit Stuff to say nextParam is x, andOr maybe append a key/val of [someParamNameFromThePopparamsList x], then get FuncBody out of Stuff and call it on all that together.

whatsTheKeyValDatastructThatOpstreamIsAListOf - Since (infcur key val) is written as [key val] in the default syntax, infcur seems the most intuitive. Else it would be an op I design just for that such as (opKeyVal key val), just a semantic to mean its a key and val, and maybe it would allow 1 more param such as (opKeyVal whatKindOfOpstreamListItemIsThis key val) and whatKindOfOpstreamListItemIsThis might tell if its a "built in" whatAreTheKeysOfTheFewConstants kind of thing or a normal key/val. Probably I'll just use [key val].

howIsEmptyOpstreamDetected - Op is known at 7 params (of u), and after that o8/opcode is copied from left child. An optimization can be to define an op at param 6 and just let the 7th param be its first param, and if that 7th param is u vs anything_except_u thats 2 kinds of the op (that both do the same thing), but when using that optimization it must always be halted at its first (7th of u) param since thats required in the first 7 params of u. Similarly I was considering opOneMoreParam (which isnt going to be any op anymore since opLambda is merging into opStream) was going to be known at 5 params of u and have its next 2 params that way, so that the number of params the lambda is waiting on is known at 7 params as it would have been a vararg (up to around 240-something max params) thats measured at that 7th param. I might just put a mask bit in to say it has more than 7 params or not or that it has exactly 7 params, or count the number of params up to 14 and 15 means more than that but i'd have to find room for those 4 bits if so. Probably best to just check l.l.o8 or something like that.


Maybe streamGet and streamPut should have a fast way to check for a (opLambda ...) vs [[keyA valA] [keyB valB] [keyA anotherVal]], and for streamGet to find the [[keyA valA]...] in the opLambda and recurse into that. But what about streamPut on opLambda, is that even allowed?
(opLambda FuncBody [z y x varNameABC] [[keyA valA]...])
(opLambda FuncBody cBody [z y x varNameABC] [[keyA valA]...] NextParam) -> (opLambda FuncBody [z y x] [[keyA valA]... [varNameABC NextParam]]).
(opLambda FuncBody [z] [[keyA valA]... [varNameABC NextParam] [x valX] [y valY]]) is halted,
but (opLambda FuncBody [] [[keyA valA]... [varNameABC NextParam] [x valX] [y valY] [z valZ]]) is not halted so cant be the datastruct that funcBody is called on.
It also causes a problem of how does opLambda get a copy of itself to call itself recursively.
If its like the old versions of this system, it would be (FuncBody [(opLambda ...allParamsExceptLast...) lastParam]),
so just calling l then r on the param of FuncBody would get (opLambda ...allParamsExceptLast...) which includes FuncBody.
It could just make up more param names such as call (opLambda FuncBody [z y x varNameABC]) on whatever [[keyA valA]...] it got,
[but that would tend to make [[keyA valA]...] get ever bigger (unless streamPack it, which can be slow so shouldnt use every recursion).
It could forkPop the top n key/vals from [[keyA valA]...] and put them back into [z y x varNameABC] but they are not necessarily in the same order and not necessarily only occur once each since the same could have been written multiple times, if it was made by something other than that opLambda called on stuff (something could have forkEdited the contents of the opLambda).
Maybe the [z y x varNameABC] should be another [[keyA valA]...] in reverse order that can just pop from one and push on the other, replacing vals in some cases (else might view it as a default val)?

isThereOpOneMoreParam - ???

howDoesAFnCallItselfRecursively - ??? The FuncBody must take just 1 param so {...} can define it easily, and whatever opLambda andOr opStream does is how thats used as more params. Theres a few ways I'm considering: opOneMoreParam, (opLambda FuncBody [z y x varNameABC] [[keyA valA]...]), and doesOpstreamHaveFuncbodyKey_or_etc. opOneMoreParam complicates streamGet and streamPut but makes it easy to copy Node.evaler from left child. (opLambda [...param names...] ...those param values...) being a completely separate structure as opStream (which would then just be an infcur/[...]) ??? Maybe streamGet and lambdaGet should be different ops, and have different prefix such as ?x and $x ? Theres no lambdaPut. Maybe also some prefix for streamPut. If its done that way, thats areOplambdaAndOpstreamMerged being false. lambdas and streams must be able to interact with eachother. I could make a lambdaOrStreamGet op, thats less efficient cuz it checks for 2 different o8s. I could make (λ x (λ y (...))), and it could be written as λxλy(...), which would basically be opOneMoreParam written as λ.


(opLambda FuncBody [] [z y x varNameABC])
(opLambda FuncBody [] [z y x varNameABC] valABC) -> (opLambda FuncBody [varNameABC valABC] [z y x]).
opStream would just be infcur as [keyA valA keyB valB ...], and one of those is in opLambda.
(opGetRecur (opLambda FuncBody [varNameABC valABC x valX] [z y])) -> (opLambda FuncBody [varNameABC valABC] [z y x]).
(opGetRecur (opLambda FuncBody [varNameABC valABC x valX] [z y]) otherValForX)
-> (opLambda FuncBody [varNameABC valABC x otherValForX] [z y]).
(While SomeCondition SomeLoopBody [varNameABC valABC x valX]) -> forkEdited [varNameABC valABC x valX].











-------------

/*
(stream [someVar 6] [keyA valA] [keyB valB] [x anotherVal] [funcBody (Params [?y ?x] {,Sqrt {,Square ?x} {,Square ?y}})] u)
..
(stream [funcBody (Params [?y ?x] {,Sqrt {,Square ?x} {,Square ?y}})] u)
where Params is an op that uses ?funcBody and ?nextParam (except todo choose much shorter var names for those).
..
(stream [funcBody (Params [?y ?x] {,Sqrt {,Square ?x} {,Square ?y}})] u 6)
-> (stream [x 6] [funcBody (Params [?y] {,Sqrt {,Square ?x} {,Square ?y}})] u)
..
(stream [x 6] [funcBody (Params [?y] {,Sqrt {,Square ?x} {,Square ?y}})] u 8)
-> ({,Sqrt {,Square ?x} {,Square ?y}} (stream [x 6] [y 8] [funcBody (Params [] {,Sqrt {,Square ?x} {,Square ?y}})]))
-> 6*6 8*8
FIXME forgot to put in the + in the Sqrt
..
(stream [funcBody (λ x (λ y {,Sqrt {,Square ?x} {,Square ?y}}))] u)
(stream [funcBody (λ x (λ y {,Sqrt {,Square ?x} {,Square ?y}}))] u 6)
-> (stream [x 6] [funcBody (λ y {,Sqrt {,Square ?x} {,Square ?y}})] u)


/*
(stream [x 6] [keyA valA] [keyB valB] [x anotherVal] [funcBody {,Sqrt {,Square ?x} {,Square ?y}}_fixme] u)
..
a funcbody could be... (opParamsList [?y ?x] {,Sqrt {,Square ?x} {,Square ?y}})
..
(stream [x 6] [keyA valA] [keyB valB] [x anotherVal] [funcBody (opParamsList [?y ?x] {,Sqrt {,Square ?x} {,Square ?y}})] u)
(stream [someVar 6] [keyA valA] [keyB valB] [x anotherVal] [funcBody (params [?y ?x] {,Sqrt {,Square ?x} {,Square ?y}})] u)



//(stream [?x 6] [?keyA valA] [?keyB valB] [?x anotherVal] [?funcBody {,sqrt {,square ?x} {,square ?y}}_fixmeMustMakeKeval[]ForX] u)


/*
(thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) (kv ?keyA anotherVal) (kv ?funcBody FuncBody) u) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) (kv ?keyA anotherVal) (kv ?funcBody FuncBody) u NextParam) evals.
Evals to what? Include a (kv ?nextParam NextParam)? Whatever it is, FuncBody gets called on a (thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) ...). Or, like the older versions of this system, lambda/curry* ops could use a (lazyEval_or_pair allParamsExceptLast lastParam) as param of funcBody.
..
(?keyA (thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB)) -> valA .
(?keyA (thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) (kv ?keyA anotherVal) (kv ?funcBody FuncBody))) -> anotherVal.
(?funcBody (thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) (kv ?keyA anotherVal) (kv ?funcBody FuncBody))) -> FuncBody.
thisWhateverNewOp would need to have an opcode whose last 2 opbits are (u u) instead of u, like in "vm.test('o8/opcode of u(uu)(uu)(uu)(uu)(uu)(uu)', u(uu)(uu)(uu)(uu)(uu)(uu)().o8(), 127);".
This takes slightly longer to verify than ops like s and t, but you just need to verify that there are no u params after param 7, unless its the last param.
TODO choose var name for ?funcBody and ?nextParam OR a different op than kv for it, such as...
(thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) (kv ?keyA anotherVal) (theFuncBody FuncBody) (theNextParam NextParam))
or similar datastruct...
Or maybe if second last thing is a theFuncBody (thisWhateverNewOp (kv ?keyA valA) ... (theFuncBody FuncBody) NextParam) then eval.
I like (kv ?funcBody FuncBody) and (kv ?nextParam NextParam) so far, but want shorter var names for them.
...
TODO define func like js Math.hypot(x,y) using this...
(thisWhateverNewOp (kv ?funcBody {,sqrt {,square ?x} {,square ?y}) u) BUT thats not enuf since FuncBody must create (kv ?x whateverTheNextParam) and similar for ?y.
(thisWhateverNewOp (kv ?x 6) (kv ?funcBody {,sqrt {,square ?x} {,square ?y}) u) must result from calling the former on 6.
..
(thisWhateverNewOp [?x 6] [?keyA valA] [?keyB valB] [?x anotherVal] [?funcBody {,sqrt {,square ?x} {,square ?y}}] u)
..






/*
Could put all ?keyX valX in (kv ?keyX valX) so thats never u.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (opThatSaysItsFuncbody funcBody) u nextParam)
So if second last param is u, eval, else is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (opThatSaysItsFuncbody funcBody) u) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (opThatSaysItsFuncbody funcBody)) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal)) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB)) is halted.
Seems like too much stuff to compute efficiently, including copying of Node.evaler, not just "from l child" but in this structure.
But it has the big advantage of it has unlimited vararg and funcBody is always within constant depth of the end, and you only need the o8/opcodeByte to know it is this kind of thing.
..
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (kv ?funcBody funcBody) u) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (kv ?funcBody funcBody) u nextParam) evals.


















/*
NO THIS DOESNT WORK CUZ the l of it isnt halted. FIXME FIXME FIXME.. maybe just need to use [...] as infcur in something like (lambdaStream [?z ?y ?x] [key val key val...] valX) ???
DO THIS, as it merges op lambda and the streamGet streamPut streamPack For While DoWhile If IfElse etc ops,
and maybe use the [] syntax for it, or maybe keep [] for infcur...
(thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal ... funcBody) is halted if its lDepth is even,
else is (thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal ... funcBody nextParam) and evals to (funcBody (lazyEval (thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal ... funcBody) nextParam)),
which may for example put another ?whateverTheNextVarNameIs nextParam just before a (modified to not have ?whateverTheNextVarNameIs varName) funcBody, or may do anything as its a turingComplete vararg. Its about as close to varargAx as you can get without having constraints that are hard to verify.
..
What if, its halted or not only depending on if the second last param is u?
(thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal (u funcBody) u) //second last param is not u
(thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal (u funcBody) u nextParam) //second last param is u
but still would need to redesign it so thats true of (thisWhateverNewOp ?keyA valA keyB? valB ?keyA) and (thisWhateverNewOp ?keyA valA keyB?) etc.
Could put all ?keyX valX in (kv ?keyX valX) so thats never u.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (opThatSaysItsFuncbody funcBody) u nextParam)
So if second last param is u, eval, else is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (opThatSaysItsFuncbody funcBody) u) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal) (opThatSaysItsFuncbody funcBody)) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB) (kv ?keyA anotherVal)) is halted.
(thisWhateverNewOp (kv ?keyA valA) (kv keyB? valB)) is halted.
Seems like too much stuff to compute efficiently, including copying of Node.evaler, not just "from l child" but in this structure.
But it has the big advantage of it has unlimited vararg and funcBody is always within constant depth of the end, and you only need the o8/opcodeByte to know it is this kind of thing.












/*
(thisWhateverNewOp ?keyA valA ?keyB valB oneOfAFewPossibleStates nextParam) -> (thisWhateverNewOp ...)
I'm not sure what I want on the right end of it but I want it to stream whatevers on the right end to choose what to append or eval to something very different etc. Must handle all possible nextParam, even if nextParam is a oneOfAFewPossibleStates etc.
What if it depends if theres an even vs odd num of params, which ?keyA valA ?keyB valB etc would fit well in???
Could make .l.l.l.l... depth a bit in the masks in headerInt.
..
(thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal ... funcBody) is halted if its lDepth is even,
else is (thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal ... funcBody nextParam) and evals to (funcBody (lazyEval (thisWhateverNewOp ?keyA valA keyB? valB ?keyA anotherVal ... funcBody) nextParam)),
which may for example put another ?whateverTheNextVarNameIs nextParam just before a (modified to not have ?whateverTheNextVarNameIs varName) funcBody, or may do anything as its a turingComplete vararg. Its about as close to varargAx as you can get without having constraints that are hard to verify.








/*
I want to merge the stream/[key val key val...] datastruct with lambda op, so both can use the same (streamGet varXYZ) aka ?varXYZ.
(NextVar keyB valB (NextVar (lambda FuncBody [...paramNames...]) keyA valA))#Asdfa34345
(Asdfa34345 valC) -> (NextVar Asdfa34345 keyC valC) OR (FuncBody (...something...)) depending if quantity of params in [...paramNames...] are filled.
Something like that, but its not a consistent design yet.
FIXME NextVar must take same number of params every time, and same order, so put recursive path to FuncBody and key and val in consistent place in it.
(NextVar (lambda FuncBody [...paramNames...]) keyA valA)
(NextVar (NextVar (lambda FuncBody [...paramNames...]) keyA valA) keyB valB)
..
or...
what if theres 2 standard varnames, maybe ?varargChooser and ?funcBody (TODO find 2 smaller var names or maybe u and (u u)???),
that go in a standard stream/[?key val ?varargChooser {...someFunc...} ?funcBody {...aFunc...} ?key val...], 
so (lambda [?key val ?varargChooser {...someFunc...} ?funcBody {...aFunc...} ?key val...]) would be "a lambda"
and (lambda [?key val ?varargChooser {...someFunc...} ?funcBody {...aFunc...} ?key val...] nextParam)
would get the {...someFunc...} from "?varargChooser {...someFunc...}", and call {...someFunc...} on something
to choose too keep it that way (dont eval yet) vs choose for funcBody to eval,
or like varargAx (but without being a constraint, so its verified trivially by forest shape having the right number of params)
could merge varargChooser and funcBody into 1 thing that returns (u returnVal) vs returns u to mean dont eval yet,
but I'm not sure if thats consistent since the lambda op cant be both halted and evaling at the same time without being a varargAx etc.
...
What if there was an op like infcur and like lambda, except funcBody is the "last thing in the infcur"...
(thingLikeInfcurLikeLambda a b c d funcBody) is halted.
(thingLikeInfcurLikeLambda a b c d funcBody nextParam) calls funcBody
on (thingLikeInfcurLikeLambda a b c d ...something including nextParam...) ???
..
(lambdaStream [?z ?y ?x] [key val key val...])
(lambdaStream [?z ?y ?x] [key val key val...] valX) -> (lambdaStream [?z ?y] [key val key val... ?x valX])
(lambdaStream [?z] [key val key val... x? valX y? valY] valZ) -> eval it.
????
...
(haltedStreamIfOneParamEvalsIfTwo [...stream...])
(haltedStreamIfOneParamEvalsIfTwo [...stream...] nextParam)
(evalingStream [...stream... ?nextParam nextParam]) -> some (haltedStreamIfOneParamEvalsIfTwo [...stream...]) or evals to anything else.
..
(evalingStream [...stream... ?funcBody {...} ?nextParam nextParam]) -> some (haltedStreamIfOneParamEvalsIfTwo [...stream...]) or evals to anything else.
..
Syntax for (haltedStreamIfOneParamEvalsIfTwo [...stream...]) is: [...stream...]_
???
....
...
Or...
What if theres no built in syntax for infcur, and instead theres a built in syntax for something similar to infcur but its like a stack, where a fn can be the last thing in it, but if its u (or some constant) then it just leaves whatevers there so far as it is, including itself (the u). ?x ?y ?varABC would still work on it. As an op, it always has either 0 or 1 more params. Example: (thisWhateverNewOp 11 2 3 +) -> (thisWhateverNewOp 11 5). Needs self reference / recursion ability. Needs ?varABC and opLambda ability. But as an opLambda, how can it be sure to take all possible params and give it to the thing just before that? Maybe second last thing is always the funcBody?
...
(thisWhateverNewOp (kv ?keyA valA) (kv ?keyB valB) oneOfAFewPossibleStates nextParam) -> (thisWhateverNewOp ...)
I'm not sure what I want on the right end of it but I want it to stream whatevers on the right end to choose what to append or eval to something very different etc. Must handle all possible nextParam, even if nextParam is a oneOfAFewPossibleStates etc.
What if it depends if theres an even vs odd num of params, which ?keyA valA ?keyB valB etc would fit well in???











/*






---------------------



TODO make some simple games and musical instruments with this asap...

Lambda form:
//(infcur (kvv keyDedupedFn valDedupedFn valDoublesRawCbt) (kvv keyDedupedFn valDedupedFn valDoublesRawCbt) (kvv keyDedupedFn valDedupedFn valDoublesRawCbt) ...) would be the lambda state.
Or maybe (infcur (keyval keyDedupedFn keyDedupedFn_or_valDoublesRawCbt) (keyval keyDedupedFn keyDedupedFn_or_valDoublesRawCbt) ...) would be the lambda state.

Opmut form:
vm.Mut = function(whichOpmutSpace,dedupedFn){
	this.whichOpmutSpace = whichOpmutSpace; //primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>
	this.dedupedFn = dedupedFn; //primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>
	//this.hashInt = ...
	//FIXME have 2 dedupedFns here, one you're allowed to see and one you're not, to allow for isolating musical instrument parts etc?
	this.valMut = todo same whichOpmutSpace as this, of u; //same as this.valFn implies, TODO merge this disorganized code.
	//this.valFn = u; //FIXME TODO. This merges Mut.j with Mut.m as in findOrCreateMut(this.whichOpmutSpace,anyDedupedFn).valFn or .valDoubles
	//this.valDouble = 0;
	this.valDoubles = emptyDoubleArray; //FIXME TODO
};

TODO write some example objects...

Write (infcur a b c) as [a b c].

["gameObject443"]#gob443
["gameObject200"]#gob200
["redBall300"]#redBall300
["blueBall250"]#blueBall250
["xp"]#xp
["yp"]#yp
["xv"]#xv
["yv"]#yv
(..definition of keyval..)#kv

And instead of kv/keyval just use another infcur???


[
	[gob443 x 42.3] //[gob443 x] is key. 42.3 is val.
	[gob443 y -500] //[gob443 y] is key. -500 is val.
	[gob443 "a" "longer" "than" "usual" "key" "has this value"] //[gob443 "a" "longer" "than" "usual" "key"] is key. "has this value" is val.
	[redBall300 "red" .7]
	[redBall300 "green" .1]
	[redBall300 "blue" .15]
	[redBall300 "argb" someInt32CbtMaybeStillAsADouble]
	[blueBall250 "argb" anotherInt32CbtMaybeStillAsADouble]
]#example324324OfLambdaFormOfAGameState

Ok, so game state as lambdas is basically a simple subset of sexpr defining a map,
and real lambdas are allowed in it, not just strings and infcurs and doubles and doublearrays etc.
For example, you could put an AI algorithm as a key or part of a key or value or part of a value.
Keys have to be perfectDeduped. Vals have to be perfectDeduped unless they are a rawCbt which is viewed as a double array.
Thats cuz vm.Mut.dedupedFn and vm.Mut.valMut must be perfectDeduped.
That doesnt mean you need an id256 for those perfectDeduped. Thats one way to do it,
but it can be just any fn that doesnt contain any blob is automatically perfect deduped already.

Syntax:
(x y z) is calling x on y, and what that returns calling that on z, aka ((x y) z).
{x y z} is {{x y} z} aka (s (s x y) z).
[x y z] is (infcur x y z).
,x is (t x)
<...> is a syntax of lambdas that eval during opmut, like abc.def<abc.hello.xyz>.mm is similar to abc.def[abc.hello.xyz].mm in js code, but theres details to work out. Use abc<<def>> vs abc<def> or some syntax inside <>, if need more kinds of syntax.
(...)#aName or {...}#aName or [...]#aName defines that aName refers to the same constant if aName is written anywhere else in that same local namespace, but it doesnt affect any kind of ids cuz ids only refer to forest shape and in some cases different duplicates of the same forest shape.
TODO syntax for small string literals with no whitespace, vs #names of constants, and is it utf8 or utf16. For example, maybe NamesThatStartWithCapitalLetter are #Constants and namesThatDont are literals, and if you want 'NamesThatStartWithCapitalLetter' as a literal, or 'NamesThatStartWithCapitalLetter with whitespace', then quote it. ?x would be a lambda param, as the lambda op will take up to around 250 params (or is it up to around 125?) that are named, or maybe in an infcur list of them, and maybe (lambda [?x ?y ?varABC] {funcBody that uses x? y? ?varABC} ...params...). Remember that calls (funcBody (lazyEval (lambda [?x ?y ?varABC] {funcBody that uses x? y? ?varABC} ...paramsExceptLast...) lastParam)) when it gets enuf params, and (x? (lazyEval (lambda [?x ?y ?varABC] {funcBody that uses x? y? ?varABC} ...paramsExceptLast...) lastParam)) returns whatever nth param the order of ?x is in that.











/*
(infcur "gameObject443")#gob443
(infcur "gameObject200")#gob200
(infcur "redBall300")#redBall300
(infcur "blueBall250")#blueBall250
(infcur "xp")#xp
(infcur "yp")#yp
(infcur "xv")#xv
(infcur "yv")#yv
(..definition of keyval..)#kv

(infcur (kv 
*/



/*
---------


vm.Mut is normally only used in a fraction of a second to transform a lambda to another lambda, as a mutable optimization.
As a lambda, it would maybe be 2 maps, of fn to fn, and of fn to cbtAsDoubleArray or as (typeval "double[]" bitstring) or (typeval "int[]" bitstring) etc.
The fns that are keys and vals in that map, other than the double[] int[] etc, would be deduped
(but doesnt necessarily require hashing them, since they could just be deduped by id64 if they dont wrap any blobs).
How would I use that to make a worldofgoo-like node (circle with poles between some of them sparsely), or musical instrument parts like in puredata?
I could use (infcur "x")#fieldX as "the x field", and (infcur "gameObject443")#gob443, and map (gob443 fieldX) to 29.3 [(typeval "double" cbtWithThoseBitsOf_29.3) maybe].
Or simpler, (gob443 fieldX 29.3) as a call of infcur (thats of course instantly halted). It could also have (gob443 fieldX 11) but it could be used like
only 1 of those should occur in any one "state" (in immutable/stateless lambdas) even though it could technically occur.
Maybe view it like a "file system" "/gob443/fieldX -> 29.3". but has to be lambdas somehow.
However its organized, it seems that translating between the 2 data formats, of lambda and mutspace, is going to be some kind of map of lambda to lambda.
Deduped lambda has 64 bit local id, and any nondeduped cbt thats at the top of its blob wrapper, can just imply its blobFrom is 0 and blobTo is that blob size,
so both of these together, mapping dedupedLambda to [dedupedLambda or topmostInItsBlobNondedupedCbt], fits in 128 bits,
and a double could also fit in 64 bits if we only use idA_concat_idB in the nonnormedNaNs (so around 2^52 of them) as id64s and those that are normed doubles are those doubles.
User level code (in opmut or interpreted lambdas) is not allowed to know which 64 bits (2*64=128) that is since it would make VM behaviors nonstandard (reference, not pointer),
but can check them for equality and call them as lambda (after dedup if not already deduped, which vals may not be).
So can put those in a hashtable (maybe just pairs of lambda and lambdaOrDouble) or simpler a list or tree sorted by such id64s.
User level code wouldnt get to know the order of them in that datastruct, so I'm not sure how to make that a lambda.
User level code can sort lambdas by any chosen comparator, as long as the last comparator guarantees to give an order to everything that doesnt equal,
such as the comparator of first sort by height then to break ties sort recursively by left child then to break ties sort recursively by right child.
I might be making this harder than it is. Basically its just a bunch of pairs of lambda as key and lambda as value, in lambda form, and Mut objects during opmut,
and a pair of lambda as key and lambda as value is a simple well defined lambda, but "a bunch of" is the hard part. It has to be 1 lambda.
I could use an infcur alternating key val key val, and if I wanted to translate it to a more efficient datastruct (such as a treemap) just loop over it doing that,
or infcur of (pair key val) or something like that. Maybe have an op just for this semantic: (keyval key val)
as in (infcur (keyval key val) (keyval key val) (keyval key val) (keyval key val) (keyval key val) ...) would be the lambda state,
and a bunch of Muts, whose .dedupedFn is key, and whose valMut, valDouble, andOr valDoubles are the val (might need 2 or 3 vals like a keyValfnValdoubleValdoublesValints op or something?).

//primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>. primaryKey of a dedupedFn is 64 bits. primaryKey of a non-deduped-fn is 128 bits.
vm.Mut = function(whichOpmutSpace,dedupedFn){
	this.whichOpmutSpace = whichOpmutSpace; //primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>
	this.dedupedFn = dedupedFn; //primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>
	//this.hashInt = ...
	//FIXME have 2 dedupedFns here, one you're allowed to see and one you're not, to allow for isolating musical instrument parts etc?
	this.valMut = todo same whichOpmutSpace as this, of u; //same as this.valFn implies, TODO merge this disorganized code.
	//this.valFn = u; //FIXME TODO. This merges Mut.j with Mut.m as in findOrCreateMut(this.whichOpmutSpace,anyDedupedFn).valFn or .valDoubles
	this.valDouble = 0;
	this.valDoubles = emptyDoubleArray; //FIXME TODO
};
//vm.stack_whichOpmutSpace;
//as in "primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>". Up to a few thousand of these might exist at once
//in one computer, but normally 1 or just a few at a time. Multiple exist when opmut calls opmut. After all that returns, all of them become garbcolable.



see "TODO merge the opmut state space with the lambda state(less) space, maybe by adding a fifth int to the 4 ints of key of (localname of) lambdas (whichOpmutSpace idA id" in mm, todo copy relevant parts from there, about...
...
...
...
TODO merge the opmut state space with the lambda state(less) space, maybe by adding a fifth int to the 4 ints of key of (localname of) lambdas (whichOpmutSpace idA idB blobFrom blobTo). In a deduped lambda, blobFrom and blobTo are both 0. Or maybe that fifth/whichOpmutSpace int is 1 of the 4 salt ints (salt128 in StackStuff)?
,,
Instead of merging with FuncallCache, make FuncState parallel to FuncallCache, and key is FuncState<int,fn> which is a js object that has 1 mutable ptr to fn and 1 mutable ptr to Float64Array and maybe 1 mutable double. The int in <int,fn> is whichOpmutSpace.
..
FuncState<int,fn> will mostly be for fns that are made only of combos of infcur but can in general be any fn as long as its perfectDeduped (which can be done by int for short times).









/*
Consider cp(Mut,Mut)->Mut (and maybe with a whichOpmutSpace) as a third part of cp, just a number so they dont overlap mutable values,
and the ints are used the same way for hashing to dedup Muts. Or could use fns as muts but only the subset of fns that are made completely of infcurs,
and key of a Mut would be that fn, but that would be expensive cuz of the other fields fns have, so just do ints Muts.
vm.Mut = function(whichOpmutSpace,leftMut,rightMut){
	this.whichOpmutSpace = whichOpmutSpace;
	this.id; //int id/bucket, without deletions, so once its created it stays there until the whole hashtable is garbcoled.
	this.valMut; //mutable pointer at a Mut. unlike the 2 immutable perfect deduped pointers at its left and right childs (not stored, since you only look up by those).
	this.valFn = u;
	this.valNum = 0;
	this.valNums = emptyDoubleArray;
};
vm.Mut.prototype.p(mut){ return mutCp(whichOpmutSpace,this,mut); } //cp(Mut,Mut)
This would be slower for some things than just using OpmutState.ints[ptr to ptr+7] and having separate fn and optional Float64Array for each,
but its easier to use.
TODO stack of pairs of Mut, one being like a ptr and one representing a var name (utf8 bits in its forest shape)?


/*TODO use this to do the 32 bit voxels and some music tools asap...
Dont worry about the abc.def.xyz, just do (mput ob key val) etc, at least for now, since that will avoid needing to recompute the hash every time,
but get it more optimized to figure out abc.def.xyz etc later.
..
TODO use binforest shape (without heap) as keys, and heap for Float64Array and fn vals, but in the no-garbcol-cuz-justduringfractionofasecondmutcallsonoremovingfromhashtableetc blocks of 4 doubles or 3 ints and a float or 4 ints etc. More generally, of 4 doubles and a fn[] and a Float64Array[] aligned to it, as (int,int)->int hashtable. see "DO THIS: Could have blocks of double_double_double_double, aligned to Float64Array[] and fn[], and the 4 doubles ar" in mm (not to self, TODO copy relevant parts). Remember, can overlap the buffer object between Float32Array Float64Array Int32Array etc.
..
vm.mutHashtable = new Float64Array(TODOWhatSize); //1d array of doubles, used in blocks of 4 doubles. Each block is: ptr at left child, ptr at right child, mutable ptr, mutable double.q 
vm.mutFn = new Array(same size as mutHashtable.length>>2); //lambda[] aka array of lambdas
vm.mutDoubles = new Array(same size as mutHashtable.length>>2); //Float64Array[] aka array of Float64Arrays.
//returns int 0 or int 1, for if that binforest shape has been allocated in hashtable or not.
vm.mutCpExists = function(intA, intB){
	throw 'TODO';
};
//returns an int, index into vm.mutHashtable.
vm.mutCp = function(intA, intB){
	throw 'TODO hash 2 ints in a loop, looking into buckets in mutHashtable (each bucket is 4 doubles (or int view of them), and find some index in that which has the given 2 ints at offsets 0 and 1 from it (offset 2 is ptr, offset 3 is double val)';
};
//the ptr (at a mut, aka an int into mutHashtable) val of that binforest node. the other kind of val is a double. and in a separate 2 arrays are fn or Float64Array.
vm.mutCpPtr = function(intA, intB){
	return vm.mutHashtable[vm.mutCp(intA,intB)+2];
};
//the double val part of "//the ptr (at a mut, aka an int into mutHashtable) val of that binforest node. the other kind of val is a double. and in a separate 2 arrays are fn or Float64Array.".
vm.mutCpNum = function(intA, intB){
	return vm.mutHashtable[vm.mutCp(intA,intB)+3];
};
vm.mutCpFn = function(intA, intB){
	return vm.mutFn[vm.mutCp(intA,intB)>>2];
};
vm.mutCpFloat64Array = function(intA, intB){
	return vm.mutDoubles[vm.mutCp(intA,intB)>>2];
};
This removes the need for Mut.m (js map of string to MutOrDouble) and for strings. Consider that binforest shape is superexponential.



















Consider making a variant of opmut, to be used with the existing kind of opmut, thats specialized in lower level primitive ops, especially ints (and maybe doubles etc), and is more like acyclicFlow and especially the form of it that reads from 2 indexs and writes to 1, all 3 being chosen by the 32 bit opcode, instead of the write to address being derived from it being the nth opcode in the sequence. If could call that, in a flexible way, from opmut, then it would be like 3 levels of slow/flexible .. midSpeed/midFlexible/opmut .. fast/inflexible/lowLevel/<this new op>.
DO IT.
And "eat my own dogfood", use it to derive the 32 bit voxel graphics, and generate int[1024x1024] from it 60 times per second.
Optimize as far as it takes. Put it on screen and play with it.




?????
Consider putting .i field (for Int32Array) instead of just .d (Float64Array), in Mut, so can do graphics ints faster, considering CPU cache of few levels. Size matters.


??? use the following in opmut, and store graphics in Float64Array(512*512).buffer which is just 2mB for 1 megapixel. This can be translated to/from the "32 bit voxels" mentioned below, which could be a detail of one of many possible ways to generate the double[1<<18] graphics.
...
"eat your own dogfood". use opmut, and not extra code in VM, to do whatever voxel system want to implement. take just a cbt for pixels 60+ times per second (and similar but utc time needed for sound)...
Since opmut normally uses Float64Array and {}jsmaps (in compiled form), consider a double/float64 being a 2x2x3x4 grid of bits aka a 2x2 grid of 12bitcolor pixels. double has 53 bits of integer precision. thats only 48. and it can do 1024x1024x12bitcolor in a double[512*512], which can be copied 4 times faster if its aligned on 512x512.


















If using opmut to derive graphics lambdas that return whole Byterect blob all at once, requires using lower resolution such as 512x512 or 256x256 etc (no lower than old game consoles graphics), then maybe thats an ok way to start, considering that so far it doesnt do any graphics at all, and that would at least be a way to build fun things quickly. Or maybe the opmut optimizations will be (using cpu) fast enough that it can do higher resolution. (not to mention GPU, which I'll do later, but it has sequential limits such as .001 to .01 seconds per GPU call (and sometimes 20 gpu calls in 1 in opencl, can be nearly as fast, but gpujs I'm not sure if their combineKernels works as well).... get cpu doing fun things first.


If it doesnt slow down too much to generate a whole other megapixel blob each video frame, then maybe should just do graphics as generate such a 4mB blob (ARGB 32 bit pixels),
and whatever way of doing that in middle steps, is ok, such as y10x10rgb12 voxels. also consider that Float64Array would be used in opmut (so 8mB) to make the 4mB blob.
make drag and droppable sound/graphics/game/gamepad/quickload/quicksave/etc windows, and make simple games in them. todo.















More generally (than next "xel32 graphics of 512x1024 resolution" paragraph below),
use infcur (or some op) as streaming sequence of graphicsOp, where a graphicsOp is (maybe a mutop or maybe something lambda/immutable)
... is a transform of int[1<<20] to int[1<<20] (as in a ByteRect of 1024x1024 pixels), but 12 bit color optimization in some parts at least.
A kind of graphicsOp is to offset x and y by such a 32 bit voxel (using just 10 bits of y and 10 bits of x for example, but faster just add it as int),
so offset in x and y.
A kind of graphicsOp is a list of 32 bit voxels to paint y10 x10 rgb10.
A kind of graphicsOp is 2 graphicsOps, one to do first, one to do after that (in case of overlap order matters).
There could be other graphicsOps, but consider the benefits of doing as lambdas so those who havent opted in to organizing things that way
will still understand it through the common math of "what does a lambda call return".
If it doesnt slow down too much to generate a whole other megapixel blob each video frame, then maybe should just do graphics as generate such a 4mB blob (ARGB 32 bit pixels),
and whatever way of doing that in middle steps, is ok, such as y10x10rgb12 voxels. also consider that Float64Array would be used in opmut (so 8mB) to make the 4mB blob.












Do this for voxel32 graphics of 512x1024 resolution 12 bit color, infcur-like int[] streaming ignoring internal tree structure...
int[] as infcurAt6Params, only the order of ints matters, for y512_x1024_rgb12Bits voxels, where first bit chooses between add to current 19 bit xy offset vs be a leaf 31 bit voxel. So make an int[] (such as 5 or 2054634 ints) and prefix it with +offset and suffix it with -offset, and use infcur to define such a streaming int[] regardless of internal tree structure of infcurs.
???
TODO make new op, similar to infcurAt6Params, thats ONLY for stream appending int[], and infloops if anything else is put in it. and use 1 of the mask bits (have 2 reserved for future expansion, so 1 left) for that??? no dont need a mask bit, cuz by inflooping if its NOT that recursively, just its existence implies that.
...
make simple graphics with it asap.


/*TODO make infcur be known at param 6 so theres 2 ops for it, so theres an o8 that can detect if its at the end of an infcur efficiently.
	and use it for 32 bit y10x10rgb12 voxels with 32 bit offset (anded into 1<<20 array of ints 4 times more bytes in ByteRect) used in canvas.
	Use it in general as a way to stream int32[] by just calling them on eachother as lazyconcat.
	but where to put the plusoffset32 vs literalvoxel32 if its all just viewed as a big tree of concatted int32s?
	no, dont parse it that way. instead do...
instead do...
infcur (known at 6 params, and next param may be int offset)....
(infcurAt6Params intOffsetA (infcurAt6Params intOffsetB ints ints ints (infcurAt6Params intOffsetC ints) ... ...
but i'd prefer intOffset be parsable in the order it occurs from the top of a fn (binary forest node aka lambda) down, instead of so deep you have to find the infcur first.
(someDerivedSymbolMeaningOffset intOffset thing)
(someDerivedSymbolMeaningPairOfVoxel32GraphicsNodes graphicsNodeA graphicsNodeB) //similar to pair
where graphicsNode* may be either of those 2 kind of things OR an int[] (as cbt).
..
If it was an append-only-intarray, maybe this datastruct, starting at a given int ptr: *ptr is local size of this node in units of ints. Downward, it has these: addToValuesOfChildA ptrToChildA addToValuesOfChildB ptrToChildB <*ptr-5 (or is it -4?) number of literal voxel32s>. At ptr==4 (+1 -1 etc? is that right number?) is an "empty node" of no childs and no voxels. The first 4 ints in the "append-only-intarray: are: 0 4 0 4 5, aka offset childPtr offset childPtr sizeOfThisNode, and childPtr is pointing at itself, as the basecase. Its basically the NullObject.
That defines a stream-appendable image format, but I'll probably use lambdas/fns forest with int[]s in it, instead of purely appendable blob.
The main advantage of this image format is it can share branches, reuse multiple existing sets of voxels at x y offsets (but not scaling or rotating) to define another such set, without storing the duplicates that are just recursive offsets. For example, to have a 12x12 pixel set of 144 int voxels for a certain char of a certain font and for many of them to occur various places. the ints could be derived at runtime for advanced graphics, but the ability to make a literal copy at a 2d offset would save alot of compute power.
..
as lambda....
(someSymbol int[]LiteralVoxels childAOffsetInt childAOrU childBOffsetInt childBOrU), where childA and childB are similar someSymbol calls, and "orU" means u is viewed like null.
...
consider stream appendable int[] as infcurAt6Params, only the order of ints matters, for y512_x1024_rgb12Bits voxels, where first bit chooses between add to current 19 bit xy offset vs be a leaf 31 bit voxel. So make an int[] (such as 5 or 2054634 ints) and prefix it with +offset and suffix it with -offset, and use infcur to define such a streaming int[] regardless of internal tree structure of infcurs.
???
TODO make new op, similar to infcurAt6Params, thats ONLY for stream appending int[], and infloops if anything else is put in it. and use 1 of the mask bits (have 2 reserved for future expansion, so 1 left) for that??? no dont need a mask bit, cuz by inflooping if its NOT that recursively, just its existence implies that.

/*TODO asap make the lambdas of variable number of (lambda funcBody ?varA ?varb ?varc u ...paramsOfThatManyParamsUpTo240Something), AND make the Mut as described below, and do some basics graphics, sound, or something just start playing with it.



FIXED design keeps Mut mostly as it is, adds .j->fn and .g->string and has weaker merged gasTime/gasMem and only runs for a tiny fraction of a second so it wont run out of mem.
"Mut.m -> {} where key is string and val is [Mut or double or undefined], with null prototype?." prevents accidentally getting string when you expected double.
..
TODO asap, but confirm this solves the problem...
Have ops for string length, concat, substring, etc.
Have try/catch op for undefined[anything] where some things may return undefined.
Have just 1 var in opmut that counts down with each thing done next, sometimes counts by variable amount like when string concat it will check their lengths.
I'm guessing (TODO verify) that putting a big string as a map key doesnt cost the size of that string as its deduped or hashed or something... but im not sure.
Opmut only happens, normally, for a small fraction of a second. Its unlikely to run out of memory at all.
So if just use 1 gas* var, gasTimeAndOrMem, and subtract from it for heap allocation and for every write in a {}, then it cant infinite loop and must halt within some approximatable (though might vary by 10 times faster or slower) limit.
..
Mut.n size of Float64Array if need to have null prototype.
Mut.m -> {} where key is string (may be made from double or undefined or concat of mutA.g with mutB.g etc) and val is [Mut or double or undefined], with null prototype?.
Mut.d -> Float64Array, with null prototype. can use this for canvas pixel graphics (copy between them, but lambdas are still immutable, etc).
Mut.g -> string
Mut.j -> fn (u by default).
...
{hi:'hello'}+2
2
{hi:'hello'}+33
33
{hi:'hello'}*5
VM176:1 Uncaught SyntaxError: Unexpected token '*'
({hi:'hello'})*5
NaN
OK.
..
Can aMut.m.someStringABC cuz know 'someStringABC' is a string (dont need to wrap in a Mut in Mut.g),
but otherwise the only keys accepted in it are from Mut.g.


/*
----------



OLD, cuz DO ALLOW CONCAT ETC DYNAMIC STUFF...
Optimize Mut by not (UPDATE yes) allowing direct access to strings, except as symbols, keys in Mut.m. No concat. No length. No listing them.
If you ask for one that doesnt exist, it gives undefined.
so its like the structs mentioned below except theres only 1 type and it has int keys of doubles and string keys of double_or_mut_or_undefined. mut also has 1 lambda/fn field thats often not deduped.
but how to limit mem use in {}?
????
+ of string vs double, and in {} keys, seems hard to limit the memory of, since + can cause string concat or expand mem of {}.
but without strings as {} keys (or maybe some kind of number), browser js wont optimize it well.
If could just limit memory recursively on stack, of strings, then Mut as usual would work.
???
What if Mut.m[anyKey] -> always a mut OR double, but never a string or fn cuz if so those would go in field of Mut?
Mut.n size of Float64Array if need to have null prototype.
Mut.m -> {} where key is string and val is [Mut or double or undefined]. (with null prototype?).
Mut.d -> Float64Array (with null prototype)?.
Mut.g -> string
Mut.j -> fn (u by default).
..
Can aMut.m.someStringABC cuz know 'someStringABC' is a string (dont need to wrap in a Mut in Mut.g),
but otherwise the only keys accepted in it are from Mut.g.
..
I think I fixed it, TODO verify.
Still need to track memory in Mut.m since dont know if it has a key or not, but if check if it has such a key that might make it too slow??? Basically just need to know the {} size of Mut.m. Its too slow to make Mut.prototype.putM(key,val) func, that would count it, since it needs to use loop optimizations that already exist in browser js VMs.
Mostly this 1 thing left... Count the number of key/val pairs in Mut.m... But how???
How??
..
Opmut only happens, normally, for a small fraction of a second. Its unlikely to run out of memory at all.
So if just use 1 gas* var, gasTimeAndOrMem, and subtract from it for heap allocation and for every write in a {}, then it cant infinite loop and must halt within some approximatable (though might vary by 10 times faster or slower) limit.







------old comments...


opmut struct optimization...
Root types: emptyType, lambdaWrapperType, doubleType (and maybe other primitive types).
There are 4 kinds of derived types:
-- placeholder for the type the placeholder is a direct child of, which is replaced by hashname of its parent after hashing,
	and if hashing again, is replaced by the one "placeholder constant" then hash again which generates the same hash,
	so it can do trees where parent is same type as any constant n of its childs (FIXME what if (int,thatPlaceholder)?).
-- (int,type)->that many of type, basically an array of ptrs, though i'm unsure if some things will be inlined (especially doubleType will be inlined in Float64Array).
-- (nameA,typeA,nameB,typeB,nameC,typeC... for any number of name/type pairs.
..
TODO build this asap in opmut wikibinator203 opcode.
(((TODO after that build a different opcode for GPUjs-like/lazycl-like calculations since they cant handle dynamic memory efficiently, though gpujs does it more than opencl (which lazy uses) cuz gpujs is built on webgl which has pointers into "opengl textures" etc. They're both similar enough that they would be optimizations of the same wikibinator203 opcode.
)))
For example, if you want a loop for(let j=0; j<... then j would be the name of a double or int in a struct and is a mutable double or int etc.
Maybe similar for "a line of code" that does a few * + - Math.sin, pointer jumping of specific type.fieldname etc.
..
FIXME want ability to copy between var size double[] and fn/cbt, without having to use a different type per size.
What if a "(int,type)->that many of type" defines a minimum number of those instead of a specific number? But how does that help in copying the whole thing? It would be better to just be variable size of it, but once an instance is created its that constant size, which can differ from other instances of same type*nNumberOfThem.
..
Throwing together various puredatalike musical instrument parts, those parts could have a certain type in common that has n input doubles m output doubles etc... BUT how could the parent opmut call (which has a struct type) get a ptr to those if they're INSIDE different types than that? it seems to need inheritance, but that could slow things. Find an efficient solution...





for optimized cpu evalers in opmut (lambdas other than opmut can still do what they normally do)...
Consider using struct-like inheritance-like stuff, where every fieldName has a class so classABC.fieldXYZ is a different int than classDEF.fieldXYZ int. To read the field at a class* just add the int to it. can be ptr or double. not sure where the doubles go.
a class is a merkle-like linkedlist of triples of class, name, and val. if classABC has 20 fields, then there are 21 classes in its inheritance chain. its superclass has 19 fields, and so on to the root class which has 0 fields. a subclass instance of a field type can be pointed at by that field. but where do the doubles go? but wouldnt this slow things down by instanceof in deep inheritance andOr casting?
What if theres no inheritance and theres just final structs as classlike things, where each of n fields in a struct type is a struct which may be a different struct or its own type. and put the doubles in there.
Could name struct types by hash of their definition, and after hashing, any part of their definition that means "self type" is replaced by that hash.
double could be such a type. (and Float64Array (size(s)?) somehow typelike or related how????)???.
Wrapper of fn is also such a type.
i dont want to limit it to such simple datastructs, with no dynamic lookup of string keys, no inheritance, etc, but its hard to optimize things in opmut.
This seems very optimizable in (opmut [...tree of code...] mut),
BUT is it flexible enough?


Try to do the whole cpu optimized opmut (not the gpu optimized kind) in 1 big Float64Array of powOf2 size where doubles are used as both pointers (mask them) so can use them both as doubles and as objects. Use doubles in some cases as [viewed as up to 11 base26 chars such as 'helloworldx' or 'i'] and use a simple linkedlist (may be bringToFrontList?) for key/value maps of SMALL NUMBERS OF KEY/VALS PER OBJECT. It will implement map of map to map where each map is a double value, including that each double maps to a fn |} u.

Consider using datastruct of [leftPtr rightPtr Float64Array], and the 2 ptrs and contents of the array are mutable, and to implement abc.def.ghi = abc.xyz+2 etc, could make small such maps in the left/right cons-like shape. each such node would have a toString that returns a certain double, and double could be viewed as up to 11 base26 chars such as 'helloworldx' or 'i'. Basically you use it as a list of key/val pairs that are each doubles. and could use bringtofrontlist in some cases.
???
could it be fast enough?



TODO replace Mut with prototypeless Float64Array and prototypeless {},
with instance var of toString, and only use keys of double or undefined,
and toString returns a double.
put fns in an Array() used as a map of double to fn, allowing duplicate fns so lazyDedup doesnt cause nondeterminism.
Check vm.gas* during this.
Use doubles as base26 number of at most 11 digits, for human readable names, at least in some range of doubles.
so basically its a map of map to map where each map appears as a double and can have a pointer to a fn, and some such maps only allow a subset of doubles, while others are slower and allow all possible doubles.
..
FIXME count memory of string keys in {}?
..
[[[
let start = Date.now(); x = {}; x.d = new Float64Array(555); x.i = 1; for(x.j=0; x.j<10000000; x.j=x.j+1){ x.i = x.i+x.j*x.j; x.d[x.j%555] = x.i; } let end = Date.now(); let duration = (end-start)*.001; console.log('i='+x.i+' duration='+duration);
VM43:1 i=333333283333717100000 duration=0.027
undefined
let start = Date.now(); x = {}; x.d = new Float64Array(555); x.i = 1; for(x.j=0; x.j<100000000; x.j=x.j+1){ x.i = x.i+x.j*x.j; x.d[x.j%555] = x.i; } let end = Date.now(); let duration = (end-start)*.001; console.log('i='+x.i+' duration='+duration);
VM51:1 i=3.333333283334632e+23 duration=0.246
undefined
x.toString = function(){ return 234; }
ƒ (){ return 234; }
x+1
235
x.d.toString = function(){ return 500; }
ƒ (){ return 500; }
x+x.d
734
x[x]
undefined
let start = Date.now(); x = {}; x.d = new Float64Array(555); x.i = 1; for(x[100]=0; x[100]<100000000; x[100]=x[100]+1){ x.i = x.i+x[100]*x[100]; x.d[x[100]%555] = x.i; } let end = Date.now(); let duration = (end-start)*.001; console.log('i='+x.i+' duration='+duration);
VM422:1 i=3.333333283334632e+23 duration=0.264
undefined
]]]




--




Syntax change: [a b c] means (infcur a b c). Replace a[b] with a<<b>> aka mutA.m[b]. a<b> still means mutA.d[b].
() still means currylist. {} still means sCurryList.
opmut mutable (temporarily during an immutable call as optimization) vars start with . like .abc.def means rootMut.m.abc.m.def .
opmut only uses [], such as (opmut [while [lt .i .j] [...loopBody...]] someParam). while and lt would be 2 #names of lambdas. while is opcode. lt doesnt have to be, but could be any lambda that takes 2 doubles and returns a double, or something like that. or maybe has to be opcode at least in early versions its easier to optimize.
It can call opmut recursively, with (opmut [...]) having a cached mutEvaler and taking a param of Mut, string, double, fn, or undefined.
Careful to verify something is a string vs double, such as by multiplying by 1 before doing double ops, so vm.stackMem counts the allocation of strings such as by + concat. '55'*1+1 is 56 in js, so thats a problem. might have to use .length to check the difference, or typeof would probably be slower. Or wrap in Number(55)+1. This could be a problem for optimizing?
..
Or maybe just write it like rootMut.m.abc.m.def and allow rootMut.m<'abc'>.m.def.d<42> etc.
..
It seems to make it a few times slower (100 megaflops vs 300 megaflops) to use Number(j) like this...
let i = 1; for(let j=Number(0); j<Number(100000000); j=Number(j)+1) i = Number(i)+Number(j)*Number(j); console.log('i='+Number(i));
VM606:1 i=3.333333283334632e+23
undefined
let i = 1; for(let j=0; j<100000000; j=j+1) i = i+j*j; console.log('i='+Number(i));
VM766:1 i=3.333333283334632e+23
..
I was planning to just use js + and not worry about if its string vs number, just let it do the same thing it does in js,
but the problem is need to count the memory if it creates a string.
..
SOLUTION: for numbers use -0 since a string minus 0 is NaN and doesnt create a new string. In js code generated from the [...].
Its the same speed as you see here:
..
let start = Date.now(); let i = 1; for(let j=0; j<100000000; j=j+1) i = i+j*j; let end = Date.now(); let duration = (end-start)*.001; console.log('i='+i+' duration='+duration);
VM759:1 i=3.333333283334632e+23 duration=0.639
undefined
let start = Date.now(); let i = 1; for(let j=0; j<100000000; j=(j-0)+1) i = (i-0)+(j-0)*(j-0); let end = Date.now(); let duration = (end-start)*.001; console.log('i='+(i-0)+' duration='+duration);
VM767:1 i=3.333333283334632e+23 duration=0.64
..
Surprisingly its even faster in a Mut-like map...
let start = Date.now(); let i = 1; for(let j=0; j<100000000; j=(j-0)+1) i = (i-0)+(j-0)*(j-0); let end = Date.now(); let duration = (end-start)*.001; console.log('i='+(i-0)+' duration='+duration);
VM9111:1 i=3.333333283334632e+23 duration=0.621
undefined
let start = Date.now(); let x={}; x.i = 1; for(x.j=0; x.j<100000000; x.j=(x.j-0)+1) x.i = (x.i-0)+(x.j-0)*(x.j-0); let end = Date.now(); let duration = (end-start)*.001; console.log('i='+(x.i-0)+' duration='+duration);
VM12025:1 i=3.333333283334632e+23 duration=0.196
undefined
let start = Date.now(); let x={}; x.m={}; x.m.i = 1; for(x.m.j=0; x.m.j<100000000; x.m.j=(x.m.j-0)+1) x.m.i = (x.m.i-0)+(x.m.j-0)*(x.m.j-0); let end = Date.now(); let duration = (end-start)*.001; console.log('i='+(x.m.i-0)+' duration='+duration);
VM15809:1 i=3.333333283334632e+23 duration=0.197



TODO I might want more than 4 kinds of paired chars () {} [] <>, but thats all there is on common keyboards.
Consider using just () and prefixing it with a letter so theres 26 kinds: a(...) to z(...).
Problem is, in things like rootMut.m<'abc'>.m.def.d<42> or abc[def].ghi<abc<44>>, the syntax doesnt have a plce to put a char before the (...) without it appearing strange, like instead of abc[def], abcm(def) which is 2 things: abc and m(...). maybe abc.m(def) ?
Or, keep 2 of those char pairs, such as [] and <>, for that syntax, and keep {} for sCurryList, and have up to 26 (or 23? so alloc a letter for those other kinds too?) kinds of a(...) to z(...).
...
{...}
[...]
a(...) to z(...)
<...>
abc.m(...).d(...)
s(...)
t(...) is like s except its what st does in earlier versions, its s with t of the first thing in the (...). ??? or use t(...) for something else?
.abc the . prefix means rootMut.abc. Like in i(< .a .b).
Maybe should use a[...] to z[...] so you dont have to push shift to get to ( ) so often.
,x means c(t x), and by c(...) i mean normal currylist but might change the letter to something other than c.
...
can .abc.def[abc.ghi]<(+ 2 3)> be written a simpler way?
...
Should every char define a syntax of what follows, like n5.3 is the number 5.3 cuz it starts with n, and ghello is the string 'hello' cuz it starts with g?
Maybe, but how would the end be detected? Theres only 4 char pairs  (){}[]<> that auto end eachother, and only (){}[] 3 pairs of them are recognized in common texteditors.
..
Let use p[a b c] to mean curryList(infcur a b c), since p[] are 3 adjacent chars on keyboard so is fast to type.
..
..
In forest, abc.def means p[...something involving gabc and gdef except it calls to get rootMut.m.def...]
..
Could I get rid of Mut and just use Float64Array, {}, string, double, fn, and undefined directly? In Float64Array and {} can set prototype to null. but in string, double, and fn, need to know the type, or do something to make sure to generate code that returns the expected type...
..
(anything-0) is always a number.
String(anything) is always a string, or throws.
Whether something is a Float64Array or {}, with null prototype, those are both kinds of mutable map. How to check if it is? typeof, etc... are probably too slow.
I could put fn in some kind of wrapper with no prototype.
Some stuff to figure out still...
...
Consider adding a fn/lambda field to Mut, in j (field name for example), and only have lambda inside Mut when in opmut.
vm.Mut = function(n,optionalLambda){
	this.n = n&0x7fffffff;
	this.d = new Float64Array(this.n);
	this.m = {};
	this.j = optionalLambda || u;
	Object.setPrototypeOf(this.d,null);
	Object.setPrototypeOf(this.m,null);
};
That way, everything in opmut is 1 of: mut, string, number, undefined.
Could webasm optimize this better? Its got strongly typed stuff.
Theres a WebAssembly var in some browsers.



In Mut I dont need map of string to thing. I just need at most pow(2,30) symbols, and can load them from strings such as "varXYZ" might become symbol 600111234. As long as the doubles in Float64Array have index less than the other symbols its ok. I dont need string concat string. i dont need strings at all. can just put stringlike data in the Float64Array if i want to do that kind of thing.
Mut = function(sym, n, optionalLambda){
	this.sym = sym; //int
	this.n = n;
	this.d = new Float64Array(n);
	this.j = optionalLambda || u;
	this.m = {}; //map of sym to thing. thing is any of Mut, double, undefined.
	//Maybe... this.e is 1 double, like this.d[0] except in a var by itself???
	remove prototypes of this.d and this.m;
	could make Mut.prototype.toString return sym which is a double/int, so when used in {} it acts as sym.
	could have an array somewhere of [sym]->Mut.
	This seems it would fix the + optimization problem, since there are no strings.
};
Think of it like nodes that each have 2 outgoing edges, and each chooses which such edge based on a shared boolean var that if/else while for etc changes. those 2 edges often go the same place if it doesnt branch, is just the next thing to do. Each next "thing to do" is to read 3 things, and write, like []= or <>=, in recursive namespace of syms. a sym is an int (with mappings to human readable names, but the mut vm doesnt use those names often). you could have i=0; i.hello=j[abc.def[ghi<i>]] or soemthing like that.
..
getting rid of strings is the right thing to do, replace with sym int that maps 1 to 1 with a string outside the Mut system but some opcodes in mut can create more or access it etc.
..
If all doubles are at known places in mut (in .d[index] or maybe .e) then the types are known, so i dont have to deal with js problems of does + mean concat string to double or add 2 doubles or convert '45'+1 to 46, etc.
I'd still need a 2-way forest (in some branches 1-way like negate is unary or a constant is 0-way) of basically get 3 things using 3 exprs, then do a[b]=c, and each of those 3 things may be mut or double.
also what about undefined? like if you try to GET a symbol from a mut.m but its not there? or if you GET from outside the range of .d?
Since fns wont always be deduped (its lazyEval of dedup), they cant have a sym but can be a fn value inside a mut as aMut.j. Deduped fns could have a sym, but its too slow to dedup everything instantly.
..
consider this as implementation of opmut (not the fastest, but its a start)...
..
aMutFn(a_mut_or_double_or_undefined)->another_mut_or_double_or_undefined.
Example: x=>(x.d[600111234]*x.m[243435456].d[3334]), is a js lambda. 600111234 and 243435456 are the sym ints for some human readable name such as 'varXYZ' or 'i', or some may just be numbers.
Example: x=>x.d[600111234].
..
Example: x=>x.d[x.m[243435456]].
..
Can strings be used directly as syms for possibly more efficient code x.m.varXYZ ? Without concat or + on them etc, could avoid overlapping the fields of Mut like Mut.d Mut.m etc???
Problem is {} will convert int to base ten string??? Unless its an Array() which may be optimized for sparse int keys?
..
what if  Mut.toString gives a sym as string that was put in during Mut constructor?
No, toString needs to return a double if the js + optimization is to avoid unexpectedly creating strings.
So aMut.m[anotherMut] would use anotherMut.toString which would give a number.
..
Instead of allocating syms for varnames, maybe just sha256 (or faster hash) the varname to get an int in some high range 2pow30 to 2pow31minus1, and there can be collisions and thats viewed as the same var. its more of a comment on the int. if it will have a collision or not could be scanned for before running things, where it matters. or, could just view 30 bits as up to 6 chars of var name a..z0..5 such as hello or myxyk or i or j. but longer strings are probably needed for ppl to understand it. could have up to 53 bits if its a double, and in that could have up to 11 chars that are made of a-z. such as 'tostring' or 'helloworldx' or 'i' or 'j'. just viewing it as a base26 number. no collisions.
Example: x=>(x.helloworldx*x.jjii[3334]);
toString always returns a double, unless its tostring of undefined.
..
but if muts are {} and Float64Arrays (no prototype, set to null) directly, then how to protect its tostring function?
























(opmut
	(for
		(.i 0)
		(``lt .i 10)
		(`` ...i++ something write it...)
		(...body todo loop in loop, if/else in loop, a.b=c [] <> call fn on fn (at 2 .a.b varnames) and write it at another opmut varname ...)
	)
)
.a.b [] <> etc are opmut syntax, but are fns. opmut syntax is still fn forest.
?x or maybe _x is var name syntax. can use the same syntax in opLambda defining params and in funcBody to read it,
and somehow in opmut.
I dont plan to optimize opLambda, and instead will just optimize combos of opmut and the call pair forest and some of the {...}/sCurryList.


TODO (opLambda {...funcBody that uses x? z? z? x? y? ...} ?x ?y ?z u valOfX valOfY valOfZ), and start using it asap.
Get rid of vararg opLambda and opOneMoreParam, but keep varargAx and infcur.[[[
The following big quote from other file led to this one line conclusion:
	TODO Something like (opLambda (x z y) (* 2 (+ x y z))) but thats lisp syntax of a similar thing.
	... maybe (opLambda anInfcurOfVarNames) has as many more params (curriesLeft), up to 240something, as params in anInfcurOfVarNames after the infcur???
	... maybe (opLambda {...funcBody that uses x? z? z? x? y? ...} ?x ?y ?z u valOfX valOfY valOfZ). the u (or choose some other constant) marks the end of the params list. it still can only have at most 240something params. ?x is a replacement of opOneMoreParam and is instead something like (opDefineLambdaParamName 'x'), and x? is something like (opGetValueOfLambdaParamName 'x'). In {...} syntax, since theres no strange flipping of left/right order, should work as usual.
	Put a bit in headerInt mask, that tells if it has reached the u param yet, marking that it has as many params as its going to, so even if a further param is ?varNameMNOP, that will be just another param and not defining to look for varNameMNOP?.
	...and TODO make the {...} syntax and opmut etc work with that. Start using it in interpreted mode.
	Only optimize combos of opmut and s/{...}, dont need to optimize opLambda.
..
TODO verify this is done by writing a lambda that does the same as s, but using opLambda of 3 params, and make sure its readable in {...} syntax.
..	
QUOTE:
	maybe (lambdaOrVarargax funcBody uIfIsLambdaElseIsAx)
	or (lambdaOrVarargax funcBody comment)...
	both of those at param7, so all you need to do to find funcBody is check for a certain o8 then get r.
	o8 of (lambdaOrVarargax funcBody).

	what about opOneMoreParam?
	(opOneMoreParam varName aLambda) is param7? or (opOneMoreParam varName aLambda comment) so o8 is simpler? but thats wasteful.
	How to efficiently know when you've reached (opOneMoreParam varName aLambda)? o8 doesnt tell that but an o8 of (opOneMoreParam varName) does. it complicates the loop to find funcBody (in aLambda).

	Maybe should be a bit in headerInt masks that says it is the 7th param? o9 could also do that, but i prefer o8 to fit in a byte.

	(opOneMoreParam varName aLambda x) is always halted since aLambda is waiting for at least 1 more param, so (opOneMoreParam varName aLambda) is waiting for at least 2 more params.
	so could put (opOneMoreParam varName aLambda) at param 6. But would that interfere with u().curriesLeft() is 7, therefore (opOneMoreParam varName aLambda) curriesLeft would be 1 if its at param 6?

	(varargAx funcBodyAndConstraint comment) is at param 7.
	(lambda funcBody comment) is at param 7. //the vararg lambda
	(opOneMoreParam varName aLambda nextParamValueOfVarargLambda) is at param7.

	Also, since max finite curriesLeft is 254, should there be a lambda-like op that takes a byte param to take a byte that becomes curriesLeft? (lambdaByteCurriesleft cbt8 comment) has thatCbt8Of curriesLeft.
	???
	Or could just make 16 ops like in earlier versions of wikibinator, that take 1-16 params.
	The vararg lambda is the main way funcs will be made but might be less efficient in some cases.

	Evaler should be copied, not just from l().evaler but from the aLambda in (opOneMoreParam varName aLambda).

	How to cache the varnames/values in (opOneMoreParam varName) if it gets big?

	Could make an evaler (aLambda ?a ?b ?c) pushEvaler of it, as that takes 3 more params (or is it 4?).
	No problem optimizing that, but (aLambda ?a ?b valOfA valOfB ?c) is harder to optimize.
	Similarly (aLambda ?a valOfA ?b valOfB ?c).
	The ?a ?b ?c are each a (opOneMoreParam somethingLike_"a" aLambda)...
	(opOneMoreParam "c" (opOneMoreParam "b" (opOneMoreParam "a" aLambda) valOfA valOfB)) is a func waiting for val of c and calls funcBody on (lazyeval_or_pair (opOneMoreParam "c" (opOneMoreParam "a" (opOneMoreParam "b" aLambda) valOfA valOfB)) c).
	But its displayed as (aLambda ?a ?b valOfA valOfB ?c).
	..
	FIXME what about {...} syntax of that? How do the 2 syntaxes (of vararg lambdas and sCurryLists) mix?

	(opOneMoreParam "c") should be displayed as ?c.
	(?c (?b (?a aLambda) valOfA valOfB) valOfC)
	If write it that way, {...} syntax is straightforward...
	({,?c {{,?b {,?a getALambda}} getValOfA ,literalValOfB} getValOfC} thing)
	//might have got {{{{}}{{}}... mixed up.
	But its longer than
	(aLambda ?a ?b valOfA valOfB ?c valOfC)

	({,?c {{,?b {,?a getALambda}} gvalOfA gvalOfB} gvalOfC} thing)
	(aLambda ?a ?b lvalOfA lvalOfB ?c lvalOfC)


	This isnt seeming to fit together into an intuitive syntax. It will work technically, but being intuitive is for sure needed for this system to be useful. Simplify...

	What if every lambda has 3 childs instead of 2, and 1 of those childs is the curriesLeft byte? Or linkedlist-like way (more similar to opOneMoreParam)? There would need to be a syntax for it.
	Maybe the char ` (or use ? maybe) means add 1 more param.
	```(aLambda funcBody) means wait for 3 more params, so (```(aLambda funcBody) a b) is halted and (```(aLambda funcBody) a b c) evals. ???
	But I want to write it with ` after the params, so (aLambda funcBody ` ` ` a b) is halted, and  (aLambda funcBody ` ` ` a b c) evals. Similar to (aLambda funcBody ` ` a ` b) is halted and (aLambda funcBody ` ` a ` b c) evals.
	So (aLambda `) means basically (opOneMoreParam aLambda).
	Except, (opOneMoreParam aLambda) wouldnt be halted. It would return a form of aLambda that has curriesLeft 1 higher (and if curriesLeft reaches 255 then its infcur (never evals, stays 255).
	opOneMoreParam and opOneLessParam would both take 1 param and return such a variant of a lambda.
	At each point in the "param list", it can add a param, so it has to remember where it was added. But if it ever gets down to 0 params, it has to eval right then.
	That would maybe need a minCurriesLeft to be stored in headerInt, along with curriesLeft, since for example s takes 3 params but what does it mean if (s a b) is supposed to eval? (opOneLessParam s) would return (s`). Maybe it should ONLY work for the lambda op.
	Also, if you want var names like ?a ?b ?varXYZ to wait for param and a? and b? and ?varXYZ to read param value.... If want that, then would have to use 2 ` and the extra ` is for param name.


	The number of ` displayed (or display as ????) is curriesLeft-minCurriesLeft, or something like that.

	(lambda funcBody) at param 7, has curriesLeft of 1.
	(lambda funcBody ???) at param 7, has curriesLeft of 4. (would prefer it be the same number of ?s but dont know how).
	(lambda varargPlusFuncBody ?? 10 10 5)->25
	(lambda varargPlusFuncBody ? 10 ? 10 5)->25
	(lambda varargPlusFuncBody 12)->12

	(lambda varargPlusFuncBody ?) is a variant of (lambda varargPlusFuncBody).

	opOneLessParam maybe should not be able to reduce curriesLeft below 1 aka should not bea ble to cause an eval.
	opOneMoreParam and opOneLessParam should only work on op lambda. Maybe it should infloop if called on anything else and if try to set curriesLeft to less than 1 or more than 254.

	rename lambda to opLambda, and call lambdas in general fns (functions). fn opLambda.

	? is not a fn. Its a syntax that describes curriesLeft, that can be incremented and decremented by opOneMoreParam and opOneLessParam.



	Maybe vararg, other than in varargAx, costs more than its worth. But I still need a way to make a syntax work where ?abc means waiting on the abc? param to read its value, in an opLambda, while in {...} since most code is in {...} cuz its the simplest way to pass params in turingComplete ways. Also (...)#nameXYZ or {...}#nameXYZ means the localName of that fn/constant is nameXYZ. It has no effect on ids since its not part of the callpair forest.
	({,opLambda {,* ,2 {,varargPlus x? y? z?}}#theFuncBody) ?x ?z ?y 10 30 2)->84 ??? The order of ?x ?y ?z vs ?x ?z ?y is allowed to differ. You can even use x? multiple times such as {,* x? x?}.
	I want the syntax to look something like that, but it seems to need the text to often swap direction of reading "left to right" vs "right to left" and use combos of both of those in the same code string.

	In lisp it would just be written as something like (opLambda (x z y) (* 2 (+ x y z))).

	But I want the ability to put the param definition (?x) in the param list like (something... ?x valOfX ?y valOfY ?z valOfZ)
	or also works as (something... ?x ?y valOfX valOfY ?z valOfZ).

	I dont want to go back to naming params just by their index in the lambda, cuz its confusing to read that code.


	Get rid of vararg opLambda and just define the var names within a constant number of lambda params. and have 240something max params of a lambda. If you want vararg use varargAx, but make sure it returns something other than a partial call of varargAx if you want others across network to accept such a return value since otherwise it might cost them infinite time and memory to disprove a false claim.
	Something like (opLambda (x z y) (* 2 (+ x y z))) but thats lisp syntax of a similar thing.
	..
	Also, I'm not planning to do much optimizing of opLambda, just let it run in interpreted mode, and mostly what will get optimized is opmut and lines of code inside it are small trees of s, and the [] []= <> <>= etc.
	..
	TODO write it with {...}

	({,opLambda {,* ,2 {,varargPlus x? y? z?}}#theFuncBody) ?x ?z ?y 10 30 2)->84 ???
	No, thats still vararg. Move the ?x ?z ?y etc to right after opLambda...

	({,opLambda ,{... use x? y? and z? in here...}#funcBody ,'x' ,'y' ,'z' ,u 10 {,+ get15 ,25} 2} thing)

	or could put all the var names as a string but likely would be slower...
	({,opLambda ,{... use x? y? and z? in here...}#funcBody 'x y z' 10 {,+ get15 ,25} 2} thing)
]]]



//TODO replace HashtableNode with the lambda, and just put a next pointer in the lambda itself.
//and call vm.prepay less often. and make the hashtable double in size automatically instead of allocating a 1<<24 size one at first.


/*UPDATED comment, maybe need to include in license, about mask_stackIsAllowImportEvilIds (and the opcode for that)...
Maybe it should just be an op to measure if an id has evilBit on or not (its in the first byte of a cbt if used as an id),
since otherwise I'd have to define that any id of a lambda which can import an evil id of a lambda is itself evil,
since it could just flip the bit itself (forkEdit the id bits) then call that,
but it is possible, though may be expensive, to formalVerify a lambda call to not do that, though it couldnt be as flexible of turingComplete if so.
This gets into the problem that evilBit is at least a partial solution to,
that knowing if bits are safe to give execute permission to or not (and this software NEVER gives execute permission to anything,
but opensource forks of it including possible plugins might, so be careful to avoid those possible VMs if you dont know its safe)...
knowing if its safe to give execute permission requires a halting oracle or infinite time and memory or for it to be less than turing complete,
none of which are practical, so this software just doesnt execute. But since many people insist on executing things without checking if they're safe...
Inside the sandbox (which may exist across many computers) it is safe, nomatter what evil things the lambdas may simulate,
and maybe the best that can be done is for different VMs to have a different vm.import function if they want to while NOT allowing evil
higher on the stack (!vm.mask_stackIsAllowImportEvilIds), but while allowing evil it must be deterministic.
It can be a security hole for malicious messages to be able to stop a calculation, like hiding an evil message in a good message by steganography
that is later discovered. While evil is allowed (so maybe there should be 2 bits, to lock in allowing evil while higher on stack, and one to lock it out, higher on the stack)
... while evil is allowed, there is no such way to "throw a wrench into the machine" since such wrenches all already have a unique id, as every lambda does,
	even the unexpected ones... that means that viruses etc that dont even exist yet already have a certain id. All lambdas do. At least,
		if you count the internal 2-way forest nodes as part of the lambda instead of just its param/return mapping.


/*SOLUTION to sandbox problem, though maybe not the fastest, will get musical instruments and flexible recursion in opmut working soon,
which sandbox depends on js String and js Number dont have any of these fields (m d n, etc)...:
vm.Mut = function(n){
	
	//truncate to nonnegative int n even if its string or lambda or mut etc (which if they are not a double then becomes 0).
	//in js, int or float or byte are a subset of doubles.
	this.n = n&0x7fffffff;
	
	//view as thisMut<indexOfDouble>
	this.d = new Float64Array(this.n); //TODO reuse an empty Float64Array if !this.n aka this.n==0
	
	//view as thisMut[abc] or thisMut.xyz where value of abc is 'xyz', and root namespace (in an opmut call) is a Mut (maybe with just 1 key set to the param of opmut??),
	//and a "root namespace" normally only exists for .001 to .03 seconds between one video frame and the next or multiple such calls during one,
	//or for some uses maybe much longer or as fast as a microsecond.
	this.m = {};
	
	//this.λ = null; //lambda (output of lambdize of Node) or null. or should lambda be value in Mut.m?
	
	//To make formal-verification easier and efficient, remove js prototype of fields of Mut,
	//except Object.getPrototypeOf(Mut.n) is Number, which cant be changed cuz for example 5.67 in js has no prototype pointer and is just literal bits,
	//similar to Object.getPrototypeOf('xyz') cant be changed and is always String. Number and String, of key n d or m, seem to always be undefined,
	//so will correctly throw if generated js code reads g.h.i where g.h returns a Number or a String or a lambda, but if it returns a Mut then .i is theMut.m.i
	,=//which may be undefined or have a value of string or double or lambda or Mut, and so on.
	//
	//block access to this.d.buffer and this.d.length etc in generated js code, without needing to do param|0..
	Object.setPrototypeOf(this.d,null);
	//block access to this.m.__lookupGetter__ etc in generated js code.
	Object.setPrototypeOf(this.m,null);
};

/*

FIXME, sandbox problem:
x = {}
{}
x.__lookupGetter__
ƒ __lookupGetter__() { [native code] }
..
Object.getPrototypeOf({})
{constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}constructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()
x = {}
{}
...
how to fix:
x = {}
{}
Object.setPrototypeOf(x,null);
{}
x.__lookupGetter__
undefined
..
..
FIXME sandbox problem:
x = 66;
x++;
x.toString
ƒ toString() { [native code] }
cant replace prototype of a Number.
..
maybe the Mut.m and Mut.d fields are the only safe and efficient way, since Number, String, Fn/Lambda, dont have those fields. ???

NO, just stick with Mut.d and Mut.m...
/*
TODO verify this works on various browers OS etc...
newMut = n=>{ let m = new Float64Array(n); Object.setPrototypeOf(m,null); return m; };
BUT... can use it with string??? is that safe? 'abc'.concat('def')
[[[
x = new function(){}
{}
x
{}[[Prototype]]: Object
x.isPrototypeOf
ƒ isPrototypeOf() { [native code] }
x.prototype
undefined
for(let i in x) console.log(i)
undefined
x = Float32Array.of(3,4,5)
Float32Array(3) [3, 4, 5, buffer: ArrayBuffer(12), byteLength: 12, byteOffset: 0, length: 3, Symbol(Symbol.toStringTag): 'Float32Array']
y = {}
{}
for(let i in x) console.log(i)
VM439:1 0
VM439:1 1
VM439:1 2
undefined
x.buffer
ArrayBuffer(12)byteLength: 12[[Prototype]]: ArrayBuffer[[Int8Array]]: Int8Array(12)[[Uint8Array]]: Uint8Array(12)[[Int16Array]]: Int16Array(6)[[Int32Array]]: Int32Array(3)[[ArrayBufferByteLength]]: 12[[ArrayBufferData]]: 127
Object.setPrototypeOf(x, Object.getPrototypeOf({}))
Float32Array(3) [3, 4, 5]
x
Float32Array(3) [3, 4, 5]
x.buffer
undefined
x.abc = 'def';
'def'
x
Float32Array(3) [3, 4, 5, abc: 'def']
x.buffer
undefined
x.length
undefined
x
Float32Array(3) [3, 4, 5, abc: 'def']0: 31: 42: 5abc: "def"[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()
x.valueOf('abc')
Float32Array(3) [3, 4, 5, abc: 'def']
x.valueOf
ƒ valueOf() { [native code] }
Object.setPrototypeOf(x, undefined)
VM1210:1 Uncaught TypeError: Object prototype may only be an Object or null: undefined
    at Function.setPrototypeOf (<anonymous>)
    at <anonymous>:1:8
(anonymous) @ VM1210:1
Object.setPrototypeOf(x, null)
Float32Array(3) [3, 4, 5, abc: 'def']
x.valueOf
undefined
x.valueOf = 'abc'
'abc'
x
Float32Array(3) [3, 4, 5, abc: 'def', valueOf: 'abc']
x[2]
5
typeof([2])
'object'
typeof(x[2])
'number'
typeof(x.valueOf)
'string'
''+x
VM1417:1 Uncaught TypeError: Cannot convert object to primitive value
    at <anonymous>:1:3
(anonymous) @ VM1417:1
newMut = n=>{ let m = new Float64Array(n); Object.setPrototypeOf(m,null); return m; };
n=>{ let m = new Float64Array(n); Object.setPrototypeOf(m,null); return m; }
z = newMut(33);
Float64Array(33) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
z.hello = 'world';
'world'
z.me = z;
Float64Array(33) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, hello: 'world', me: Float64Array(33)]0: 01: 02: 03: 04: 05: 06: 07: 08: 09: 010: 011: 012: 013: 014: 015: 016: 017: 018: 019: 020: 021: 022: 023: 024: 025: 026: 027: 028: 029: 030: 031: 032: 0hello: "world"me: Float64Array(33) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, hello: 'world', me: Float64Array(33), test: 'atest']test: "atest"
z
Float64Array(33) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, hello: 'world', me: Float64Array(33)]
z.me.me.me.test = 'atest';
'atest'
z
Float64Array(33) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, hello: 'world', me: Float64Array(33), test: 'atest']
z.length
undefined
typeof(z)
'object'
typeof(z[22])
'number'
typeof(z.me.me[22])
'number'
typeof(z.me.me)
'object'
Object.getPrototypeOf(z)
null
for(let i in z) console.log(i);
VM2154:1 0
VM2154:1 1
VM2154:1 2
VM2154:1 3
VM2154:1 4
VM2154:1 5
VM2154:1 6
VM2154:1 7
VM2154:1 8
VM2154:1 9
VM2154:1 10
VM2154:1 11
VM2154:1 12
VM2154:1 13
VM2154:1 14
VM2154:1 15
VM2154:1 16
VM2154:1 17
VM2154:1 18
VM2154:1 19
VM2154:1 20
VM2154:1 21
VM2154:1 22
VM2154:1 23
VM2154:1 24
VM2154:1 25
VM2154:1 26
VM2154:1 27
VM2154:1 28
VM2154:1 29
VM2154:1 30
VM2154:1 31
VM2154:1 32
VM2154:1 hello
VM2154:1 me
VM2154:1 test
undefined
]]]
*/




/*
TODO start storing lambdas ONLY as concat of 3 ids: parent left right, in base58 or base64, something like this:
λeDY8pvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHjλeaaaavwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHjλebbbbvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHj (a made up id)
where λe is evil/notNecessarilyGood lambda and λg is good lambda,
AND make lambdize/Node toString return
 'λeDY8pvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHjλeaaaavwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHjλebbbbvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHj' etc.
 That way, anyone who has all the toString outputs of the relevant lambdas has all those lambdas without having to try all pairs of them to
 know which is the left/right child of which other, and it needs no database etc, can exist entirely in sentences written online. You can
 still write λeDY8pvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHj by itself which implies whatever its left and right childs are, that hash
 (512 bits to 256 bits) to that.
TODO choose 3*(16+8) int32s as extra constants for doing 3 sha256_without_padding of 512 bits, to add the ints to the input and add the
 ints to the output,
and get 3 such (preprocessed and postprocessed) sha256 outputs of the same pair of id256, and minorityBit ~(a&b)^(b&c)^(c&a) them
 together to get a more secure hash, then take the last 192 bits of it, and prefix that with header64 as the id256 of any 2 id256s
 as its left and right childs.
TODO make musical instruments stored only like a bunch of
λeDY8pvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHjλeaaaavwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHjλebbbbvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHj
but as λg... the good form since if I make the instruments myself out of only things I've made (nobody having given me lambdas to use)
then I know theres no evil in it (evilbit) but just change λg to λe later if combining it with things you cant easily verify are good.
And start playing the instruments something like http://dinahmoelabs.com/plink/ andOr puredata.
 

TODO use these...
vm.callPairPrefixByte_evilBitOn
vm.callPairPrefixByte_evilBitOff

opcodes:
bit0
bit1
l
r
t
f
λimport //(λimport anIdMaker id) -> x where (anIdMaker x)->id, and id may be a cbt256 or concat of 3 of those, and may be some text form such as base64 but if so then idMaker returns such a string as id, and idMaker contains the binary idMaker as one of its params to transform to string. This is similar to solveRecog (and solveFloat64) except its easier to optimize and is expected to look wherever lambdas may be stored such as in browser cache, harddrive, a website, or wherever vm.λimport is hooked in to look. Or, it might load a lazyEval of the lambda like a stub that looks for it if you look deeper into it.
stackIsAllowstackTimestackMem //the 2x2 kinds of clean/dirty/etc. exists only on stack. only with both isClean and isAllowSinTanhSqrtRoundoffEtc at once, is it deterministic. todo reverse order aka call it !isDirty instead of isClean?
stackIsAllowNondetRoundoff //isAllowSinTanhSqrtRoundoffEtc //the 2x2 kinds of clean/dirty/etc. exists only on stack. only with both isClean and isAllowSinTanhSqrtRoundoffEtc at once, is it deterministic. todo reverse order?
stackIsAllowMutableWrapperLambda
stackIsAllowAx (fixme, is it varargAxCall or just axa (and maybe axb?))
varargAxCall //(varargAxCall constraint ...params...) ... (varargAxCall constraint a) is halted if (constraint [(varargAxCall constraint ...paramsExceptLast...) lastParamSoFar])->u, and evals to v if that -> (AnythingExceptU v), so varargAxCall chooses at each next param that it has enough params or not (vararg) and if not then what the return val is. These ax (axiom-like) constraints are a turing-complete-type-system that could for example make a list that can only contain prime numbers, or a tree that can only have a certain type of nodes in it. It takes finite time to compute, just normal forward computing, but cuz of haltingProblem, it takes on average infinity time and memory to verify, so theres a containsAxConstraint bit in header int and a stackIsAllowAx bit on stack thats also in that header int for nonhalted calls/nodes. varargAxCall tightens cleanvsdirty (higher on stack) to be deterministic (ax is deterministic, but so is not allowing ax), so you cant for example have an ax constraint about nondeterministic roundoff or about mutableWrapperLambda.
lambda //(lambda funcBody ? ?ddee a b ??? c d e) -> (funcBody (pair (lambda funcBody ? ?ddee a b ??? c d) e))
getnamedparam //ddee? would be a syntax for '(getnamedparam "ddee")', and appears like 'ddee?' .
opOneMoreParam //(lambda funcBody ? ?ddee a b ??? c d e) -> (funcBody (pair (lambda funcBody ? ?ddee a b ??? c d) e))
s
isleaf
pair
typeval
getSalt128 ignore
withSalt128 cbt128 func param
withSalt128TransformedBy funcOf128BitsTo128Bits func param
mutableSLike
ifElse condition iftrue iffalse state //if (condition state)->t then returns (iftrue state) else returns (iffalse state). todo check o8 for is it t, vs do it like pair x y t vs pair x y f? just check its opcode.
todo fill in the others.
for //...
while condition state
dowhile
varname //like typeval but its a utf8 or is it utf16? use this (or just typeval names) in ifElse for while dowhile etc. or just use typeval of string? or getnamedparam? or both?
[]= nameOb nameKey nameVal //{} in Mut
[] nameOb nameKey
<>= nameOb nameKey nameVal //Float64Array in Mut
<> nameOb nameKey
copy<>ToCbt ob key
copyCbtTo<>
new<>OfNDoubles
//new<>OfNFloats
//new<>OfNInts
//new<>OfNUbytes
isJsDoubleDuringMut getVarName
isJsStringDuringMut
funcallDuringMut func param //similar to (+ x y) it returns something instead of being a []= or <>=
	//funcallDuringMut getVarNameLvalue getVarNameFunc getVarNameParam
Math.sin //allow nondeterministic roundoff. but in pure mode you cant use this.
Math.tanh
Math.sqrt
Math.imul
...bunch more Math.something funcs...
spendTimeMemFuncParam maxstackTime maxstackMem func param

/*
//voxel32 -> int32 with red as lowest 4 bits.
{,& (>> 8) ,15}##VoxRed4

//voxel32 -> int32 with green as lowest 4 bits.
{,& (>> 4) ,15}##VoxGreen4

//voxel32 -> int32 with blue as lowest 4 bits.
(& 15)##VoxBlue4

/*
//FIXME this is too general, cant name it VoxRGB12 cuz others will use it for other things.
//could put a comment param in Lambda op, but makes it harder to optimize.
//(& 4095)#VoxRGB12
OpCommentedFuncOfOneParam#Cf //This would be easier to optimize.
(Cf voxRGB12 (& 4095))#VoxRGB12 //name would default to the first param of OpCommentedFuncOfOneParam, except first char of it made capital, if name is not given, though there can be duplicates.
Could abbrev it this way: (& 4095)##VoxRGB12
*
(& 4095)##VoxRGB12

//voxel32 -> int32 with x as lowest 10 bits.
{,& (>> 12) ,1023}##VoxX10

//voxel32 -> int32 with y as lowest 10 bits.
{,& (>> 22) ,1023}##VoxY10

//voxel32 -> int32 with yx as lowest 20 bits.
{,& (>> 12) ,1048575}##VoxYX20
*
OpCommentedFuncOfOneParam

~
^
!
||
&&
*
float64+
javascriptlike+ //can do string+float64 or float64+float64 or string+string etc... careful not to get tostring of lambda unless its something that doesnt depend on id.
-
/
%
?:
!!!!!!!!!!!!! no == for fns cuz of nondeterministic partialDedup?
TODO ^= |= ~= etc?
//fixme is this the same as Math.pow: ** aka pow
Math.abs
Math.acos
Math.acosh
Math.asin
Math.asinh
Math.atan
Math.atan2
Math.atanh
Math.cbrt
Math.ceil
Math.clz32
Math.cos
Math.cosh
Math.exp
Math.expm1
Math.floor
Math.fround
Math.hypot
Math.imul
Math.log
Math.log1p
Math.log2
Math.log10
Math.max
Math.min
Math.pow
Math.round
Math.sign
Math.sin
Math.sinh
Math.sqrt
Math.tan
Math.tanh
Math.trunc
//sigmoid //todo implement using tanh andOr exp
//square
//cube
isNaN
isSubnormalNumber
isFiniteNumber
isNormedDoubleBits
...
matrixMultiplyFloat32 //(matrixMultiplyFloat32 ab bc a b c)->ac where ab and bc are bitstrings viewed as float32s, and a b and c are int sizes.
matrixMultiplyFloat64
matrixMultiplyInt32
//until more flexible opcodes are working, maybe just use gpujs for matrix multiply of float32, and do the rest in opmut.
...
asyncStartGpuFloat32CompileEarly //where to hook in GPU.js or https://github.com/benrayfield/lazycl or any GPU api that uses float32. int doesnt fit in float32 but can still be in loop counters.
asyncStartGpuFloat64AndOrIntsCompileEarly //where to hook in GPU.js or https://github.com/benrayfield/lazycl or any GPU api that uses float64 arrays andOr int arrays.
isGpuFloat32CompiledFor
isGpuFloat64CompiledFor
asyncBatchDownloadMutableWrapperLambdaEachWithBellcurveOfTimeForWhenAndHowMuchWantIt
isMutableWrapperLambdaCallDownloadedOrKnownFor
hyperquasicrystal (it cant get access to anything outside this opcode. it sees this opcode as its leaf, and infloops if called on anything not made entirely of it)
solveRecog x //returns any y where (x y)->u.
solveFloat64 x //returns any y where (x y)->float64 where the float64 is positive, and the higher the better.
getdoublefromcbtaligned64
getint...
getbyte..
getshort...
//getchar...
concat2cbt //last 1 bit in each is just past end of bitstring. concats those 2 parts then pads with 100000000... until next powOf2 size.
bize31 //the low 31 bits of the index of the last 1 bit, if its a cbt that has any 1 bit. check curriesLeft to know cbt size. biggest cbt happens at curriesLeft==1, and thats aligned so 0 or 1 has curriesLeft of maxFiniteCurriesLeft-7 aka pow(2,12)-1-7=4088 cuz 0 and 1 happen at 7 curries of u, so max bitstring size is pow(2,4088)-1 bits, including sparse matrix (uses containsbit1 which means the bize int is nonnegative. if its -2 it means bize int isnt computed yet. if its -1 it means all 0s. if its nonnegative it means a 1 bit exists and the low 31 bits of the index of the last 1 bit is that) andOr shared branches. OLD: bitstrings are limited to 2^31-1 bits so bize fits in int. you can still use a list or tree of bitstrings to make things as big as you want.
//bize53 //cuz double can do all integers in range plus/minus pow(2,53)
//bize63 //if int63
//bize4088
curriesLeft //returns a cbt16 whose low 12 bits are the number of curries left or is 4095 (0x0fff) to mean infinite curries left aka never eval).
doublesLen //same as floor(bize31/64)
floatsOrIntsLen //same as floor(bize31/32)
shortsOrCharsLen //same as floor(bize31/16)
bytesLen //same as floor(bize31/8)
containsbit1
normfloat64AllowSubnormal //will norm infinities and nans and negativeZero but leave subnormals (lowest exponent bits) as they are
normfloat64NoSubnormal //will norm infinities and nans and negativeZero but change subnormals to 0
normfloat32AllowSubnormal
normfloat32NoSubnormal
optimizationhint hint func param ???
  or just gpujslikecall
//Math.random //only works in opmut or with a different salt128 each time. whatever Math.random() does, or GPU.js's random func does. not high quality random. if you want that, derive a securehash and seed it with things like this.
//time //returns double of seconds since Y1970 utc time. only works in opmut or with a different salt128 each time.
...reservedForFutureOpcodes... //up to 128.
make sure it fits in 128 opcodes, and todo leave some space for future opcodes in forks of the opensource, but until they're added just infloop if those reservedForFutureOpcodes are called.




TODO opcode for optimizing a musical instrument, similar to how in puredata theyre made of parts that each have n inputs and m outputs, of float64s.
use Mut (which has a {} and a Float64Array.
state of an instrument part will be any combo of Muts and float64s, but no strings or lambdas (returns a lambda from the outer Mut/opMut call,
but inside opMut its just evaling javascript code as an optimization, which depends on string, Float64Array, etc,
having none of the same fields as Mut (Mut.m for map and Mut.d for double array) so that would get an undefined and throw instead of getting access to Float64Array.buffer etc.
Thats why Mut separates the map and Float64Array, and why generated code will use amut.m[] and amut.d[] instead of directly amut[].
..
Each musical instrument part will have 3 fields in its state, numbers in, numbers out, and the state it uses for whatever it wants. and maybe a stackTime counter?
These numbers in and numbers out are hooked together by the outer mut, similar to how it happens in puredata.
The musical instrument calculation, of chosen t time cycles (such as WebAudioAPI can do 256 cycles, 512 cycles, etc at once, but lambdas dont send to external sound or video, instead
external stuff would only read lambdas returned after calling lambdas on lambdas) will come in 3 parts:
* verify each musical instrument piece does not allocate anything in last part, and that each is limited to a chosen amount of stackTime in the outer mut call.
* allocate the Float64Arrays and maps and var fields in those maps.
* update state in the mut of this instrument part, such as a double loop with some if/elses and x = {,+ y? z?}.
...
These musical instrument parts are each a transform of numbers in to numbers out, such as 5 in and 3 out,
and can be shared across the internet at near lightspeed and be compiled and running as a sound transform between speakers and microphone before the speed of sound would get there
even if its a short distance, in theory,
as lambdas (normally used with stackIsAllowNondetRoundoff so can use js Math.sqrt Math.sin etc optimizations).
To compile and combine them this fast, each instrument part will be compiled separately (make an evaler (vm,l,r) from a js eval(codeString) derived from the lambdas)
and those multiple evalers will run in sequence in the outer mut call,
so for example, in theory, you could make a loud sound, throw a fourier transform algorithm to a computer thats kind of far away but can still hear the sound,
and that computer compile and run the fourier algorithm in time to hear the sound with it.

/*
TODO write my own opensource license"... most of this probably wont be in it, too indirectly related. mostly it should just say
that theres likely to be dangerous stuff in it like in the dark/deep web so dont let it out of sandbox unless you're a math expert and what could happen if you do,
and that any malicious act by anyone on your computer or resulting things is your fault for letting it out of the sandbox since all possible lambdas are allowed
and are safe inside the sandbox but not necessarily outside it sot he rules for what can be outside it should not apply to inside it
(think of the sandbox like an antivirus quarantine that lets it keep running inside),
(((this part shouldnt go in license: but as long as its in sandbox its safe, and for this reason its in a sandbox in a sandbox, the browser sandbox and inside that an inner sandbox called the wikibinator203 VM)))
and say that nobody owns the lambdas, say that in a copyleft way and explain that they're all derivative works of the universal lambda
since all paths on the left and right childs (lambdas) of each lambda lead to the universal lambda, and for all x, the lambd call (left x (right x)) equals x which makes them similar to quines.
Other than that, just copy some parts of MIT license and GNU GPL license(s), something like that, but keep it small.
See "THINGS CONSIDERING IN MAKING AN OPENSOURCE LICENSE" in comments farther down in this file.
..
*/


const Wikibinator203 = (()=>{
	
	let vm = new function(){};
	
	//vm.loglev is 0 for no logging (FIXME theres probably still some), and higher numbers for more logging.
	vm.loglev = 1;
	if(vm.loglev>0) console.log('Wikibinator203VM loglev='+vm.loglev);

	vm.logEveryLambdaCallAsFullToString = false;
	//vm.logEveryLambdaCallAsFullToString = true;

	vm.logDetailedStateDuringFoLoop = false;
	//vm.logDetailedStateDuringFoLoop = true;
	
	vm.logTokensToParseTree = false;
	//vm.logTokensToParseTree = true;
	
	//vm.letJitThrowInsteadOfReturningNullToUseOtherJitInstead = false; //normal
	vm.letJitThrowInsteadOfReturningNullToUseOtherJitInstead = true; //for testing
	//(Jit (DE ,x <* x$ x$>) (DE ,x ,20 (EmptyTreemap GodelLessThan)))
	//Wikibinator203DragAndDropTree.html:7987 Uncaught No transpileFunc for lang=js func=Jit A transpileFunc can be added if you search for addOp('Jit' in Wikibinator203VM.js and put it in the langs:{ js: (tr,fn,ty)=> ... The tr is a Transpiler. The fn is the func= this error just said. ty=fn
	//FIXME that should be transpiling (DE ,x <* x$ x$>), not transpiling (Jit (DE ,x <* x$ x$>)).
		
	vm.ops = {}; //map of opName to lambda
	vm.opAbbrevs = {}; //similar to vm.ops except its , instead of T, and _ instead of Seq
	let ops = vm.ops; //Example: ops.S(ops.T)(ops.T)
	let opAbbrevs = vm.opAbbrevs;

	//vm.ops.Bit0 and vm.ops.Bit1 are at 7 params. Max cbt size happens at 254 params, since 255 means unlimited params like in vm.ops.Infcur.
	//7+vm.log2OfMaxBits==254. Cbt size ranges 1 to 2 pow 247 bits.
	//Bitstring size ranges 0 to (2 pow 247)-1 bits cuz the last 1 bit (then 0s until next powOf2 size) is padding.
	//Normally only 31 bits of bitstring size is stored in a 256 bit id (maybe more in a 512 bit id),
	//but thats just a cache of the bitstring size (if it is a bitstring), and either way it can have bigger bitstrings than that.
	//2 pow 31 bits is 256mB. 2 pow 247 bits is enough to store every particle's position in a galaxy.
	//It can be used sparsely. If you need more storage or sparse size, you can use [...] or other data structures containing many bitstrings.
	vm.log2OfMaxBits = 247;
	vm.maxBits = 2**vm.log2OfMaxBits;
	if(Math.log2(vm.maxBits) != vm.log2OfMaxBits) throw 'Theres roundoff in the max bits per cbt, stored in a double.';

	//If true then (GE ,obName ,fieldName [hello world] (EmptyTreemap GodelLessThan)) converts [hello world] to double even if its not one.
	//If false then stores [hello world] directly, which means vm.Mut optimization cant be used with that cuz vm.Mut.g is a js {} of string/MutToString to double.
	vm.forceGEValToDouble = true;

	//with(ops){ //so vm can call its own ops by name, such as (Pair, L, R, S) to implement other ops
		
		vm.lastIdA = -1; //high 32 bits
		vm.lastIdB = -1; //low 32 bits
		//first lambda is u/theUniversalFunc and has idA and idB of 0.
		//
		//FIXME TODO ids of fns that are not doubles or literals that fit in 1 2 4 8 16 or 32 bits,
		//should have idA whose first 13 bits are 1 (a subrange of nonnormed negative infinities as double),
		//and all normed doubles are themself as idA_idB. So change "first lambda is u/theUniversalFunc and has idA and idB of 0".
		
		
		vm.incIdAB = function(){
			this.lastIdB = (this.lastIdB+1)|0; //wrap int32
			if(!this.lastIdB) this.lastIdA++; //carry
		};
		
		//WARNING: opNames are not part of the wikibinator203 spec and may vary across different VMs
		//or change in later versions of the same VM.
		//You should instead get them like u(u)(u)(u)(u)(u)(u)(u)(u) is identityFunc,
		//but since I'm still building this first VM, many of those opcodes 128 to 255) arent known yet,
		//and I'm using this vm.op function to make sure vm.ops.someOpName exists before using it.
		//TODO optimize, once the ops are final (or at least the first n of them that the VM uses to implement other ops),
		//optimize by just using those ops directly (let identityFunc = u(u)(u)(u)(u)(u)(u)(u)(u); in VM code,
		//and use that identityFunc again multiple times.
		//vm.op = function(opName){
		//	return vm.ops[opName] || (throw 'No opName='+opName);
		//};
		let OP = opName=>{
			let ret = vm.ops[opName];
			if(ret) return ret;
			throw 'No opName='+opName;
		};
		
		//Any datastruct other than the id of a lambda starts with this byte, and you can choose evilBit of true or false.
		//The main usecase of this is large blobs, but anything could be mounted in it such as prefix it with a contentType such as put "image/jpeg"
		//or "application/x-multicodec" (or whats their contenttype) for the https://github.com/multiformats/multicodec data format.
		//I'm not sure what other datastructs I'll put in, but it should branch by something very general first.
		//TODO create a multicodec prefix for the default kind of wikibinator203 id, or allocate a range in multicodec for that
		//(just use a big prefix so nobody else is likely to overlap it by accident or be inconvenienced by it),
		//and make a pull request on github, but dont do that until its working in a peer to peer network and the ids are well tested.
		//To wrap any data format (datastruct) in a lambda, use the typeval opcode such as (typeval "image/jpeg" bitstring)
		//or (typeval "application/x-multicodec" multicodecBitstring) or something like that.
		//Lambdas only touch lambdas. Its important for sandboxing and math consistency,
		//so things must be wrapped and used as immutable/stateless to access them from lambdas,
		//but VMs will need to store stuff and interact with various datastructs to optimize and organize things among lambdas,
		//hopefully in the form of lambdas usually, but whatever that is, prefix it by vm.prefixByteOfOther_evilBitOn andOr vm.prefixByteOfOther_evilBitOff.
		//When in doubt which you should use of evilBit being on or off, choose on since off means that by giving someone a copy of it
		//you're claiming its good and safe for other uses. Evil means "dont know if its good or evil or where between" or "not necessarily good".
		vm.prefixByteOfOther_evilBitOff =          0b11110000; //FIXME?
		vm.prefixByteOfOther_evilBitOn =           0b11110100; //FIXME?
		
		//https://en.wikipedia.org/wiki/Evil_bit
		//For wikibinator203, evilBit off means "the normal internet", and on means "antivirus quarantine, spread across many computers which apps may run inside".
		//Anyone who gives execute permission to, or obeys or believes, something in an antivirus quarantine is at fault/negligence if something goes wrong,
		//since they were told its evil and chose to do that anyways.
		//To avoid breaking the merkle garbage collector, "evil" content that has incoming pointers will not be removed,
		//and the same should be true for "good" content but things might get removed anyways cuz people demand things of eachother, and things might break in the "good" area.
		//UPDATE: instead of 0b11110[0or1]00 being callpair, and the 3 after that being id of that with byte val minus 1 (id of id of id of id for example),
		//vm.prefixByteOfOther is 0b11110[0or1]00 and callpairs start at 0b11110[0or1]01 and 0b11110[0or1]10 is "id of id"
		//and 0b11110[0or1]11 is "id of id of id" and past that you need 2 nodes of 128 literal bits each to be 256 bits.
		//such 256 bits doesnt imply it is or is not an id. Its just bits.
		vm.callPairPrefixByte_evilBitOff =         0b11110001; //FIXME?
		vm.callPairPrefixByte_evilBitOn =          0b11110101; //FIXME? might need to rearrange these bits so its easier to write as text in base64 or base58
		
		//no evilBit in literal 256 bits that fits in a 256 bit id cuz it doesnt have room for a header
		//(in this case its not its own id, but most literal 256 bits are their own id).
		vm.prefixByteOfIdOfIdOrOfAny256BitsA =     0b11110010; //FIXME?
		if(vm.prefixByteOfIdOfIdOrOfAny256BitsA != vm.callPairPrefixByte_evilBitOff+1) throw 'vm.prefixByteOfIdOfIdOrOfAny256BitsA != vm.callPairPrefixByte_evilBitOff+1';
		vm.prefixByteOfIdOfIdOrOfAny256BitsB =     0b11110110; //FIXME?
		if(vm.prefixByteOfIdOfIdOrOfAny256BitsB != vm.callPairPrefixByte_evilBitOn+1) throw 'vm.prefixByteOfIdOfIdOrOfAny256BitsB != vm.callPairPrefixByte_evilBitOn+1';
		
		//no evilBit in literal 256 bits that fits in a 256 bit id cuz it doesnt have room for a header
		//(in this case its not its own id, but most literal 256 bits are their own id).
		vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsA = 0b11110011; //FIXME?
		if(vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsA != vm.prefixByteOfIdOfIdOrOfAny256BitsA+1) throw 'vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsA != vm.prefixByteOfIdOfIdOrOfAny256BitsA+1';
		vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsB = 0b11110111; //FIXME?
		if(vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsB != vm.prefixByteOfIdOfIdOrOfAny256BitsB+1) throw 'vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsB != vm.prefixByteOfIdOfIdOrOfAny256BitsB+1';

		//TODO dont change the 11110 prefix, cuz its that way to not overlap any UTF8 data and to be big negative numbers in float64 and in float32 that occur rarely, BUT...
		//maybe the 8 prefixes above should be a different 3 bit suffixs, swap those. 0b11110000 to 0b11110111. Theres factorial(8) ways to do that.

		//TODO choose for the idOfIdOfId to point at idOfId VS for it to refer to prefixByteOfOther.
		//Do I want to make callPairPrefixByte ids recurse more on average so prefixByteOfOther recurses less on average?

		//Any 256 bit id that does NOT start with the bits 11110 (high 5 bits in first byte) is itself as a literal 256 bits, and half of the others are a literal 256 bits
		//but the 256 bits they refer to differs in the first byte, so on average any random 256 bits has a 63/64 chance of fitting in a 256 bit id.

		//returns true (bigEndian) or false (littleEndian) or throws if overlapping Uint8Array and Float64Array dont store pi correctly either way.
		vm.isBigEndian = ()=>{
			let bytes = new Uint8Array(8);
			//java at https://www.tutorialspoint.com/compile_java_online.php
			//says Long.toHexString(Double.doubleToLongBits(5 FIXME THIS COMMENT IS OLD)) is 400921fb54442d18L, and thats a bigEndian tostring of the long (regardless of how it is in memory).
			bytes[0] = 0x40;
			bytes[1] = 0x09;
			bytes[2] = 0x21;
			bytes[3] = 0xfb;
			bytes[4] = 0x54;
			bytes[5] = 0x44;
			bytes[6] = 0x2d;
			bytes[7] = 0x18;
			let doubles = new Float64Array(bytes.buffer);
			if(doubles[0] == Math.PI) return true; //bigEndian
			bytes[7] = 0x40;
			bytes[6] = 0x09;
			bytes[5] = 0x21;
			bytes[4] = 0xfb;
			bytes[3] = 0x54;
			bytes[2] = 0x44;
			bytes[1] = 0x2d;
			bytes[0] = 0x18;
			if(doubles[0] == Math.PI) return false; //littleEndian
			throw 'Is not bigEndian or littleEndian as tested by overlapping Uint8Array and Float64Array on pi';
		};

		if(vm.isBigEndian()){
			throw 'Wikibinator203 VM detected bigEndian, but that is not supported in this wikibinator203 VM. If you need that, it could be redesigned to support both but slower as it would have to auto adjust array indexs.';
		}else{
			console.log('Wikibinator203 VM detected littleEndian and will use that for overlapping .buffer in Uint8Array, Int32Array, Float32Array, Float64Array, etc. Despite that bigEndian is how people usually write things, most hardware seems to be littleEndian.');
		}
		
		/*
		FIXME can it do id of id of... deeper by not having A and B? Should it? cuz the logic has to be checked for, takes time, in some ways of computing it.
		
		TODO have a sDepth in it? so you can just give {a b} and {{a b} c} instead of (s a b) and (s (s a b) c) which is the actual lambda shape???
		s is the most common lambda, so common theres a syntax for it. and maybe also prefix by t?
		
		FIXME these numbers need updating cuz theres 8 bytes above (some have an A and B, the literals that dont have an evilbit and use that bit as part of the literal).
		//Other than the 6 bytes above,
		//the 250 firstByte prefixes are 256 (or 512, depending on which idMaker) literal bits that are their own id.
		//On average, 250/256 (125/128) random 256 (or 512, depending on which idMaker) bits fit in an id the same size,
		//and 252/256 (63/64) of them fit in an id the same size even if they are not their own id.
		//2/256 (1/128) of them fit in an id the same size as them but are not their own id.
		//4/256 (1/64) of them require 2 ids of half as many literal bits each, to make a literal the same size as the id.
		*/
		
		/*
		//only for the kind of callpairs whose id starts with 11111000. If it starts with 11111001 or 11111010 or 11111011 then its a literal 256 bits but is not its own id.
		//If it does not start with 111110 then it is literal 256 bits that is its own id.
		//Starting with 11111000 means its either a callpair including 192 bits of hash or is a literal 128 bits, or 64 or 32 or 16 or 8 or 4 or 2 or 1.
		//vm.headerOfNonliteralCallPair = function(o8, curLeftOr, upTo8BitsOfMasks){
		//	return (0b11111000<<24)|((o8&255)<<16)|((curLeftOr&255))|(upTo8BitsOfMasks&255);
		//};
		//vm.headerOfNonliteralCallPair = function(o8, curriesLeft12, cleanMask4){
		vm.headerOfNonliteralCallPair = function(o8, curriesLeft12, stackIsAllowstackTimestackMem, stackIsAllowNondetRoundoff, stackIsAllowMutableWrapperLambdaAndSolve, stackIsAllowAx){
			return (vm.callPairPrefixByte<<24)|(curriesLeft12&0xfff)|(stackIsAllowstackTimestackMem?8:0)|(stackIsAllowNondetRoundoff?4:0)|(stackIsAllowMutableWrapperLambdaAndSolve?2:0)|(stackIsAllowAx?1:0);
		};
		//FIXME UPDATE: 6+2+8+12+4+1+31 cuz: FIXME go down to max 4095 params so an evaling can store the 4 bits that go on stack? cuz need those 4 bits. Halted lambdas are always clean (those 4 bits are 0).
		//FIXME its 6+2+8+16+1+31 bits. the only mask bit is in the bize int, not the header int.
		//not "teralCallPair = function(o8, curLeftOr, upTo8BitsOf". fix those params.
		*/
		
		
		//makes a header int like this: namespaceByte o8Byte curriesLeftByte maskByte.
		//evilBit is true or false.
		//curriesLeft is 0 to 255. 0 means evaling. 255 means infinite number of curries/params left so never eval.
		//o8 is 0 to 255. 0 means evaling. 1-127 means 0-6 params of u/theUniversalFunc. opcodes 128 to 255 are known at param 7 and from then on are copied from left child.
		//upTo8BitsOfMasks are from vm.mask_* such as vm.mask_isCbt and vm.mask_stackIsAllowNondetRoundoff.
		//TODO throw 'TODO replace vm.mask_isCbt with node.bize being some constant if its not a cbt';
		vm.headerOfNonliteralCallPair = function(evilBit, o8, curriesLeft, upTo8BitsOfMasks){
			return ((evilBit ? this.callPairPrefixByte_evilBitOn : this.callPairPrefixByte_evilBitOff)<<24)|(o8<<16)|(curriesLeft<<8)|upTo8BitsOfMasks;
		};

		//These permissions can be tightened higher on stack but not loosened until pop back to where it was tightened (and only loosened that far).
		//For example, a lambda call that starts with permission to use nondeterministic float64 multiply (mask_stackIsAllowstackTimestackMem true)
		//can compute stuff inside stuff inside stuff, which pushes higher onto stack, still having that permission,
		//then set mask_stackIsAllowstackTimestackMem to false for a certain lambda call which has to multiply deterministicly,
		//and it cant ask to do it nondeterministicly. Theres no sudo etc. But once that deterministic calculation returns (if ever)
		//which may have done many different things, the caller still has mask_stackIsAllowstackTimestackMem true.
		//If the called code in tighter permissions wants to do something with greater permissions,
		//then it could be designed to return a Treemap or slist etc which has such a request in it,
		//but its just another lambda, that the caller may react to any way caller chooses (as caller is also made of lambdas, ...
		//
		//(statements about the license...)
		//
		//...or an external system may call lambda on lambda to find or create lambda and be the lowest on "the stack",
		//but if external system is higher on stack, then lambda behaviors depend on it so it triggers the copyleft license without classpath exception,
		//"no proprietary lambdas" and "An independent module is a module which is not derived from or based on this library",
		//so if you make a different universal combinator whose behaviors depend on an external system, that is "derived from or based on this library".
		//Another option is to use mutableWrapperLambda andOr the "solve" opcodes to have it look for digital signatures
		//that may be generated by external systems, and it doenst care where they came from since the publickey contains the verifier algorithm,
		//in the form of a lambda, so as far as the universal combinator and license is concerned, it just did a turing-complete search for possible lambdas
		//and found them as "search results". This could happen whether an "external system" exists or not, the exact same way,
		//other than theres many possible solutions (each a lambda) to a lambda as a turing complete query (Solve* opcodes with vm.mask_* allowing solve/mutablewrapperlambda),
		//so basically you could in theory query it for any set of testcases and it would in theory give you a software which passes those testcases,
		//but in practice thats likely to have very limited and weak search abilities cuz of Halting Problem).

		//2023-6-24 generalizing this to mask_allowOther, instead of just mask_allowHypercompute. It means, store other mask bits somewhere else
		//since theres not room for them in the 256 bit ids. If you add more mask bits for whatever reason, just group them into this,
		//and this bit should be on if ANY of the other mask bits are on outside node.header int (which has 8 bits of mask including this one).
		//
		//FIXME: Might have to divide the system into hypercompute vs nonhypercompute,
		//since allowing that to change on stack would require marking halted VarargAx calls
		//individually for if they've been affected by a call of HyperRed (the only hypercompute opcode).
		//vm.mask_stackIsAllowHypercompute = 1<<4;
		//vm.mask_allowHypercompute = 1<<4;
		vm.mask_allowOther = 1;
		
		//does it nondeterministicly limit compute cycles and memory and other compute resources?
		vm.mask_stackIsAllowstackTimestackMem = 1<<1;
		
		//TODO have 2 kinds of this, one for roundoff, and one for allowing float32 instead of float64 which GLSL does?
		//You can still in theory use GPU deterministicly by doing only int math on it, such as uint24 fits in float32
		//or there may be int32 or int53(if float64) available in some systems (to automaticly transpile to)
		vm.mask_stackIsAllowNondetRoundoff = 1<<2;

		//TODO
		//GPU.js supports float32 but not float64/double. GLSL might be limited that way, or might just be slow for doubles.
		//So set this mask_stackIsAllowMutableWrapperLambdaAndSolve and mask_stackIsAllowstackTimestackMem when calling GPU.js (by transpile('gpujs')) higher on stack.
		//That will usually happen in ops.Fork which can contain other ops higher on stack.
		vm.mask_stackIsAllowReduceDoublePrecisionToFloat = 1<<3;
		
		vm.mask_stackIsAllowMutableWrapperLambdaAndSolve = 1<<4;
		
		//THIS SHOULD INSTEAD JUST BE IN the evilBit in first byte (evil good or 256(or512IfIdsAre512Bit)BitLiteralNeutral) and vm.import func,
		//and only vm.import can choose where and how to load a lambda by id, and TODO vm.import should take an idMaker param where (idMaker x) -> id of x.
		//
		//evilBit is a bit in ids, not a property of the lambdas themselves. Each lambda has 2 ids (at least, can make more kinds): evilBit being on or off.
		//If this is true, can import either. If false, only allow importing from the good namespace.
		//EvilBit is easy to parse since its evil if the first byte is vm.callPairPrefixByte_evilBitOn else (the other 255 values) are good or neutral.
		//Evilbit means "not necessarily good" and is an "antivirus quarantine" and uncensored area. It does not imply it is or is not evil.
		//vm.mask_stackIsAllowImportEvilIds = 1<<6;
		
		//FIXME allow more than 128 bits in this? allow fn/lambda in general?
		/*implement op (getLocalId128 x) gives the 4 ints (in js) x().idA x().idB x().blobFrom and x().blobTo.
		blobFrom and blobTo are both 0 in any node thats not a cbt so you only need half the id then.
		Use it in a treemap (Lambda [...] ...) of #SomeName to fn, for use as a code editor.
		Strings that fit in an id256 dont need to be hashed (which is slow, .0001 to .0000001 per second per hash id).
		Using an idmaker that uses literalinid (or (typeval "text/plain;charset=utf8" TheBits)) or hashidofanyfn,
		together as just whatever (AnIdMaker SomeFn) returns, could view code being made and deleted,
		much faster without having to hash it, but can only be
		run in vm.stackAllow* mode, some dirty mode (not purely deterministic)
		depending on salt of course for nondeterministic recursion and caching.
		The localid of a fn may differ from other times that fn is observed,
		but for the same localid in the same VM run (til wikibinator203 VM is restarted),
		there is at most 1 val, so [localid128 many-to-1 dedupedFn (within same run of VM)].
		For each localid128 there is at most 1 dedupedFn, until restart VM then those may change.
		Each VM running simultaneously can be running a different "VM run",
		so the nondeterministic localid128s should be limited to when vm.mask_stackAllowReadLocalIds (now 1 of 5 kinds of clean/dirty).
		*/
		vm.mask_stackAllowReadLocalIds = 1<<5;
		//vm.mask_reservedForFutureExpansion4 = 1<<4;
		
		//vm.mask_reservedForFutureExpansion5 = 1<<5;

		//This mask_stackIsAllowAx is the evaling/nonhalted counterpart of mask_containsAxConstraint.
		vm.mask_stackIsAllowAx = 1<<6;
		
		//Replaced vm.mask_isCbt with node.bize being vm.BIZE_OF_IS_ALL_ZEROS_CBT (-1) which was a constant that already existed 2023-6-24 (but i made that vm.varname for it that day).
		//
		//TODO get rid of this mask bit and make vm.ops.Bit1 and vm.ops.Bit0 infloop if
		//called on anything other than a cbt of same size? That would require it be more like vm.ops.VarargAx.
		//
		//True if o8 is [vm.o8OfBit0 or vm.o8OfBit1] and is a [complete binary tree] of those,
		//so even if its all bit0s and bit1s, it could still be different heights like (((1 0) (1 1)) (1 1)) is not a cbt but (((1 0) (1 1)) ((1 1)(1 1))) is.
		//[vm.o8OfBit0 or vm.o8OfBit1] can take any params, up to about 248 (todo find exact number) of them after the first 7.
		//Only includes things whose o8>127 aka has at least 7 params so op is known.
		//vm.mask_isCbt = 1<<7;
		//throw 'FIXME mask_stackIsAllowReduceDoublePrecisionToFloat. Make room for it by node.bize having another negative constant that means not a cbt?';
		
		
		//anything that implies a certain lambda call halts (need to do that to verify it, which may take infinite time and memory to disprove a false claim, but always takes finite time and memory to prove a true claim).
		//This mask_containsAxConstraint is the halted counterpart of mask_stackIsAllowAx.
		//
		//FIXME might need another bit,
		//or to modify the meaning of this one to be affected by mask_allowHypercompute
		//(so mask_containsAxConstraint WITH mask_allowHypercompute in a halted fn would mean was affected by HyperRed,
		//but mask_allowHypercompute during eval (o8 of 0) means it allows HyperRed to return instead of inflooping).
		//
		vm.mask_containsAxConstraint = 1<<7;
		
		//only includes things whose o8>127 aka has at least 7 params so op is known
		//vm.mask_containsBit0 = 1<<4;
		
		//only includes things whose o8>127 aka has at least 7 params so op is known
		//vm.mask_containsBit1 = 1<<5;
		//TODO? should it have containsBit1 for bize and sparse matrix optimization? would have to scan blobs before wrapping them, log number of scans each.
		
		//FIXME are there other masks? what about ieee754 float ops vs the nearest value?
		//What about lazyevaling bize and containsBit1 and containsBit0?
		
		
		vm.headerOfLiteral256BitsThatIsItOwnId = function(firstInt){
			let first5Bits = (firstInt>>27)&0b11111;
			if(first5Bits == 0b11110) throw 'Is not its own id cuz starts with 0b11110. vm.callPairPrefixByte_evilBitOn is that then 100 and _evilBitOff is that then 000. If those last 2 bits are not 00 then its still a literal 256 bits that fits in a 256 bit id but is not its own id as the first byte differs (counts down) so you can have id of id of id of id fits in 256 bits, but id of id of id of id of id does not so you need a callpair of 2 of 128 bits. Also TODO option for 512 bit ids for extra security.';
			
			/*let firstBitIs1 = firstInt<0;
			let o8 = firstBitIs1 ? vm.o8OfBit1 : vm.o8OfBit0;
			TODO curriesLeft... choose if bitstring goes up to around pow(2,vm.maxCurries aka 0xfff) (try for YES, todo make sure design is consistent) or just goes up to 2^31 (try for NO).
			*/
			return firstInt;
		};
		
		
		
		
		
		
		/*UPDATED PLAN FOR HEADER INT AND BIZE INT:
		headerInt is 6+2 bits for literals vs callpair, then 8 bits of o8, then 16 bits of curriesLeft (max curriesSoFar of 2^16-2) (which you can know cbt height from).
		bizeInt is 1 bit of doesntContainBit1 then 31 bits of bize31, so if its a bitstring then the int is the the bize, and if its all 0s then the bize int is -1 and the bize31 is 0.
		cbt height ranges 0 to 31. curriesLeft tells the height, since its max someconstant+32 curries for cbt (cuz max of cbt31).
		cbtN either returns (thisCbtN thisCbtN) if its param is NOT a cbtN (same height of cbt) or (thisCbtN paramCbtN) if it is, except if its a cbt31 then it returns itself regardless of param (or todo should it infloop? or return a pair of the 2 things or some other opcode or what?
		Number of curries left is always known at 7 params. opOneMoreParam should be (u uu uu uu uu uu) as in (u uu uu uu uu uu paramName (opLambda...)),
			and that includes 
		header64: 6+2+8+16+1+31.
		*/
		
		//TODO do I want something like a cbt but for powOf2 size lists in general?
		
		
		/*TODO simplify the combo of these designs:
		o8
		curriesLeft
		opOneMoreParam
		getnamedparam
		opLambda
		opmut
		opmut inside oplambda, how it uses getnamedparam (or some wrapping or variant of getnamedparam).
		*/
		
		/*vm.o8Of_opOneMoreParam = TODO;
		
		FIXME maybe o8Of_opOneMoreParam should be moved to fewer prefix opbits so curriesLeft is always known by param number 7?
			but if so, then the varName param cant be u (and same for the (opLambda...) param but since thats only useful if the param is an opLambda thats not a problem.
			It wont know curriesLeft until (opOneMoreParam paramName (opLambda...)), so maybe it should be (u uu uu uu uu uu paramName (opLambda...)) ?
			Yes do that, and get paramsLeft from (opLambda...)'s paramsLeft plus some constant.
			Or... could expand to o10, but that seems wasteful.
			Could maybe have space for storing more of paramsLeft in header. Or do I want 5 of those bits for cbt height (which ranges 0 to 31) and a few mask bits?
				Or height in general in 6 or 7 bits and the last height value means "higher than that"?
			Or curriesSoFar (instead of storing height), either way up to some max stored val that means "higher than that"?
				
		Which bits should go in the mask in header?
		containsBit1 (this could go in the high 1 bit of the bize int (whose low 31 bits are bize31), but I'd rather not have to mask bize.
		(reserved space to put the 3 kinds of clean/dirty so 3 bits?)
		(isEvaling? dont need this since o8==0 means isEvaling.
		(isCallPair_elseIsSomethingElseSuchAsA3091BitBlob_orAMulticodecMultihash_orADataurl_orAHttpMessageDatastruct?)
		
		TODO bize int will be -1 for if it contains no 1 bit? or should it be -pow(2,31)?
		-1 means is all 0s. -2 means this bize int hasnt been set yet (lazyEval it cuz wrap arrays).
		*/
		
		//vm.maxCurries = 0xffff;
		//FIXME go down to max 4095 params so an evaling can store the 4 bits that go on stack? cuz need those 4 bits. Halted lambdas are always clean (those 4 bits are 0).
		
		
		//max finite curries left is this minus 1. curries left of u/theUniversalFunc is 7 since opcode is always known at the 7th param.
		//If aNode.curriesLeft==vm.maxCurriesLeft, that node will never eval, which happens when opOneMoreParam reaches maxCurriesLeft or opInfcur starts that way.
		//so if vm.maxCurriesLeft is 0xfff (4095) then the max curries left of a lambda to call its funcBody (on the (opOneMoreParam varNameOrComment (lambda funcBody ...)))
		//is 4094 params its waiting for, not including those its already got such as (lambda funcBodyOfVarargPlus ?a 5 ?b ?c 6 7)
		//would call (funcBodyOfVarargPlus (pair (lambda funcBodyOfVarargPlus ?a 5 ?b ?c 6) 7)).
		//(lambda funcBodyOfVarargPlus ?a 5 ?b ?c) has 2 curriesLeft (TODO fixme what about the param right after funcBody
		//in (lambda funcBody onlyGetOneParamUnlessVarargToGetMore)? is it 3 curriesLeft? maybe should ignore the onlyGetOneParamUnlessVarargToGetMore param
		//similar to how a lazyeval ignores its last param, and do all params using opOneMoreParam.
		//
		//Dont change vm.maxCurriesLeft unless you can fit it in header int, and its already packed tight using every bit, or unless you want to give up hash id bits,
		//and 192 bits of hash is already not much.
		//
		//vm.maxCurriesLeft = 0xfff;
		vm.maxCurriesLeft = 0xff;
		
		//DONE: rename to vm.maxCurriesLeft? or is it maxCurries in total? See "(opOneMoreParam varNameOrComment (lambda...)) but cant add another param cuz is already at max params" comment.
		
		vm.opInfo = []; //size 256
		
		//vm.defaultIdMaker256 = 
		//vm.defaultIdMaker512 = 
		
		//Similar to the solve op, (import idMaker id)-> any x where (idMaker x)->id. Use (import idMaker) as the import func for that kind of id.
		//Any lambda can be an idMaker if when called on any lambda it always halts and returns the same size of bits such as always 256 bits or always 512 bits,
		//and the first byte should mean the same thing among all possible kinds of ids to make it easy to parse evilBit and literals.
		vm.import = function(idMaker, globalIdStringOrBits){
			throw 'TODO instantly return a Node that it tries to load async, especially if Node.L() or Node.R() etc are called on it? So can run this in a loop for efficient batch loading of nodes/lambdas?';
		};
		
		//evilBit only affects ids. Any VM can import both good and evil lambdas. Its 2 namespaces, 2 ids for the same lambda
		//(or if its 256 literal bits that fit in a 256 bit id, its in a third "neutral" namespace cuz has no header therefore no evilBit being true or false).
		//Lambdas cant know if they are good or evil since that's just an interpretation of an observer.
		//evilBit is more of a word, something you can say about a lambda. Its also part of the opensource license
		//how they are to interact with eachother.
		//To avoid accidentally defining something as "certainly good", I'm just making all the evilBits be true for now or when they are generated,
		//and users andOr whatever tools they want, can flip the evilBit to good/false in lambdas they choose when sharing them online, if they want to.
		//NEVERMIND ABOUT COULDNT MAKE THIS PART CONSISTENT[[[ UPDATE: I'm adding another bit on the stack to limit the use of the import op to "any lambda" vs "only good lambdas": vm.mask_stackIsAllowImportEvilIds. ]]]
		vm.evilBit = true;
		
		
		
		
		
		//returns 'Uint8Array' or 'Float64Array' or 'object' or 'number' or 'string' for example.
		//https://stackoverflow.com/questions/58280379/how-to-find-the-type-of-a-typedarray
		//FIXME also check (x instanceof DataView)?
		//TODO also check vm.isWikibinator203Lambda(x) and return 'fn' if so?
		vm.jsType = x=>(ArrayBuffer.isView(x) ? x.constructor.name : typeof(x));
		
		
		
		
		vm.utf8TextEncoder = new TextEncoder('utf-8');
	
		vm.utf8TextDecoder = new TextDecoder('utf-8');
		
		vm.stringToUtf8AsUint8Array = function(s){
			//log('unicode.utf8TextEncoder='+unicode.utf8TextEncoder+' '+mapToString(unicode.utf8TextEncoder));
			//log('param of encode: '+s);
			var u = vm.utf8TextEncoder.encode(s);
			//var t = typeof u;
			//if(t != 'Uint8Array') throw 'Expected TextEncoder.encode(string) to return Uint8Array but got a '+t+': '+u+': '+mapToString(u);
			return u;
		};
	
		vm.utf8AsUint8ArrayToString = function(bytes){
			return vm.utf8TextDecoder.decode(bytes);
		};
		
		//from and to are byte ranges
		vm.utf8AsUint8ArrayRangeToString = function(bytes, from, to){
			return vm.utf8AsUint8ArrayToString(bytes.subarray(this.blobFrom, this.blobTo));
		};
	
		//UPDATE: changing this from 246 to 245 cuz adding a comment param in vm.ops.Lambdo between param names list and funcBody.
		//for ops.Lambda. ops.MutLam might be 1 less (TODO verify that)?
		//(Lambda [...param names...] FuncBody ...up_to_maxLambdaParams_params...)
		//has at most 254 params (of U, which Lambda is 6th param of, and [...param names...] is 7th param of),
		//cuz 255 params of U means never evals and takes infinity params (like in Infcur).
		//You can have more lambda params but the lambda will become like Infcur,
		//and in that case its curriesLeft will be 255. 254-8=246 so maxLambdaParams is 246.
		//vm.maxLambdaParams = 246;
		//vm.maxLambdaParams = 245;
		//
		//maxLambdaParams includes the extra (EmptyTreemap GodelLessThan) param of Mutlambda, so lambda can have 1 more normal param than mutlambda.
		//Since 2023-4-12+ I'm moving the FuncBody param to the end of the params list, and removing the comment param (can use (CC comment FuncBody) in place of FuncBody),
		//im increasing from "vm.maxLambdaParams = 245;" to 247. The first 7 params (at which o8/opcode is known) + 247 is 254.
		//255 is infinity params and used in Infcur/[]/Rucfni/-=. If its more than that, it will keep taking more params, and its param getters x% y% etc wont work as expected
		//but do need to be well defined (TODO). Maybe such getters should always return U meaning doesnt have such a param?
		vm.maxLambdaParams = 247;
		
		vm.overlappingBufferInts = new Int32Array(2);
		vm.overlappingBufferDouble = new Float64Array(vm.overlappingBufferInts.buffer);
		//FIXME do they overlap as bigEndian or littleEndian, and is it per int or per byte or what? Make it consistent across all systems,
		//and I would prefer bigEndian unless most or all systems already do littleEndian in browser.
		
		//is it a wikibinator203 lambda (which is also a javascript lambda, in this VM, but may be implemented other ways in other wikibinator203 VM's)?
		vm.isLambda = function(thing){
			return thing.isWikibinator203Lambda && typeof(thing)=='function';
		};
		
		//1 (or a few?) types dont need a typeval, such as maybe 64 bits by itself would be displayed as a double/float64? Or should it be 0xffff343f24352211? what about 32 bits? would that display as an int? or float?
		vm.wrapInTypeval = function(thing){
			if(vm.isLambda(thing)) return thing;
			//let ty = typeof(thing);
			let ty = vm.jsType(thing);
			switch(ty){
				case 'string':
					//(Typeval U Utf8Bytes) is the first typeval, used to display strings that can be used as types in other typevals
					//such as (Typeval (Typeval U Utf8Bytes) SomeBytes) aka (Typeval "doubleAsCbt" SomeBytes),
					//so (Typeval "double") would be the prefix of a cbt64 of double/float64 bits. If as bitstring instead of cbt, it needs padding (1 000000....).
					console.log('Wrapping string of '+thing.length+' chars');
					//TODO cache ops.Typeval(U) and other common typevals instead of rebuilding it here (funcallcaching is slower than getting it from vm.something).
					return vm.ops.TypevalB(U)(vm.wrapUtf8Raw(thing));
				break;case 'number':
					return vm.wrapDouble(thing);
				break;case 'Uint8Array':
					
					//TODO optimize if its 2**22 bytes (such as a 1024x1024x4 byte graphics) then could store it in half the size
					//without padding, but would need a different contentType to say theres no padding.
					//return vm.typeBytes(vm.CbtOfBytes(vm.padBytes(thing)));
					let cbt = vm.CbtOfBytes(vm.padBytes(thing)); //dont use application/octet-stream here, cuz just use cbt by itself.
					//return cbt;
					return vm.typeBytes(cbt); //(TypevalB b* ThePaddedBytes)
				break;case '': //FIXME did i mean to write a nonempty string here?
				break;default:
					throw 'TODO use (ops.Typeval contentType thing), ty='+ty;
			}
		};
		
		vm.wrapUtf8Raw = function(string){
			let ty = typeof(string);
			if(ty == 'string'){
				let bytes = vm.stringToUtf8AsUint8Array(string);
				
				//adds at least 1 byte, then up to next powOf2.
				//TODO optimize using prototype and something like vm.expandBytesToPowOf2 if can ever get that to work,
				//but for now just copy it to a new byte array if need to expand it.
				bytes = vm.padBytes(bytes);
				
				//let bytes = vm.utf8AsUint8ArrayToString(string);
				return vm.CbtOfBytes(bytes);
			}else{
				throw 'TODO';
			}
			//throw 'FIXME if it fits in an id256 then need perfect dedup of var names, but not necessarily of every such node. maybe just preallocate every node up to cbt16 and make callpairs? but not every small cbt needs dedup (leave it to be lazy deduped later if ever). double/float64 will go in node.idA and node.idB (32 bits each). so in that way could perfect dedup everything up to 32 bits. Maybe could put some of the data in node.blobFrom and node.blobTo (32 bits each) but only if make sure not to use them as blob indexs if so, maybe by leaving blob as null? Id maybe like to use all 128 bits of node localId (idA idB blobFrom blobTo) to store up to 128 bits of literal data, but would need an extra bit to say if it is doing that or not, so at least 129 bits and that makes it not fit in some places. I could expand localIds to 256 bits but it would be slower. The main problem is, its far too slow to dedup all small blobs (cuz for example theyre used to copy between CPU and GPU) but cbts used as var names (like in (Lambda [varXYZ abc defg] ...) and in the code which reads their values in a Mut) must be deduped. I could add a Dedup op and have those automatically call it, or maybe just use Equals op? Or maybe just in the first param of Typeval auto dedup?';
			//stringToUtf8AsUint8Array
			//throw 'FIXME verify this does utf8 instead of utf16'
		};
		
		vm.wrapRaw = function(thing){
			if(vm.isLambda(thing)) return thing;
			switch(typeof(thing)){
			case 'number':
				throw 'TODO, since changed to Uint8Array, instead of Int32Array, as node.blob, these numbers are wrong';
				/*
				//FIXME prefix it with (typeval 'application/x-ieee754-double'). No, do that in wrapInTypeval.
				vm.overlappingBufferDouble[0] = thing;
				let ints = Int32Array.of(vm.overlappingBufferInts[0], vm.overlappingBufferInts[1]); //FIXME bigendian vs littleendian and of ints vs bytes??
				let node = new vm.Node(this, null, null, ints, 0, 2);
				console.log('FIXME put in dedup map'); //FIXME FIXME FIXME!!!!
				return vm.lambdize(node);
				*/
			break; case 'string':
				return vm.wrapUtf8Raw(thing);
				//throw 'TODO prefix it with (typeval "text/plain;charset=utf-8") ?';
			break;default:
				throw 'TODO';
			}
		};
		
		//must be either vm.wrapRaw or vm.wrapInTypeval.
		//TODO choose which is default, aka which happens when you call a fn on a non-fn
		//such as U(3.45)('hello')
		vm.wrap = vm.wrapInTypeval;

		vm.BIZE_OF_NOT_A_CBT = -3;
		vm.BIZE_OF_IS_CBT_BUT_DONT_KNOW_BIZE_YET = -2;
		//FIXME should this be split into 2 constants, one for the low 2**31 bits of bize are all 0, and one for ALL the bits are zero,
		//which can be up to vm.maxBits==2**vm.log2OfMaxBits zeros in cbt.
		//(can have up to vm.log2OfMaxBits (is 247 as of 2023-6-24, todo test cases for that, can share branches so it takes just a few kB of memory)).
		vm.BIZE_OF_IS_ALL_ZEROS_CBT = -1;
		

		//the datastruct of forest of lambdas, each with 2 childs (Node.l and Node.r, which are the lambdize wrappers of Node) where all paths lead to the universal lambda.
		//lambdize means to wrap a Node in a lambda. Node is the internal workings of a lambda.
		//
		vm.Node = function(vm,l,r,optionalBlob,optionalBlobFrom,optionalBlobTo){ //TODO rename these params to myL and myR cuz l and r are opcode names. its ok to keep this.l and this.r.
			
			//TODO "header64: 6+2+8+16+1+31", see comment about it.
			
			this.l = l;
			this.r = r;
			this.cacheFuncBody = null;
			
			let isLeaf = (!l && !optionalBlob);
			
			
			//allow isEvaling as a datastruct, but in this implementation of wikibinator203 that wont happen since
			//evalers take 3 params: vm func param, instead of making a node of func and param together.
			//In case other implementations want to have nodes that are evaling (maybe to display them on screen as a directedgraph
			//with green arrow pointing at left child, blue arrow pointing at right child, and red arrow pointing at what it evals to (itself if is halted, or another lambda,
			//or to (s i i (s i i)) if its known that it doesnt halt, for example.
			//if(isEvaling) throw 'Dont eval here, use aLambda().getEvaler() aka aNode.getEvaler()';
			
			/* 2023-6-24 changed these. removed isCbt (will put a constant in node.bize for if its not), and generalized allowHypercompute to allowOther.
			FIXME use these masks, but TODO how to choose which of them applies here? take param of Node constructor?
			vm.mask_stackIsAllowstackTimestackMem
			vm.mask_stackIsAllowNondetRoundoff
			vm.mask_stackIsAllowMutableWrapperLambdaAndSolve
			vm.mask_stackIsAllowAx
			vm.mask_reservedForFutureExpansion4
			vm.mask_reservedForFutureExpansion5
			vm.mask_isCbt
			vm.mask_containsAxConstraint
			*/
			let upTo8BitsOfMasks = 0; //FIXME, shouldnt always be 0
			let isCbt = false;
			let curriesLeft;
			let op;
			if(isLeaf){
				op = 1; //u/leaf, the universal lambda
				curriesLeft = 7; //eval again at 7 just to store what op it is in header. Nothing actually evals at 7 params.
			}else if(optionalBlob){
				if(l) throw 'Dont start with l and r if this is a wrapper of a blob/Uint8Array, type of optionalBlob is '+vm.jsType(optionalBlob);
				if(!(optionalBlob instanceof Uint8Array)) throw 'blob is not a Uint8Array';
				if(!optionalBlob.length || !vm.isPowOfTwo(optionalBlob.length)) throw 'Not a powOf2 size blob: '+optionalBlob.length;
				
				//Set vars for this lower line: this.header = vm.headerOfNonliteralCallPair(vm.evilBit, op, curriesLeft, upTo8BitsOfMasks);
				
				//op is Bit0 or Bit1, depending on first bit in the blob. Already verified its not an empty blob. Also, smallest cbt is Bit0 or Bit1.
				let firstBit = optionalBlob[0]>>7;
				op = firstBit ? vm.o8OfBit1 : vm.o8OfBit0;
				
				//blob cant get big enuf in memory to eval (see vm.maxBits), so isEvaling is false.
				let cbtHeight = vm.log2OfPowOf2ThatFitsInInt(optionalBlob.length)+3; //+3 so its bits instead of bytes
				//cbtHeight is return vm.log2OfMaxBits-this.curriesLeft();
				curriesLeft = vm.log2OfMaxBits-cbtHeight;
				//this will happen below after the if/else/else: //let bize = -2; //lazyEval of bize
				
				//throw 'TODO replace vm.mask_isCbt with node.bize being some constant if its not a cbt';
				//upTo8BitsOfMasks |= vm.mask_isCbt; //the other 7 mask bits are 0 in a cbt. Search for vm.mask_ in this file.
				isCbt = true;
			}else{
				
				let lNode = l(); //FIXME if !l (this is u) then "this.evaler = l ? lNode.evaler : vm.rootEvaler" kind of checks need to happen before calling l() to get lNode.
				let rNode = r();
				let leftOp = lNode.o8();
				let rightOp = rNode.o8();
				let lcur = lNode.curriesLeft();
				let isLessThan7Params = leftOp < 64; //including (l r)
				let leftOpLessThan128 = leftOp < 128;
				let chooseOpNowOrEval = lcur==1;
				let isNowGettingIts7thParam = leftOpLessThan128 && chooseOpNowOrEval;
				/*let rightIsCbt = (rightOp == vm.o8OfBit0 || rightOp == vm.opOfBit1);
				let isEvaling;
				let leftIsCbt = (leftOp == vm.o8OfBit0 || leftOp == vm.opOfBit1);
				if(leftIsCbt){
					let rightIsCbt = (rightOp == vm.o8OfBit0 || rightOp == vm.opOfBit1);
					let rcur = rNode.curriesLeft;
					//If its 2 cbts of same size that together dont exceed max cbt size, thats halted, just make the callpair.
					//If it would exceed max cbt size or they are different sizes of cbt or if r is not a cbt, thats evaling (TODO choose a design to infloop or replace r with l so (r r), and maybe if cbt size gets too big just put it in an infcur).
					isEvaling = !rightIsCbt || (lcur!=rcur) || lcur==4094; //curriesLeftRaw of 4095 means infinite curriesLeft, and cbt never reaches that (todo put in infcur instead?)
				}else{
					isEvaling = !leftOpLessThan128 && chooseOpNowOrEval;
				}*/
				let isEvaling = !leftOpLessThan128 && chooseOpNowOrEval;
				
				if(isEvaling){
					op = 0;
				}else if(leftOpLessThan128){
					//curriesLeft = lcur-1;
					
					//less than 7 params so far. Op is not known until 7 params. Shift the op bits up 1 and put a 0 (if r is leaf) or 1 (if r is not leaf) in
					if(rightOp == 1){
						op = leftOp<<1; //r is leaf, put in 0
					}else{
						op = (leftOp<<1)|1; //r is not leaf, put in 1
					}
				}else{
					//if l and r are 2 cbts of same size that would not exceed max cbt size, that happens here, just make the callpair. or it may not be a cbt here.
					op = leftOp; //copy op from l child since op is known at 7 params and is just copied from left child after that
				}
				
				if(isLessThan7Params){
					curriesLeft = lcur-1; //at least 1
					//TODO?? use throw vm.o8ToNumParams[this.op];? it could be computed either way, but lcur-1 is probably faster???
				}else if(isNowGettingIts7thParam){
					/*opOneMoreParam has been removed, and will use Lambda [...up to around 250 var names...] instead
					if(op == vm.o8Of_opOneMoreParam){ //the only vararg op
						//(opOneMoreParam varNameOrComment lambdaCallToAddParamTo), not including (opOneMoreParam varNameOrComment lambdaCallToAddParamTo ...params...) since lambdaCallToAddParamTo is the 7th param and varNameOrComment is the 6th param
						//(neither can be u/leaf since that would be a different op, and I designed it to always know the number of params by the 7th param.
						let varNameOrComment = lNode.r;
						let lambdaCallToAddParamTo = r;
						let lambdaNumCurries = lambdaCallToAddParamTo().curriesLeft();
						//let newNumCurries = lambdaCallToAddParamTo().curriesLeft()+1;
						if(lambdaNumCurries < vm.maxCurries){ //(opOneMoreParam varNameOrComment (lambda...)) as usual, and later (opOneMoreParam varNameOrComment (lambda...) ...put more params here...).
							curriesLeft = lambdaNumCurries+1; //if curriesLeft==vm.maxCurries, then it will never eval, similar to infcur
						}else{
							//UPDATE: theres no opOneMoreParam, and use Lambda or MutLam for vararg (up to around 250 params) instead.
							//(opOneMoreParam varNameOrComment (lambda...)) but cant add another param cuz is already at max params.
							//also cant infloop or throw like running out of gas, cuz the number of params is always known at the 7th param,
							//and in that case (lambda...) is the 7th param, and varNameOrComment is the 6th param.
							//So what should this do? It shouldnt call the funcBody found deep inside the (lambda funcBody ...),
							//cuz funcBody expects the number of params to match the number of opOneMoreParam its inside plus a certain constant (TODO which constant? 5? 8? etc),
							//and it would be confusing for other lambdas to get a (opOneMoreParam varNameOrComment (lambda...))
							//as a param if it has less curriesLeft than as if it hadnt reached the max.
							//I dont want to infloop (aka throw cuz would run out of gas if did the infloop) cuz 7 params should be halted.
							//I dont want to use curriesLeft==vm.maxCurries to mean an unlimited number of curries left (never eval)
							//cuz theres some number of curries already (a variable amount cuz some came in).
							//I choose this design: rename vm.maxCurries to vm.maxCurriesLeft, and if aNode.curriesLeft==vm.maxCurriesLeft that means infinity (never eval).
							newNumCurries = vm.maxCurries; //never eval, similar to infcur
						}
					}else{ //not vararg. set curriesLeft to the constant number of params the op takes, of 128 ops (o8 is 128 to 255).
						curriesLeft = vm.opInfo[op].curriesLeft;
					}*/
					console.log('about to set curriesLeft. op='+op);
					switch(op){
						case vm.o8OfLambdo:case vm.o8OfMutlambdo:{ //Lambdo has 7 params. Lambda has 6.

							/*the old design before 2023-4-11
							//(Lambda [...paramNames...] FuncBody ...params...).
							//Lambda is 6th param (an opcode despite those normally are at param 7,
							//cuz list size of [...paramNames...]
							//affects how many params (Lambda [...paramNames...] FuncBody) takes.
						
							//let rCur = rNode.cur(); //TODO optimize only call this after checking "rNode.o8() === vm.o8OfInfcur".
							//let isValidLambdaParamNames = true;
							let paramsListSize;
							if(rNode.o8() === vm.o8OfInfcur && (paramsListSize=rNode.cur()-7) <= vm.maxLambdaParams){
								//Lambda of 0..vm.maxLambdaParams params.
								//Example: If rCur (renaming that to paramsListSize)
								//is 3, then... (Lambda [a b c] FuncBody valA valB valC)
								// --> (FuncBody [(Lambda [a b c] FuncBody valA valB) valC]).
								//curriesLeft in code below is of (Lambda [a b c]).
								//rCur is curries so far of [a b c] which is of (Infcur a b c) which is 10
								//since []/Infcur, like most opcodes, is 7 curriesSoFar, plus 3 for a b c.
								//curriesLeft should be 4 in that case: FuncBody valA valB valC.
								//curriesLeft = 1+paramsListSize; //FuncBody then paramVals.
								curriesLeft = 2+paramsListSize; //Comment then FuncBody then paramVals. 2022-8-27 added comment param in vm.ops.Lambdo.
								console.log('Lambda getting its 7th param a [], curriesLeft='+curriesLeft+' paramsListSize='+paramsListSize);
							}else{
								//Lambda similar to Infcur, takes infinity params, never evals.
								curriesLeft = 255; //infinity. 1..254 params are a specific number of params. 0 is evaling.
							}
							*/

							//(λ [...paramNames... FuncBody] ...params...), and FuncBody may be (CC [a comment] FuncBody) if u want a comment.
							//Lambda is 6th param (an opcode despite those normally are at param 7,
							//cuz list size of [...paramNames...]
							//affects how many params (Lambda [...paramNames...] FuncBody) takes.

							//Mutlambda/Λ (6 params) and Mutlambdo (7 params) is similar to Lambda/λ (6 params) and Lambdo (7 params).
							//The differences are Mutlambda takes an extra param thats for example (EmptyTreemap GodelLessThan) AND that it uses a (Ns (LamNs...) thatTreemap)
							//which is a recursive namespace, compared to Lambda just uses the (LamNs...).
							
							//(Λ [...paramNames... FuncBody] ...params... (EmptyTreemap GodelLessThan)), and FuncBody may be (CC [a comment] FuncBody) if u want a comment.
						
							/*let listSize; //in new design 2023-4-12+ FuncBody goes at end of params list so its 1 bigger.
							let numExtraParams = op==vm.o8OfMutlambdo ? 1 : 0; //the extra (EmptyTreemap GodelLessThan) param or not.
							let numLessParams = 1; //cuz FuncBody, in (λ_or_Λ [a b c... FuncBody]), is not 1 of the params.
							let paramsAlready = 7; //cuz o8/opcode is known at 7 params, and here is in the "}else if(isNowGettingIts7thParam){".
							if(rNode.o8() === vm.o8OfInfcur && ((listSize=rNode.cur())-numLessParams+numExtraParams-paramsAlready) <= vm.maxLambdaParams){ //FIXME add test case for lambda and mutlambda of max and near max and exceeding max number of params
							*/

							if(rNode.o8() != vm.o8OfInfcur){
								//Lambda similar to Infcur, takes infinity params, never evals. FIXME should this infloop? No, it cant, cuz must always be halted at 7 params of U.
								curriesLeft = 255; //infinity. 1..254 params are a specific number of params. 0 is evaling.
							}else{
								let listSize = rNode.cur()-7;
								let numNormalParams = listSize-1; //exclude FuncBody at end of list.
								let numExtraParams = op==vm.o8OfMutlambdo ? 1 : 0; //the extra (EmptyTreemap GodelLessThan) param or not.
								curriesLeft = numNormalParams+numExtraParams;
								if(curriesLeft > vm.maxLambdaParams){
									//If curriesLeft is 255 then it will never call FuncBody, just keep taking more params / currying.
									//This is allowed for math completeness but is not useful as a lambda/mutlambda.
									curriesLeft = 255;
								}
								console.log('Lambda (case vm.o8OfLambdo:case vm.o8OfMutlambdo:) getting its 7th param a [], curriesLeft='+curriesLeft+' isTooManyParamsWillNeverCallFuncBodyJustKeepTakingParams='+(curriesLeft==255)+' hasExtraNamespaceParam='+( op==vm.o8OfMutlambdo)+' vm.maxLambdaParams='+vm.maxLambdaParams);
							}
						}break;default:{
							curriesLeft = vm.opInfo[op].curriesLeft;
						}
					}
					

					if(vm.o8IsOfCbt(op)){
						//is Bit0 or Bit1
						//throw 'TODO replace vm.mask_isCbt with node.bize being some constant if its not a cbt';
						//upTo8BitsOfMasks |= vm.mask_isCbt;
						isCbt = true;
					}

				}else{ //is more than 7 params, so op is copied from left child. need to check if its about to eval
					if(isEvaling){
						curriesLeft = 0; //in case lcur-1 is -1 which could happen if l (left lambda child) isEvaling.
					}else{
						if(lcur == vm.maxCurriesLeft){
							curriesLeft = lcur; //never eval. This happens when enough opOneMoreParam of opOneMoreParam... reach vm.maxCurriesLeft or opInfcur starts at vm.maxCurriesLeft.
						}else{
							curriesLeft = lcur-1; //r is the next curry, so count 1 less
						}
					}

					if(lNode.isCbt() && rNode.isCbt() && (lcur==rNode.curriesLeft())){
						//is a complete binary tree of Bit0 andOr Bit1
						//throw 'TODO replace vm.mask_isCbt with node.bize being some constant if its not a cbt';
						//upTo8BitsOfMasks |= vm.mask_isCbt;
						isCbt = true;
					}
					//Its not the max cbt size yet, cuz !isEvaling.
					/*
					That design choice is, not every call of Bit0 or Bit1 is a cbt.
					DONE: choose if cbt called on cbt of different size (much smaller than max cbt size) should infloop
					to prevent [o8 being Bit0 or Bit1] from happening in a non-cbt,
					BUT maybe its ok for that to happen since the mask_isCbt bit will still know if its cbt.
					Since curriesLeft is used to store cbt height (with a little math, not directly),
					then its not allowed to eval before curriesLeft is 1 and its called on 1 more param.
					*/
				}

			}
			//DONE but todo test: set curriesLeft and o8 and make header from it. the above code doesnt always set those. header also contains 6+2 bits for literal cbt256.
			
			
			this.header = vm.headerOfNonliteralCallPair(vm.evilBit, op, curriesLeft, upTo8BitsOfMasks); //32 bits
			
			/*TODO order the params of headerOfNonliteralCallPair the same order they occur in the header int,
				and include the 4 bits of cleanvsdirty, and these: containsBit1 containsBit0, containsAxConstraint, containsNonBitOtherThanLessThan7Params,
				and I might want another cleanvsdirty bit for IEEE754 float32 and float64 ops but only if they can be defined deterministicly,
				so that even if Math.sin Math.tanh etc are nondeterministic roundoff, that there would be some
				welldefined correct answer of 128 bits to 64 bits (double,double)->double, vs the only welldefined way (at max cleanness) being whatever double
				value is closest to if it had been done with infinite precision. Some (double,double)->double seem to always match between
				javascript and java and across multiple computers (and should be tested in more systems),
				such as double*double and double+double, but double/double seems less reliable.
				In any case, an unlimited number of new "opcodes" can be added to the system,
				and optimized by making a node.evaler for a group of them or for each (and such evaler may be made of the opmut (uses vm.Mut datastruct)
				so could in theory be compiled at runtime to javascript instead of needing to modify the VM).
				If need another bit, there is a bit left in bize int since only low 31 bits of bize are stored, but maybe that bit should say that theres more bits or not,
				but thats unnecessary since curriesLeft is stored, and since max bitstring size is (approx, todo verify) 2^247-1 bits (vm.maxCurriesLeft is 255),
				the bit of is there more bits of bize is already knowable from [curriesLeft and o8].
				Or that high bit in bize int is used for lazyEval of bize, so dont put anything there.
			*/
				
			//int. 6 bits are 111110 for is literal self or not. then 2 bits (00 is callpair, else is literal 256 bits).
			//then o8. then curriesLeftOr255ToMeanMoreThan254. then up to 8 mask bits (containsBit1, etc).
			//this.header = vm.headerOfNonliteralCallPair(vm.evilBit, op, upTo8BitsOfMasks, curriesLeft); //FIXME check if it is a literal (globalId256 does not start with 11111000).
			//this.header = 0; //FIXME need to compute header as int
			
			//bize means bitstring size. a bitstring is a range in a cbt (which is always a powOf2 number of bits, the range below the last 1 bit. If its all 0s, then this.bize becomes -1.
			//FIXME thats only 2^31 bits and past that, as it goes up to vm.maxBitstringSize (which is big enough to store the whole internet in a single cbt, in theory) so to get size
			//of it you have to compute it with lambdas without this.bize optimization. Theres Bize31 Bize53 and Bize256 opcodes (todo exactly which names/sizes of those? look in addOp).
			//FIXME instead of -1 meaning the following comments about bize, use containsBit1 containsBit0, containsNonBitOtherThanLessThan7Params.
			//(containsBit1 was removed from headerA cuz wasnt room, but can still be a cached var in vm.Node js object, i think i did that todo verify).
			//int. bize is max 31 bits. past that it will make linkedlist or something (todo) of cbts.
			//this.bize = -2; //32 bits. //-2 means dont know bize yet (lazyEval). -1 means its all 0s or is not a cbt. nonnegative means its the low 31 bits of the index of the last 1 bit. FIXME TODO write code to deal with that in blob and normal callpairs
			//FIXME set bize
			//
			this.bize = isCbt ? vm.BIZE_OF_IS_CBT_BUT_DONT_KNOW_BIZE_YET : vm.BIZE_OF_NOT_A_CBT; //32 bits. //-2 means dont know bize yet (lazyEval). -1 means its all 0s or is not a cbt. nonnegative means its the low 31 bits of the index of the last 1 bit. FIXME TODO write code to deal with that in blob and normal callpairs
			
			//TODO if l is vm.typeDouble and r is a cbt64 whose bits are an IEEE754 normed double
			//(allowing subnormals but not allowing nonnormed nans or nonnormed infinities)
			//then set idA and idB to those double bits. Make sure idA and idB (how incIdAB starts)
			//are in 1 of those nonnormed nan/infinity ranges so this doesnt overlap it.
			//
			vm.incIdAB(); //change vm.lastIdA and vm.lastIdB.
			//The 4 ints of localId, used in hashtable (TODO that would be more efficient than {} with string keys for https://en.wikipedia.org/wiki/Hash_consing
			this.idA = vm.lastIdA|0; //32 bits. //|0 might make it easier for javascript JIT compiler to know its an int, even though vm.lastIdA always will be unless you make more than 2 pow 64 ids (or is it, more than 2 pow 53 or 2 pow 48, cuz some of that range is double values and i want an idA concat idB to contain every possible double.
			this.idB = vm.lastIdB|0; //32 bits.
			this.blobFrom = optionalBlobFrom | 0; //32 bits. //int, a byte index in this.blob (inclusive).
			this.blobTo = optionalBlobTo | 0; //32 bits. //int, a byte index in this.blob (exclusive).
			
			
			//UPDATE: this will be a Uint8Array. You can still use it as a Float32Array, Float64Array, Int32Array, etc, like new Float32Array(this.blob.buffer)
			//OLD: this.blob = TODO null or Int32Array.
			//The id of the blob is this.idA with this.idB. Every node with that id64 has the same blob and may differ in blobFrom and blobTo.
			this.blob = optionalBlob; //TODO null or Int32Array.
			
			//this.idString;
			
			//u/theUniversalFunction's evaler is vm.rootEvaler, but everything else copies its evaler from its l child, which may be optimized evalers added later.
			//
			//quote from farther below...
			//
			/*//This optimization makes it fast enough to use l(lambda) and r(lambda) instead of lambda().l and lambda().r.
			//dont FuncallCache things that instantly return and cant make an infinite loop.
			l().pushEvaler((vm,func,param)=>(param().l));
			r().pushEvaler((vm,func,param)=>(param().r));
			vm.identityFunc().pushEvaler((vm,func,param)=>param);
			//TODO change to someFunc.n.stuff, instead of someFunc().stuff .
			//vm.identityFunc().pushEvaler((vm,func,param)=>{ console.log('optimizedIdentityFunc'); return param; });
			//TODO pushEvaler for isleaf etc
			*/
			
			//get evaler from l if there is a l yet. There is no l yet if this is leaf OR if this is a blob wrapping a Uint8Array.
			//If blob, it can add l and r later, when observed, but that would be inefficient to create a tree of nodes for every part of the blob
			//since (TODO) most big blobs are used as blobs directly by evalers.
			this.evaler = l ? l.n.evaler : vm.rootEvaler;
			
			//this.prototype.prototype = vm;

		};

		vm.cacheEval_ = {};

		//Example: cacheEval('(x,y)=>(x+y*y+3)')(10,20) returns 413, and if u call it again, it return faster cuz only compiles '(x,y)=>(x+y*y+3)' the first time.
		vm.cachedJsEval = function(jsCode){
			let ret = vm.cacheEval_[jsCode];
			if(ret === undefined){
				console.log('vm.cacheEval evaling jsCode=\n'+jsCode)
				ret = vm.cacheEval_[jsCode] = eval(jsCode);
				console.log('vm.cacheEval firstEval evaled to:'+ret);
			}
			return ret;
		},

		//FIXME they might still exist in what fn.n.pushEvaler creates using this (see vm.evalers), and this might only make them garbcolable but they not get garbcoled?
		vm.clearAllCachedJsEval = function(){
			console.log('vm.clearAllCacheEval');
			vm.cacheEval_ = {};
		};

		/*throw 'how should ops.Jit choose which of vm.evalers.evalerByJsTranspile vs vm.evalers.evalerByGpujsTranspile vs vm.evalers.rootEvaler to use? Can it be decided only by (Jit func) or does it need the whole (Jit func param) since param might need a ns param but get something else, or it might be a wrongly sorted Treemap, etc. Can ops.Jit be designed so that it gets enuf info to choose an evaler first? Maybe take a param named ignore (Jit func param ignore)??? Also I might want a variant of evaler that takes a vm.Mut param so can use multiple of them together. Maybe call it Subevaler.';
		I want Mutevaler similar to evaler, except it takes a vm.Mut as param so can break the jit evaling into parts if i want to later.
		I want the normal evaler for js transpile stored in (Jit func) and just verify param is a valid ns. Theres an opcode named TreeVerify or something like that,
		but todo generalize it for ns in general.
		I want gpujs transpiler planned, as its just a small change of using this.threads.x etc or something like that, and wrapping it and setting ndrange sizes etc.
		other than that it should be same as code generated by js transpiler except only the subset that does everything as local vars including array params
		and is done from Fork op. Or (Jit (Fork ...))?
		*/

		vm.newEmptyMut = function(fn){
			//FIXME include whichOpmutIndex?
			return new vm.Mut(fn);
		};

		//loopBody(key,val) is called on each, in breadth-first order. If its not a Treemap and of the right number of params etc, FIXME what will it do?
		//It can also be an EmptyTreemap.
		vm.treemapForKeyVal = function(treemap, loopBody){
			if(treemap.n.o8()==vm.o8OfTreemap){
				vm.treemapForKeyVal(treemap.n.leftTree(), loopBody);
				let k = treemap.n.treeKey();
				let v = treemap.n.treeVal();
				loopBody(k,v);
				vm.treemapForKeyVal(treemap.n.rightTree(), loopBody);
				return;
			}
			if(treemap.n.o8()==vm.o8OfEmptyTreemap){
				return;
			}
			throw 'Not a Treemap or EmptyTreemap';
		};
		
		vm.newExtraEmptyJsMap = ()=>{
			let ret = {};
			//if(!ret.__proto__){
			//	throw 'before removed prototype, does not have __proto__';
			//}
			Object.setPrototypeOf(ret,null);
			//if(ret.__proto__){
			//	throw 'has __proto__';
			//}
			return ret;
		};
		
		/* A replacement for Mut.fnToMut, but this goes in a rootM (which is a js {}) instead. That {} is the this.
		//given a fn/lambda, returns the Mut wrapper for it in this same whichOpmutSpace, and adds it to that whichOpmutSpace js {}.
		vm.Mut.prototype.fnToMut = function(fn){
			return this.keyNs[fn] || (this.keyNs[fn] = new vm.Mut(fn,this.keyNs));
		};*/
		vm.fnToMut_for_rootM = function(fn){
			return this[fn] || (this[fn] = new vm.Mut(fn,this));
		};
		
		vm.toString_for_rootM = function(){
			let s = '[rootM ';
			let first = true;
			for(let id in this){
				if(first) s + ', ';
				s += id+':'+this[id];
				first = false;
			}
			s += ']';
			return s;
		};

		//fn to js {} containing instances of vm.Mut
		//Key is ''+mut aka mut.keyFn.n.id(). Val is mut.
		//Same thing that happens in "rootM[keyAsMut] = keyAsMut;" where rootM is a js {} and keyAsMut is a vm.Mut.
		//OLD: fn to instance of vm.Mut.
		vm.startMut = function(fn){
			//const mut = vm.newEmptyMut(fn);
			//const mut = vm.newEmptyMut(U);
			const rootM = vm.newExtraEmptyJsMap(); //instead of vm.newEmptyMut(U)
			rootM.fnToMut = vm.fnToMut_for_rootM;
			rootM.toString = vm.toString_for_rootM;
			vm.treemapForKeyVal(fn, function(key,val){
				//throw 'FIXME do mut[key] = the vm.Mut instance whose primarykey is (whichOpmutIndex,key), or make one like that if not exist.';
				//mut[key] = key; //FIXME this should happen in generated code too, but should be a func in mut to do it the first time a mut[key] is used? Cuz it becomes mut[key.toString()] which is its id.
				//FIXME rootMut[key] = rootMut.fnToMut(key); //just in the current root mut, 1 level deep.


				//TODO merge duplicate code. splitting this cuz "if(vm.isFullD(key))" skips the D/$.
				//let keyAsMut = rootM.fnToMut(key); //just in the current root mut, 1 level deep.
				//rootM[keyAsMut] = keyAsMut;
				if(vm.isFullD(key)){
					key = key.n.R(); //.n.R() gets x from x$ (aka from (D x)).
					let keyAsMut = rootM.fnToMut(key); //just in the current root mut, 1 level deep.
					rootM[keyAsMut] = keyAsMut;

					//rootM[key].d = val.n.d(); //double/float64/num
					//rootM[key.n.R()].d = val.n.d(); //double/float64/num. .n.R() gets x from x$ (aka from (D x)).
					rootM[keyAsMut].d = val.n.d(); //double/float64/num. .n.R() gets x from x$ (aka from (D x)).
				}else if(vm.isFullP(key)){
					//FIXME why is it key.n.R() in isFullD but key directly here?
					let keyAsMut = rootM.fnToMut(key); //just in the current root mut, 1 level deep.
					rootM[keyAsMut] = keyAsMut;
					rootM[keyAsMut].p = val; //fn
				}else if(vm.isFullBl(key)){
					let jsArray = val.n.typedArrayMutableCopy(); //throws if its not that or not one of the array types it supports or bize is not a multiple of primitive size or its too big
					console.log('startMut, key='+key+' val='+val+' val converted to jsArray = '+jsArray+' and its length is '+jsArray.length);
					
					/*
					//FIXME why is it key.n.R() in isFullD but key directly here?
					let keyAsMut = rootM.fnToMut(key); //just in the current root mut, 1 level deep.
					*/
					key = key.n.R(); //.n.R() gets x from x@ (aka from (Bl x)).
					let keyAsMut = rootM.fnToMut(key); //just in the current root mut, 1 level deep.

					rootM[keyAsMut] = keyAsMut;
					rootM[keyAsMut].arr = jsArray; //Uint8Array, Int32Array, Float32Array, Float64Array, etc. Mutable array. Will copy to immutable (TypevalB ...) in vm.endMut.
					//throw 'mut[key].arr = if val is a TypevalC or TypevalB, such as a wrapper of bytes of double[] or of int[] etc, then copy that typedblob to array.';
				}else{
					 throw 'TODO startMut key='+key+' val='+val;
				}
				
				/*
				//throw 'FIXME do mut[key] = the vm.Mut instance whose primarykey is (whichOpmutIndex,key), or make one like that if not exist.';
				//mut[key] = key; //FIXME this should happen in generated code too, but should be a func in mut to do it the first time a mut[key] is used? Cuz it becomes mut[key.toString()] which is its id.
				mut[key] = mut.fnToMut(key); //just in the current root mut, 1 level deep.
				if(vm.isFullD(key)){
					mut[key].d = val.n.d(); //double/float64/num
				}else if(vm.isFullP(key)){
					mut[key].p = val; //fn
				}else if(vm.isFullBl(key)){
					throw 'mut[key].p = if val is a TypevalC or TypevalB, such as a wrapper of bytes of double[] or of int[] etc, then copy that typedblob into mut[key].arr.';
				}else{
					 throw 'TODO startMut key='+key+' val='+val;
				}*/
			});
			return rootM;
		};

		//UPDATE: changing rootM to be a js {}, not an instance of vm.Mut.
		//
		//instance of vm.Mut (a root mut) to fn. ns is normally an (EmptyTreemap SomeComparator),
		//and the comparator as of 2023-7-5 is GodelLessThan
		//but TODO use (EmptyTreemap (IdThenGodelLessThan AnIdMaker)) after port idMaker to be a fn.
		vm.endMut = function(rootM, ns){
			if(!ns){
				//much less efficient than (EmptyTreemap (IdThenGodelLessThan AnIdMaker)),
				//but there can be different kinds of idMaker so just use GodelLessThan as default comparator.
				ns = ops.EmptyTreemap(ops.GodelLessThan);
			}
			console.log('FIXME endMut, rootM='+rootM+' ns='+ns);
			//return U; //FIXME copy it to a Treemap, or whatever startMut got (was it a Ns with 2 Treemaps?)
			let muts = vm.allMuts(rootM);
			let put = function(k,v){
				console.log('endMut k='+k+' v='+v);
				ns = vm.put(k,v,ns);
			};
			//FIXME should rootM[rootM] be included?
			//FIXME should root be a js {} instead of a Mut? If its a Mut, should it be the Mut for U?
			for(let mut of muts){
				//put(k,v);
				//FIXME if there was no .d set (FIXME TODO leave it undefined?) then dont copy that to ns.
				if(mut.hasD()){
					//FIXME should key be ops.D(mut.keyFn) or mut.keyFn ?
					put(ops.D(mut.keyFn), mut.d); //Example: map x$ to 5.67
				}
				if(mut.hasP()){
					//FIXME if .p was set to U by default, but never set to anything after that, should it be put in ns?
					//Maybe only put it in ns if val is not U since ns will return U anyways if key is not there?
					//FIXME should key be ops.P(mut.keyFn) or mut.keyFn ?
					//defaulted .p to undefined... if(mut.p !== U){
						put(ops.P(mut.keyFn), mut.p); //Example: map x% to Pair(S)(T)
					//}
				}
				//FIXME if its a shared empty array that was put there by default, to avoid .arr[x] throwing, dont put that in ns.
				//But how to detect that?
				if(mut.hasBl_hasArr_todoRenameArrToBl()){
					put(ops.Bl(mut.keyFn), mut.arr);
				}
				//mutX[mutY] = mutZ; loop over pairs of mutY mutZ.
				//Since that uses mutY.n.id() cuz js {} only has string keys,
				//use "rootM[mutY] = mutY" (FIXME what if that changes during running the transpiled code?)
				//to convert from mutY.n.id() to mutY.
				for(let id in mut){
					//TODO merge duplicate code between this and mut.allMuts
					let val = mut[id];
					if(vm.isMut(val)){
						let key = rootM[id]; //FIXME?
						//regardless of how deep of (GoO (GoO (OO a b) c) d) aka a/b/c/d,
						//its only stored using (OO object keyInObject).
						put(ops.OO(mut.keyFn)(key.keyFn), val.keyFn);
					}
				}
			}
			
			//FIXME do TreemapNorm here, but thats not working yet. TreemapNorm will turn a Treemap
			//into a complete binary tree except the deepest row may not be full and is filled from left side rightward.
			//FIXME what if ns is a (Ns sometreemap othertreemap) or other kind of ns?
			//Im planning to do that with one treemap being private and the other being public,
			//so calculations that can only access public stuff wouldnt get the private treemap inside the param.
			//TODO ns = ops.TreemapNorm(ns);
			console.log('FIXME not doing TreemapNorm');
			
			return ns;
		};

		vm.transpilerPutsCodeIntoBrowserDebugger = true;
		
		vm.rootMutSymbol = 'Ω';

		/*not all the evalers. Some are created later in this vm file as small literals like this...
		l.n.pushEvaler((vm,func,param)=>(param.n.l || param.n.L())); //param.n.L() triggers lazyEval of viewing the left or right half of range of a wrapped Uint8Array.
		r.n.pushEvaler((vm,func,param)=>(param.n.r || param.n.R()));
		vm.identityFunc().pushEvaler((vm,func,param)=>param); //FIXME wrap param in case its number or string
		*/
		vm.evalers = {
			rootEvaler: vm.rootEvaler,

			//if it returns null, then lambdize uses evaler.prev instead.
			evalerThatAlwaysReturnsNull: (vm,func,param)=>null,
		
			//TODO use fn.n.transpile('js') -> string of js code, or throws if it doesnt know how to optimize that.
			//This is a very important evaler/transpiler.
			evalerByJsTranspile: (vm,func,param)=>{
				//FIXME dont want to transpile something so small or few loops etc, that generating the code would take longer than doing it in interpreted mode.
				//Maybe there should be an OptimizationHint opcode, or something like that.
				//Or could try running it with some max vm.stackTime vm.stackMem etc, and if that takes too much, then transpile it and start over (allowed cuz stateless).
				//Or some other way????
				
				if(func.n.curriesLeft() > 1){
					return vm.cp(func,param);
				}

				/*
				//TODO only allow valid Treemap and EmptyTreemap? Or also allow Ns of 2 of those?
				//
				//TODO optimize dont check !param.n.isValidNs() if func.n.cache_for_evalerByJsTranspile===vm.evalers.evalerThatAlwaysReturnsNull?
				if(!param.n.isValidNs()){ //cuz the vm.Mut optimization used in js transpile always takes a ns (Ns, LamNs, Treemap, EmptyTreemap, Lambda, or Mutlambda) param.
					return null; //lambdize will use thisEvaler.prev instead, or thisEvaler.prev.prev.prev... however far down is the first that is .on and returns a fn instead of null.
				}*/
				
				
				if(!func.n.cache_for_evalerByJsTranspile){
					try{
						//let jsCode = func.n.transpile('js');
						let funcBody = func.n.R(); //get (DE ,x <* x$ x$>) from (Jit (DE ,x <* x$ x$>) (DE ,x ,20 (EmptyTreemap GodelLessThan))), for example.
						let jsCode = funcBody.n.transpile('js');
						//Example: "λ.λpix.arr[(λ.λDλi.d+λ.λDλgreen.d)] = (255&(λ.λDλx.d+(λ.λDλy.d*λ.λPλage.p.n.d())));"
						//created by js transpiling "(Blie ,pix +n[i$ green$] <& ,255 +n[x$ *n[y$ age%]]>)", at least with the algorithm 2023-7-1.
						//NO: jsCode = '(vm,func,param)=>{ '+jsCode+' }'; //FIXME
						//Use λ as param instead, the root vm.Mut of this mut call.
						//It modifies the λ param, doesnt return anything.
						jsCode = vm.rootMutSymbol+'=>{\n'+jsCode+'\nreturn '+vm.rootMutSymbol+';\n}';
						if(vm.transpilerPutsCodeIntoBrowserDebugger){
							let madeUpFileName = func.n.id()+'.js';
							jsCode += '\n//# sourceURL='+madeUpFileName;
						}
						console.log('Transpiled to js code, and about to eval:\n'+jsCode);
						func.n.cache_for_evalerByJsTranspile = vm.cachedJsEval(jsCode);
					}catch(e){
						if(vm.letJitThrowInsteadOfReturningNullToUseOtherJitInstead){
							throw e;
						}
						func.n.cache_for_evalerByJsTranspile = vm.evalers.evalerThatAlwaysReturnsNull; //lambdize will use thisEvaler.prev instead
					}
				}
				//return func.n.cache_for_evalerByJsTranspile(vm,func,param); //FIXME transpiled code must start with '(vm,func,param)=>' ANDOR should it be a func that processes a vm.Mut?
				//FIXME?? verify param is just a Treemap, or if its a Ns with 2 Treemaps, 1 for private and1 for public, then optimize js scopes for that? Can js scopes do that?
				//FIXME verify func ends with norming the Treemap (to complete binary tree except last row may be incomplete so it computes the same thing as rootEvaler, but faster),
				//but if func doesnt already do that, then cant add it here, just dont run this optimization (return null so .prev evaler (maybe vm.rootEvaler) will do it instead).
				let rootM = vm.startMut(param); //a js {}
				console.log('new rootM='+rootM);
				func.n.cache_for_evalerByJsTranspile(rootM); //modifies rootM
				console.log('modified rootM='+rootM);
				return vm.endMut(rootM);
			},

			//https://github.com/benrayfield/jsutils/blob/master/src/arvox/gpujs_browser_mitLicense_2.11.0.js
			//or
			//newer version from https://github.com/gpujs/gpu.js
			//
			//This is a very important evaler/transpiler.
			evalerByGpujsTranspile: (vm,func,param)=>{
				throw 'TODO';
			},

			/*
			//TODO make this using the js in https://github.com/benrayfield/jsutils/blob/master/src/TinyGLSLGraphicsEditor.html and call evalerByJsTranspile recursively?
			evalerByGlslTranspile: (vm,func,param)=>{
				throw 'TODO';
			},

			//https://github.com/benrayfield/lazycl which uses the LWJGL2 OpenCL API.
			//This would require an ajax call (unless this is running outside a browser in same OS Process as it?) to where the LazyCL is running.
			evalerByLazyCLTranspile: (vm,func,param)=>{
				throw 'TODO';
			},

			//TODO????
			//This would require an ajax call (unless this is running outside a browser in same OS Process as it?) to where the LazyCL is running.
			evalerByPythonTranspile: (vm,func,param)=>{
				throw 'TODO';
			},*/

		};
		
		/*
		//a certain pushEvaler((vm,func,param)=>{...}) optimization, that either uses vm.Mut to do so, else runs in pure interpreted mode.
		//FIXME this doesnt check
		vm.Node.prototype.isMutOptimizable = function(){
			if(this.isMutOptimizable_ === undefined){
				FIXMEFIXME
			}
			return this.isMutOptimizable_;
		};*/
		
		vm.Transpiler = function(lang){
			this.lang = lang;
			//this.root = 'λM';
			//this.root = 'λ'; //conflicts with ops.Lambda whose abbrev is λ
			this.root = vm.rootMutSymbol;
			//it appears that js vars can be utf16 chars that dont need surrogate pair, so can be Ω but not 🐸

			//UPDATE: its string keys, not fn keys. The string is whatever transpiler.idOf(fn) returns, which names the var.
			//OLD...
			//key is fn (TODO verify its deduped). Value is number (or undefined means 0, and 0 may also occur, TODO?)
			//TODO should key be a string instead? this is only gonna generate strings in code, that will be transpiler.idOf(fn).
			//Use this with pushLocalVar(fn) and popLocalVar(fn) and countLocalVar(fn).
			//this.localVars = new Map();
			this.localVars = {}; //the faster kind of js map {}, cuz keys are strings not fns.
		};
		
		//number of calls of pushLocalVar minus number of calls of popLocalVar, of that fn.
		//vm.Transpiler.prototype.countLocalVar = function(fn){
		vm.Transpiler.prototype.countLocalVar = function(str){
			//return this.localVars.get(fn)|0;
			return this.localVars[str]|0;
		};

		//Do this in Fo, While, and other places local vars (such as "let x" in generated js) are defined in a js {...} namespace.
		//Since js has namespace blocks in namespace blocks, the same var name can be pushed multiple times, and should be popped multiple times.
		//This will be optimized by ops.Ns doing recursive namespaces in generated js code (by node.getEvaler()(vm,func,param)) that uses vm.Mut.
		//This will NOT be used in GPU.js or GLSL code since thats a simpler kind of code.
		//TODO: JS eval and GPU.js_andOr_GLSL are the 2 main optimizations.
		//vm.Transpiler.prototype.pushLocalVar = function(fn){
		vm.Transpiler.prototype.pushLocalVar = function(str){
			this.localVars[str] = this.countLocalVar(str)+1;
		};
		
		//vm.Transpiler.prototype.popLocalVar = function(fn){
		vm.Transpiler.prototype.popLocalVar = function(str){
			//can become 0, instead of going back to undefined.
			this.localVars[str] = this.countLocalVar(str)-1;
		};
		
		/*
		vm.Transpiler.prototype.canTranspile = function(fn){
			return true; //FIXME shouldnt always be true, but for now i want to get it into the codeTranspiledOut textarea in treeUI while Im working on it.
		};*/
		
		vm.Transpiler.prototype.num = function(fn){
			return this.transpile(fn, 'num');
			/*if(this.lang == 'js'){
				if(fn.n.isDouble()){
					return ''+fn.n.d(); //Example: '2.34'
				}else{
					throw 'TODO not a double';
				}
			}else{
				throw 'TODO lang='+this.lang;
			}*/
		};
		
		/*vm.Transpiler.prototype.gNum = function(fn){
			//return this.transpile(fn, 'gNum', 0); //FIXME remove gThing and just use thing with slev
			//return 'TODO_gNum';
			if(vm.isFullT(fn)){
				return this.num(fn.n.R()); //get 5 from ,5
			}else{
				return this.gKey(fn)+'.d';
			}
		};*/

		vm.Transpiler.prototype.bit = function(fn){
			return this.transpile([fn],'bit');
		};
		
		/*vm.Transpiler.prototype.gBit = function(fn){
			//return this.transpile(fn,'gBit');
			return this.transpile([fn], 'gBit', 0); //(tr,[fnA fnB fnC...],ty,sLevel) //FIXME remove gThing and just use thing with slev
			//return 'TODO_gBit_fn='+fn;
		};*/

		//See comment of Transpiler.localVarNameOf.
		vm.Transpiler.prototype.idOf = function(fn){
			return fn.n.id(); //Example: λhello or 
		};

		//In a transpiled code, every fn has both an idOf and a localVarNameOf, but normally only 1 of those is used.
		//Example: in (Fo y ,4 LoopBody) the y is used as y$ so you get tr.localVarNameOf(ops.D('y')), cuz vm.eval('y$')==vm.eval('(D y)'),
		//and in (DE ,y ...) its setting the value of key y$.
		vm.Transpiler.prototype.localVarNameOf = function(fn){
			let id = this.idOf(fn);
			if(id.startsWith('λDλ')){
				//FIXME verify this doesnt overlap any existing var names in vm.Mut or js String or js Number or js Float32Array etc,
				//or its prototype or other java objects used during transpiling and vm.Mut evaling.
				return id.substring(3)+'$'; //The y in (Fo y ,4 LoopBody) transpiles to y$
			}
			return id+'_loc';
		};

		//The literal Mut for that key, intead of gKey which evals it first. Not sure if this will end up being used, and just use gKey always?
		vm.Transpiler.prototype.key = function(fn){
			let varName = this.idOf(fn); //string
			if(this.countLocalVar(varName)){ //is a localVar
				return varName;
			}else{
				return this.root+'.'+varName;
			}
			
			//throw 'TODO dont call this.transpile here. Return it all from here.';
			//return this.transpile(fn,'key');
		};

		//gKey aka GET KEY is a string of code that for example in js returns an instance of vm.Mut.
		//aMut[bMut][cMut] = aMut[aMut][bMut][aMut][zMut], for example. They're maps named by deduped fn, and fn.n.id() is used in toString so u can do that.
		//So gKey can be chained.
		//Mut can be optimized (TODO) to hardcode those string ids in some cases so aMut.idOfBMut.idOfCMut would be faster in js.
		//Mut also has a few fields for (P x) aka x%, and (D x) aka x$, and (GetTypedBlob x) aka x@.
		vm.Transpiler.prototype.gKey = function(fn){
			//FIXME this might work for 1 level deep but not for a/b/c$ kind of stuff.
			//return this.root+'['+this.idOf(fn)+']';
			//return this.root+'['+this.key(fn)+']';
			/*throw 'FIXME a/b/c/d needs recursive get key with a base case. tr.key(fn) only does a base case, and not the right base case for this. It has GoO and OO in it.'+
				' Should there be a "gKey" ty? Ty is what kind of code it should return, not how to generate it, so NO. Might need another param of transpile,'+
				' or maybe just put an if/else in gKey that does GoO vs OO differently, and DGo vs D differently etc (but that would be tr.num vs tr.gNum maybe (just do GoO and OO here?). '+
				' fn='+fn;
			*/
			//vm.isAnyFullGo = fn=>(vm.isAnyFullGoOf2Params(fn)||vm.isAnyFullGoOf1Param(fn)|;
			//vm.isAnyFullGoOf1Param = fn=>(vm.isFullDGo(fn)||vm.isFullBlGo(fn)||isFullPGo(fn));
			//vm.isAnyFullGoOf2Params = vm.isFullGoO;
			if(vm.isFullGoO(fn)){
				let getKeyA = fn.n.L().n.R();
				let literalKeyB = fn.n.R();
				//return this.()+'.'+this.transpile(literalKeyB);
				return this.gKey(getKeyA)+'.'+this.idOf(literalKeyB);
			}else if(vm.isFullT(fn)){
				return this.key(fn.n.R()); //get x from ,x
			}else{
				return this.root+'['+this.key(fn)+']';
			}
			



			//return this.transpile([fn], 'gKey'); //FIXME remove gThing and just use thing with slev
			//return 'TODO_gNum';
		};
		
		vm.Transpiler.prototype.gStatement = function(fn){
			return this.transpile(fn, 'gStatement');
			//return 'TODO_gStatement';
		};

		vm.Transpiler.prototype.statement = function(fn){
			//return this.transpile(fn, 'statement');
			return this.transpile(fn, 'ns'); //replacing 'statement' with 'ns' cuz it means returns a namespace.
			//return 'TODO_gStatement';
		};

		//throw 'TODO change order of transpile params so the params that are most often not given (left as undefined) are later params. Dont have fns be last.';
		//Or maybe it should be a tree that has sLevel per node?

		//An S list must be at least size 2. If this is not a call of S, returns this.lam as the leftmost base-case in the S list.
		vm.Node.prototype.getFirstInSList = function(){
			if(!vm.isCallOfS(this.lam)){
				return this.lam;
			}
			//if(!vm.isCallOfS(this.lam)){
			//	throw 'This is not a call of S. op='+this.opName();
			//}
			if(this.paramsSoFar() != 2){
				throw 'This is not an S2. paramsSoFar='+this.paramsSoFar()+' fn='+this.lam;
			}
			//return this.L().n.getFirstInSList();
			return this.L().n.R().n.getFirstInSList(); //get x from ((S x) y). x may be another (S a b) like in (S (S a b) y) aka ((S ((S a) b)) y)
		};

		//If its a <...> or {...} then returns contents of that list, removing the S'es. If its a (...) then returns contents of that curryList, which didnt have S'es.
		//If its anything else, such as 2.34 or [a b c], returns a list of that 1 thing.
		vm.Transpiler.prototype.fnToJsList = function(fn){
			if(vm.isS2(fn)){
				//return fn.n.sListToJsList();
				return vm.sListToJsList(fn);
			}else if(fn.n.cur() < 7){
				return [fn];
			}else{
				return vm.curryListToJsList(fn); //TODO make curryListToJsList and sListToJsList both be vm.Node/fn instance funcs, or both be vm.thing funcs, but not 1 of each which is confusing.
			}
			/*let keyGetter; // a/b/c or ,x etc.
			let valGetter; // ,5 or <+ <* ret$ ret$> ,1> or <+ x$ ,1> etc.
			if(vm.isS2()){
				let sList = vm.sListToJsList(fn);
				keyGetter = sList[1];
				valGetter = sList[2];
			}else{
				keyGetter = fn.n.L().n.R(); // a/b/c or ,x etc.
				valGetter = fn.n.R(); // ,5 or <+ <* ret$ ret$> ,1> or <+ x$ ,1> etc.
			}
			*/
		};


		/* Moving this into Transpiler.transpile. Always do this.
		//In the js transpiler of addOp('DE'), for example, this is used to get local var name (tr.localVarName(fn)) if its just 1 var deep (unlike (OO a b) or (GoO (OO a b) c))
		//cuz localVars are only for fields in vm.Mut such as the double/float64 val in it, the Bl/blob in it, the P/dupFn in it,
		//and maybe a few other things about it that may not be fields.
		vm.Transpiler.prototype.transpileOrLocalVar = function(fn,ty){
			if(this.countLocalVar(fn)){
				if(ty){
					throw 'TODO verify ty matches the kind of localVar it is, such as (D y) aka y$ compiles to number/double in js code, fn='+fn+' ty='+ty;
				}
				return tr.localVarName(fn);
			}else{
				return this.transpile(fn,ty);
			}
		};*/
		
		//fn is any wikib lambda, but will throw if doesnt know how to transpile it, in which case you should run calls of that fn in interpreted mode instead.
		//Normally the fn takes a namespace param (Ns, LamNs, Treemap, EmptyTreemap, Lambda, or Mutlambda).
		//ty is 1 of 'bit', 'num', 'ptr'(TODO should it be called that or 'key'? 'key' is already being used.), 'statement'.
		vm.Transpiler.prototype.transpile = function(fn,ty,optionalPrefix){
			console.log('transpile fn='+fn+' ty='+ty);
			//if(!ty) throw 'No ty sucn as "bit", "num", "ptr", or "statement". Ptr returns a vm.Mut instance.';
			let defaultTy = fn.n.defaultTranspileType();
			if(!ty) ty = defaultTy;
			if(this.countLocalVar(fn) && ty==defaultTy){
				//throw 'TODO verify ty matches the kind of localVar it is, such as (D y) aka y$ compiles to number/double in js code, fn='+fn+' ty='+ty;
				return this.localVarNameOf(fn);
			}else{
				if(fn.n.cur() < 7){
					throw 'cur()='+fn.n.cur()+' but must be at least 7 to transpile, but TODO there may be cases where such a fn should be a literal fn. fn='+fn;
				}
				let func;
				let isSList;
				if(vm.isCallOfS(fn)){ //<+ x% <* ,2 y%>> for example.
					isSList = true;
					if(!vm.isS2(fn)){
						throw 'Is a call of S but is not an S2. fn='+fn;
					}
					//TODO optimize. since will call fnToJsList, could get firstInSList from index 0 of that.
					let firstInSList = fn.n.getFirstInSList(); //Get SomeFunc from <SomeFunc a b c...>
					if(vm.isFullT(firstInSList)){
						func = firstInSList.n.R(); //get SomeFunc from ,SomeFunc aka (T SomeFunc)
					}else{
						throw 'This optimization doesnt do {...}, only <...> and (...) and [...], cuz {GetFunc ...} dynamicly gets the func after code is generated, and <...> knows func before code is generated. <a b c> is {,a b c}. fn='+fn;
					}
				}else{
					isSList = false;
					func = fn.n.getOpOrThrow(); //get L of L of L... until has 7 params. Already know it has at least 7 params.
				}
				let transpileFunc = func.n.getTranspileFuncTheSimpleDirectWay(this.lang); //doesnt check for <...> or {...}. Thats why firstInSList is done in the IF above.
				if(!transpileFunc){
					throw 'No transpileFunc for lang='+this.lang+' func='+func+' A transpileFunc can be added if you search for addOp(\''+func.n.opName()+'\' in'+
						' Wikibinator203VM.js and put it in the langs:{ '+this.lang+': (tr,fn,ty,optionalPrefix)=> ... The tr is a Transpiler. The fn is the func= this error just said or that with more curried (by L and R) params. ty='+ty;
				}
				if(transpileFunc.length != 4){
					throw 'transpileFunc.length must be 3 (tr,fn,ty,optionalPrefix) but is '+transpileFunc.length;
				}
				if(!transpileFunc){
					throw 'Theres no transpileFunc for lang='+this.lang+' and ty='+ty+' and op='+func.n.opName()+' func='+func+' and outerOp='+fn.n.opName()+' outerFn='+fn;
				}
				let jsList = this.fnToJsList(fn); //TODO cache this js list and make it a vm.Node instance func? Might lead to garbcol problems.
				let observedParams = jsList.length-1;
				let paramsBeforeItWouldEval = func.n.curriesLeft();
				//If isSList then the <> or {} adds an extra param such as a namespace.
				//If !isSList then -1 (as in paramsBeforeItWouldEval-1) cuz last param is a namespace (Ns, LamNs, Treemap, EmptyTreemap, Lambda, or Mutlambda),
				//that the generated code emulates using vm.Mut objects (if lang is 'js'),
				//starting by copying such a Ns LamNs Treemap etc into a set of vm.Mut objects (whose primaryKey is (whichOpmutIndex,anyFn)),
				//running the generated code, then copying the vm.Mut's to another Treemap etc. The Treemap etc must be normed to a completeBinaryTreeExceptMaybeLastLevel
				//since the optimization loses the info of order of changes which would affect internal avl tree shape,
				//so this optimization should throw (meaning run in interpreted mode instead) if the namespace/Treemap/etc to be returned is not already the code to norm
				//it that way. The fn to be optimized must give a return value that does not depend on the internal Treemap shape except during the middle calculations.
				let paramsNeededForThisOptimization = isSList ? paramsBeforeItWouldEval : (paramsBeforeItWouldEval-1); //FIXME is this off by 1? Since <> seems to work in basic tests 2023-6-18, its probably correct.
				if(observedParams != paramsNeededForThisOptimization){
					throw 'Nothing wrong with the code, just dont know how to optimize it yet. Wrong number of params, cant do this optimization, so you should run it in interpreted mode instead.'+
						' observedParams='+observedParams+' paramsNeededForThisOptimization='+paramsNeededForThisOptimization+' paramsBeforeItWouldEval(func.n.curriesLeft())='+
						paramsBeforeItWouldEval+' isSList(adds an extra param if so)='+isSList+' func='+func+' fn='+fn;
				}
				//Now we know that if transpileFunc calls fnToJsList, that it gets the correct number of params so doesnt need extra logic for if it didnt which could get complex.
				console.log('Calling transpileFunc='+transpileFunc);
				return transpileFunc(this, fn, ty, optionalPrefix); //returns string of code of this.lang language (such as 'js'). Only used the func var to find transpilerFunc. Always give it the outer fn.
				//TODO Mutlambda should compile to a js function(x,y,z...){...} lambda stored in a js var somewhere and used 1 or more times, in generated code.
			}
		};

		//ty/type is optional. if you leave it off, it guesses at the type. Example types are 'num', 'bit', 'statement', or maybe gStatement gBit etc.
		//TODO (tr,[fnA fnB fnC...],ty,sLevel)
		/*vm.Transpiler.prototype.transpile = function(fns,ty,slev){
			if(!ty) ty = 'unknown';
			let transpileFunc = fns[0].n.getTranspileFuncTheSimpleDirectWay(this.lang);
			if(transpileFunc.length != 4){
				throw 'transpileFunc.length must be 4 (tr,ty,sLevel,[fnA fnB fnC...]) but is '+transpileFunc.length;
			}
			if(!transpileFunc){
				throw 'Theres no transpileFunc for lang='+this.lang+' and ty='+ty+' and op='+fns[0].n.opName()+' fns='+fns;
			}
			console.log('Calling transpileFunc='+transpileFunc);
			//return transpileFunc(this,fn,type); //returns string of code of this.lang language (such as 'js')
			//return transpileFunc(this, ty, slev, fns); //returns string of code of this.lang language (such as 'js')
			return transpileFunc(this, fns, ty, slev); //returns string of code of this.lang language (such as 'js')
		};*/
		
		/*
		//type is optional. if you leave it off, it guesses at the type. Example types are 'num', 'bit', 'statement', or maybe gStatement gBit etc.
		vm.Transpiler.prototype.transpile = function(fn,type){
			if(!type) type = 'unknown';
			let transpileFunc = fn.n.getTranspileFuncTheSimpleDirectWay(this.lang);
			if(!transpileFunc){
				throw 'Theres no transpileFunc for lang='+this.lang+' and type='+type+' and op='+fn.n.opName()+' fn='+fn;
			}
			console.log('Calling transpileFunc='+transpileFunc);
			return transpileFunc(this,fn,type); //returns string of code of this.lang language (such as 'js')
		};*/

		vm.defaultTranspileLang = 'js';
		

		/*throw 'FIXME how for transpile to call itself recursively in the (tr,fn,ty)=>{...} funcs defined in addOp such as addOp of DE? Might need to reuse the same Transpiler/tr object cuz it may organize types var names, var types, limiting stackTime, etc??? I want a ptr to tr, but in vm.Node.prototype.transpile there isnt one.';
		Do I want inside '(tr,fn,ty)=>{...}' for it to call tr.gStatement tr.gNum etc? Or do I want it to call instance funcs on the fn?
		Should I simplify this, less funcs calling funcs, to keep the (tr,fn,ty) able to call recursively? Should it recursively call tr.transpile(innerFn,chosenTypeForInner)?
		*/
		
		//'num', 'bit', 'ns', 'key', 'statement' (UPDATE: replacing that with 'ns'), 'uknown', etc.
		//TODO Some ops will override this default by giving a different ty in transpile func for some of their params,
		//instead of using those params defaultTranspileType.
		vm.Node.prototype.defaultTranspileType = function(){
			//return this.opInfo().compileMap.ty;
			return this.opInfo().compileMap.tyFunc(this.lam);
		};
		
		//Throws or returns string of code (such as lang='js' for javascript) that takes 1 param thats a namespace (such as a Ns, LamNs, Treemap, or EmptyTreemap)
		//and returns a namespace, or in some cases returns a double or dupFn in general.
		vm.Node.prototype.transpile = function(optionalLang, optionalType){
			let lang = optionalLang || vm.defaultTranspileLang;
			//let ty = optionalType || (vm.isS2(this.lam) ? 'gStatement' : 'statement');
			//let ty = optionalType || 'statement'; //get rid of g* anything. No gNum gBit gStatement.
			let ty = optionalType || this.defaultTranspileType();
			//TODO cache this in pushEvaler
			let transpiler = new vm.Transpiler(lang);
			//return transpiler.transpile([this.lam], ty, 0); //(tr,[fnA fnB fnC...],ty,sLevel)
			return transpiler.transpile(this.lam, ty);
		};

		/*
		//Throws or returns string of code (such as lang='js' for javascript) that takes 1 param thats a namespace (such as a Ns, LamNs, Treemap, or EmptyTreemap)
		//and returns a namespace, or in some cases returns a double or dupFn in general.
		vm.Node.prototype.transpile = function(optionalLang, optionalType){
			let lang = optionalLang || vm.defaultTranspileLang;
			let type = optionalType || 'unknown';
			//TODO cache this in pushEvaler
			let transpiler = new vm.Transpiler(lang);
			/*if(!transpiler.canTranspile(this.lam)){ //FIXME should this be the same call as doing the transpile and just have it throw if it cant?
				throw 'Cant transpile this fn to '+lang;
			}*
			return transpiler.transpile(this.lam, type);
			
			/*if(lang == 'js'){
				//vm.Node.prototype.jsCodeForMutOptimization = function(){
				//if(!this.isMutOptimizable()) throw 'Cant cuz not isMutOptimizable';
				
				FIXMEFIXME
			}else{
				throw 'TODO lang='+lang;
			}*
		};*/
		
		//does it, anywhere inside it, contain a Bit1 (even if its not a cbt, such as if its a linkedlist that contains cbts etc)?
		//In wikibinator203, a bitstring is a cbt that contains any Bit1, and its all the bits before the last Bit1. If its all Bit0, not a bitstring.
		vm.Node.prototype.containsBit1 = function(){
			if(this.cache_containsBit1 !== undefined){
				return this.cache_containsBit1;
			}else if(this.r){ //may have blob or not
				//End recursion at Bit1 or Bit0 (where cbtHeight is 0, or if it starts with less params (of U, ops are at param 7) then not contain Bit1.
				
				if(this.hasMoreThan7Params()){
					return this.cache_containsBit1 = (this.l.n.containsBit1() || this.r.n.containsBit1()); //recurse into childs
				}else if(this.hasLessThan7Params()){
					return this.cache_containsBit1 = false;
				}else{
					return this.cache_containsBit1 = (this.lam==vm.ops.Bit1);
				}
				/*
				let h = this.cbtHeight();
				if(h > 0) return this.cache_containsBit1 = (this.l.n.containsBit1() || this.r.n.containsBit1()); //recurse into childs
				if(h < 0 || this.lam==vm.ops.Bit0) return this.cache_containsBit1 = false; //is Bit0 or too few params of U to be a bit.
				return this.cache_containsBit1 = this.lam==vm.ops.Bit1;
				//return this.cache_containsBit1 = ((this.lam==vm.ops.Bit1) || (this.cbtHeight()>=0 && this.l.n.containsBit1() && this.r.n.containsBit1()));
				*/
			}else{ //lacking childs means has blob (though might redesign that to allow sparse loading of parent across network before childs)
				//TODO optimize by reusing the blob loop in node.Bize and node.containsBit1.
				for(let i=this.blobFrom; i<this.blobTo; i++){
					if(this.blob[i]) return this.cache_containsBit1 = true;
				}
				return this.cache_containsBit1 = false;
			}
		};
		
		//returns a Uint8Array that is backed by this.blob if it exists (dont modify, cuz immutable)
		//or is a copy of the data if its stored as call pairs (that may contain smaller blobs or go all the way down to Bit0 and Bit1.
		//If theres a fraction of a byte at the end, does not include it. Does not include padding. If its not a cbt, returns empty Uint8Array.
		//blobFrom and blobTo must always be powOf2 aligned, so no need to check if it starts in the middle of a byte.
		//FIXME add a param (raw, being true or false), or have 2 funcs like this, one for viewing as TypevalC (view as no padding) and one for viewing as TypevalB (view as has padding)?
		vm.Node.prototype.bytes = function(raw){
			//TODO cache this, similar to cache_containsBit1 but it would be cache_bytes? Might make it harder to garbcol.
			if(!this.isCbt()){
				throw 'Not a cbt/blob: '+this.lam;
			}
			let cbtSize = this.cbtSize();
			let byteLen = raw ? cbtSize : this.Bize()>>3; //FIXME what if its not a multiple of 8 bits?
			if(cbtSize > 2**30){
				throw 'Too big to get bytes, cbtSize='+cbtSize;
			}
			if(this.blob){	
				//return this.blob.subarray(this.blobFrom, this.blobTo);
				return this.blob.subarray(this.blobFrom, this.blobFrom+byteLen); //exclude padding. Padding starts with the last 1 bit (then 0s until next powOf2 number of bits).
			}else{
				let ret = new Uint8Array(byteLen);
				for(let i=0; i<byteLen; i++){
					ret[i] = this.byteAt(i);
				}
				return ret;
			}
		};

		//same as .bytes() but nonbacking and mutable.
		vm.Node.prototype.bytesMutableCopy = function(raw){
			//TODO cache this, similar to cache_containsBit1 but it would be cache_bytes? Might make it harder to garbcol.
			if(!this.isCbt()){
				throw 'Not a cbt/blob: '+this.lam;
			}
			if(this.blob){
				let cbtSize = this.cbtSize();
				let byteLen = raw ? cbtSize : this.Bize()>>3; //FIXME what if its not a multiple of 8 bits?
				if(cbtSize > 2**30){
					throw 'Too big to get bytes, cbtSize='+cbtSize;
				}
				//let byteLen = this.Bize()>>3; //FIXME what if its not a multiple of 8 bits?
				let ret = new Uint8Array(byteLen);
				//TODO optimize by using a copy range func in Uint8Array.
				for(let i=0; i<byteLen; i++) ret[i] = this.blob[this.blobFrom+i];
				return ret;
			}else{
				return this.bytes(raw);
			}
		};

		//Returns a Uint8Array, Int32Array, Float32Array, or Float64Array, etc, or throws if is not such an array (such as if this is (Pair S T) or [hello world]).
		//If this is for example (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) then returns a Uint8Array copy of it.
		vm.Node.prototype.typedArrayMutableCopy = function(){
			let bytes;
			if(!vm.isFullTypeval(this.lam)){
				throw 'Not a TypevalB or TypevalC: '+this.lam;
			}
			//let cbt = this.R();
			//if(!cbt.isCbt()){
			//	throw 'Typeval content is not a cbt/blob: '+cbt;
			//}
			let cbt = this.R();
			if(this.o8() == vm.o8OfTypevalB){ //since o8 is copied from L child starting at 8th param of U, cbt.n.o8()==this.o8() if this is a typedBlob
				bytes = cbt.n.bytesMutableCopy();
			}else if(this.o8() == vm.o8OfTypevalC){
				bytes = cbt.n.bytesMutableCopy(true);
			}else{
				throw 'Not a TypevalB or TypevalC: '+this.lam;
			}
			//let contentType = this.L().n.R(); //Example: d for double or d* for double array or i for int or b for byte or b* for ubyte array.
			let type = this.L(); //Example: (TypevalB d*) for double array. d* is contentType and could also be image/jpeg etc.
			if(type == vm.typeBytes){
				return bytes;
			}else if(type == vm.typeInts){
				if(bytes.length&3){
					throw 'bytes.length='+bytes.length+' is not a multiple of 4 so cant be an Int32Array';
				}
				return new Int32Array(bytes.buffer);
			}else if(type == vm.typeFloats){
				if(bytes.length&3){
					throw 'bytes.length='+bytes.length+' is not a multiple of 4 so cant be an Float32Array';
				}
				return new Float32Array(bytes.buffer);
			}else if(type == vm.typeDoubles){
				if(bytes.length&7){
					throw 'bytes.length='+bytes.length+' is not a multiple of 8 so cant be an Float64Array';
				}
				return new Float64Array(bytes.buffer);
			}else{
				throw 'TODO type='+type;
			}
		};

		vm.isValidCanvas = function(fn){
			return vm.isFullCanvas(fn);
			/*
			//FIXME also check this stuff, from tree UI...
			let magnifyHeight = fn.n.llr(4).n.d();
			let magnifyWidth = fn.n.llr(3).n.d();
			let dataHeight = fn.n.llr(2).n.d();
			let dataWidth = fn.n.llr(1).n.d();
			let bytesCbt = fn.n.R();
			let bytes = bytesCbt.n.bytes();
			let useFirstNBytes = dataHeight*dataWidth*4;
			if(bytes.length < useFirstNBytes){
				throw bytes.length+'== bytes.length < useFirstNBytes == '+useFirstNBytes+', FIXME this should just not display as canvas, since its a valid fn but need more param checking. make an isValidCanvas func.';
			}*/
		}

		//FIXME is this off by about 1? check what cbtHeight means. Is cbtSize 2**cbtHeight? i think so but verify
		vm.Node.prototype.fitsInBize31 = function(){
			return !this.isCbt() || (this.cbtHeight() < 32);
		};
		
		//updates this.bize if its -2. -2 means has not computed it yet. -1 means is not a cbt. 0 means is either all 0s or is a 1 then 0s,
		//since a bitstring is padded by a 1 then 0s until a powOf2 size.
		//low 31 bits of bize (bitstring size), aka the index of the last 1 bit if its a cbt.
		vm.Node.prototype.Bize = function(){
			if(this.bize == vm.BIZE_OF_IS_CBT_BUT_DONT_KNOW_BIZE_YET){
				if(this.isCbt()){
					//is cbt so set bize to index of first Bit1 (0 to this.cbtSize()-1) or 0 if this is all Bit0.
					//Since it is cbt, both childs have same cbtSize (half of mine), unless cbtSize is 1.
					let h = this.cbtHeight();
					if(h == 0){
						this.bize = 0; //this is Bit1 or Bit0.
					}else if(h < 32){ //fits in the low 31 bits of this.bize.
						if(this.r){ //may have blob or not
							if(this.r.n.containsBit1()){ //add l cbtSize to r bize cuz the last Bit1 exists and is in r
								let rHeight = h-1;
								this.bize = (2**rHeight)+this.r.n.Bize();
							}else{ //use l bize cuz the last Bit1 (if any) is in l
								this.bize = this.L().n.Bize();
							}
						}else{ //lacking childs means has blob (though might redesign that to allow sparse loading of parent across network before childs)
							//TODO optimize by reusing the blob loop in node.Bize and node.containsBit1.
							let setBize = vm.BIZE_OF_IS_ALL_ZEROS_CBT; //unless find a Bit1
							for(let i=this.blobTo-1; i>=this.blobFrom; i--){
								if(this.blob[i]){
									//0..32 zeros if it was int. 24..32 zeros since its a byte. But actually 24..31 zeros since its not byte 0.
									let leadingZeros = Math.clz32(this.blob[i]);
									setBize = (i<<3)|(leadingZeros-24); //i bytes then 0-7 bits before the last Bit1.
									break;
								}
							}
							this.bize = setBize;
							//BIZE_OF_IS_ALL_ZEROS_CBT: this.bize = 0; //no Bit1 in this.blob. Bize of 0 also would happen (in some other code) if the first bit is 1 and all other bits are 0.
						}
					}else{ //between cbt2**32 and cbt2**247
						throw 'fixmefixme';
					}
				}else{ //node.bize of this val means not cbt
					this.bize = vm.BIZE_OF_NOT_CBT;
				}
			}
			return this.bize;
		};
		
		//returns double 0 or 1.
		//OLD: returns 0 (vm.ops.Bit0 or any non-cbt or is outside this cbt range) or 1 (vm.ops.Bit1).
		//This is very slow compared to using Node.blob, .blobFrom, and .blobTo directly.
		vm.Node.prototype.bitAt = function(bitIndex){
			if(this.blob){ //a Uint8Array.
				let byteIndex = bitIndex>>3;
				if(byteIndex < this.blobFrom || this.blobTo <= byteIndex) return 0; //outside cbt range
				let byt = this.blob[this.blobFrom+byteIndex];
				return (byt>>(7-bitIndex))&1;
			}else{
				if(!this.isCbt()) return 0;
				let siz = this.cbtSize(); //is a powOf2 num of bits from 1 to 2**vm.log2OfMaxBits. aka 2**this.cbtHeight()
				if(bitIndex < 0 || siz <= bitIndex) return 0; //outside cbt range
				if(siz == 1) return (this.lam == vm.ops.Bit1) ? 1 : 0; //is Bit0 or Bit1
				if(bitIndex < siz/2){
					return this.l.n.bitAt(bitIndex);
				}else{
					return this.r.n.bitAt(bitIndex-siz/2);
				}
			}
		};
		
		//If this is not a cbt, returns 0. Else recurses into childs to find the cbt8 at that byteIndex (such as 5 is bitIndexs 40 to 47).
		//If goes past the borders of the cbt, returns 0.
		vm.Node.prototype.byteAt = function(byteIndex){
			if(this.blob){ //a Uint8Array.
				if(byteIndex < this.blobFrom || this.blobTo <= byteIndex) return 0; //outside cbt range
				return this.blob[this.blobFrom+byteIndex];
			}else{
				if(!this.isCbt()) return 0;
				let siz = this.cbtSize(); //is a powOf2
				if(siz < 8){
					throw 'TODO fill with 0s where its outside range. part might be inside range.';
				}else{
					if(byteIndex < 0 || siz/8 <= byteIndex) return 0; //outside cbt range
					if(siz == 8){
						let one = vm.ops.Bit1;
						//this.l()==this.n. TODO switch to .n everywhere for efficiency.
						return(
							 ((this.l.n.l.n.l==one)?128:0)
							|((this.l.n.l.n.r==one)?64:0)
							|((this.l.n.r.n.l==one)?32:0)
							|((this.l.n.r.n.r==one)?16:0)
							|((this.r.n.l.n.l==one)?8:0)
							|((this.r.n.l.n.r==one)?4:0)
							|((this.r.n.r.n.l==one)?2:0)
							|((this.r.n.r.n.r==one)?1:0)
						);
					}else{
						if(byteIndex*8 < siz/2){
							return this.L().n.byteAt(byteIndex);
						}else{
							return this.R().n.byteAt(byteIndex-siz/16); //siz/8 is size in bytes. half that.
						}
					}
				}
			}
		};
		
		vm.Node.prototype.intAt = function(intIndex){
			//FIXME endian?
			return (this.byteAt(intIndex*4)<<24)|(this.byteAt(intIndex*4+1)<<16)|(this.byteAt(intIndex*4+2)<<8)|this.byteAt(intIndex*4+3);
		};

		vm.Node.prototype.floatAt = function(floatIndex){
			throw 'TODO use int bits as float, of this.intAt(floatIndex)';
		};
		
		vm.Node.prototype.doubleAt = function(doubleIndex){
			//FIXME endian?
			return vm.twoIntsToDouble(this.intAt(doubleIndex*2),this.intAt(doubleIndex*2+1));
		};

		//This must be a typedBlob, not a cbt, but containing such a cbt at this.n.R().
		//throws if this is not a full typedBlob, such as (TypevalB d* thedoublesbytes). If its array of bytes, ints, floats, doubles, etc, returns value at index, cast to double.
		//if optionalWriteVal then returns a fn forkedited to have that val at the given index, unless its out of range then infloops.
		//FIXME should this keep TypevalC if it started as a TypevalC? For now 2023-7-24 i'm converting to TypevalB either way, if theres an optionalWriteVal, cuz thats what vm.wrap does.
		vm.Node.prototype.at = function(index, optionalWriteVal){
			if(optionalWriteVal === undefined){ //read (cast to) double at index
				let type = this.L();
				let cbt = this.R();
				if(type == vm.typeBytes){
					return cbt.n.byteAt(index);
				}else if(type == vm.typeInts){
					return cbt.n.intAt(index);
				}else if(type == vm.typeFloats){
					return cbt.n.floatAt(index);
				}else if(type == vm.typeDoubles){
					return cbt.n.doubleAt(index);
				}else if(type == vm.typeBits){
					return cbt.bitAt(index) ? 1 : 0;
				}else if(this.isCbt()){
					throw 'This must be a typedBlob, not a cbt. this.lam='+this.lam;
				}else{
					throw 'TODO type='+type;
				}
			}else{
				let jsArray = this.typedArrayMutableCopy(); //Examples: Float64Array Float32Array Int32Array Uint8Array etc
				//TODO cast index to int and check its range? Or infloop if its not an integer?
				jsArray[index] = optionalWriteVal;
				return vm.wrap(jsArray); //puts it in (TypevalB d*) if its a double array, (TypevalB i*) if its int array, etc.
			}
		};

		// typedBlob len, in units of doubles, ints, floats, bytes, or whatever primitive array type. Divides bize by this.
		//Does not give length for other datastructs than primitive arrays, even if theres a contentType for them, such as json arrays, bson,
		//or whatever else may be there. Make diff funcs for that at user level (not part of VM). FIXME what if this is a TypevalC (no padding, so doesnt use bize)?
		//FIXME this cant go up to vm.maxBits and still be a double, unless its always a powOf2 which it usually isnt.
		vm.Node.prototype.tylen = function(){
			if(this.cache_tylen === undefined){
				let type = this.L();
				let cbt = this.R();
				if(!cbt.n.fitsInBize31()){
					throw 'TODO handle bigger blobs, !cbt.n.fitsInBize31() this.lam='+this.lam;
				}
				let bize31 = cbt.n.Bize();
				let ret;
				//FIXME bize31>>3 drops some digits
				if(type == vm.typeBytes){ //(TypevalB b* cbt)
					ret = bize31>>3;
				}else if(type == vm.typeInts){ //(TypevalB i* cbt)
					ret = bize31>>5;
				}else if(type == vm.typeFloats){ //(TypevalB f* cbt)
					ret = bize31>>5;
				}else if(type == vm.typeDoubles){ //(TypevalB d* cbt)
					ret = bize31>>6;
				}else if(type == vm.typeBits){
					return cbt.bitAt(index) ? 1 : 0;
				}else if(this.isCbt()){
					throw 'This must be a typedBlob, not a cbt. this.lam='+this.lam;
				}else{
					throw 'TODO type='+type;
				}
				this.cache_tylen = ret;
			}
			return this.cache_tylen;
		};
		
		//If this is a cbt (FIXME? even of the wrong size?), then its first 8 bytes as double/float64.
		//If this is a (Typeval application/x-IEEE754-double EightBytes) then gets that but from EightBytes.
		//Else returns (double)0.
		//FIXME endian?
		vm.Node.prototype.d = function(){
			if(this.isCbt() /*&& this.cbtSize() == 64*/){
				return this.doubleAt(0);
			}
			if(this.l === vm.typeDouble){
				return this.r.n.d();
			}
			return 0;
		};
		
		//for now, just check === T.
		//TODO? true if this is a T, else false.
		vm.Node.prototype.z = function(){
			return this.lam===T;
		};

		//Example: a Lambda with [...paramNames...] at param 7 and FuncBody at param 8,
		//downToCur(8) gives (Lambda [...] FuncBody) (UPDATE: FuncBody moved to end of the [...] so after that is param),
		//and downToCur(7) would give (Lambda [...]). If cur is already less than that, throws.
		vm.Node.prototype.downToCur = function(cur){
			let observeCur = this.cur();
			if(observeCur < cur) throw 'Cant downToCur('+cur+') cuz observeCur='+observeCur+' is already below that.';
			let ret = this.lam;
			while(cur < observeCur){
				ret = ret.n.l;
				observeCur--;
			}
			return ret;
		};
		
		//as of 2023-4 this should also do LamNs and Ns (TODO), not just Lambdo (the 7 param form of Lambda which is 6 params of U)
		//and MutLamdo (the 7 param form of Mutlambda which is 6 params of U). ??? Or maybe it shouldnt do LamNs or Ns, cuz its not getting a param,
		//its getting L of L of L so less params on it.
		vm.Node.prototype.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things = function(curN){
			if(curN < 7) throw 'curN='+curN;
			let o8 = this.o8();
			switch(o8){
				/*FIXME optimize by putting in header or some way... to efficiently know if its the 8th param. ???
				Or change these 3 ops (varargAx opOneMoreParam lambda) so that funcBody is the 7th param?
				Would need to have 2 or 4 of each of those ops if so, cuz up to the 7th param,
				every next param being u vs anything_except_u branches to twice as many ops.
				By design the op and curriesLeft are known at param 7 (or less),
				so the design of using the 8th param as funcBody and maybe 9th for something related,
				is complicating that. Write out the design below, and try to make it consistent,
				and look for all other ops that have strange curriesLeft
				andOr evalingVsHalted params, such as op.evaling has o8 of 0)...
				Thats in vm.opInfo[o8].isStrange.
				Or should they be 1 deeper than that, so can find funcBody just by o8? A few specific o8s have funcBody as their r child.
				The problem with waiting until param7 is every later param has the same o8 as param7 as it copies from l child after that.
				...
				*/
				
				case vm.o8OfInfcur:{
					throw 'Infcur/[] isnt used as namespace anymore. Use LamNs instead (the other kinds of namespace are Ns, Treemap, and EmptyTreemap, and maybe Lambdo and Mutlambdo but those get wrapped in LamNs). So todo rename this getAtCurNOfLambdaOrMutLamOrInfcurOf2Things to not say Infcurof2things.';
					/*if(this.cur() != 9) throw 'Is not a [(Lambda_or_MutLam [..paramNames..] FuncBody ...allParamsExceptLast...) LastParam] cuz this.cur()=='+this.cur();
					let shouldBeLambdaOrMutLam = this.l.n.r;
					return this.downToCur(curN);
					//this.cacheFuncBody = shouldBeLambdaOrMutLam.funcBody();
					*/
				}break;case vm.o8OfLambdo:{
					//if(this.cur() < curN) throw 'There is no 8th param so cant get FuncBody. If this is called in paramNames then FIXME that should call this.downToCur(7) instead but FIXME need to handle [AllParamsExceptLast LastParam].';
					//this.cacheFuncBody = this.downToCur(8).n.r;
					//return this.downToCur(8);
					return this.downToCur(curN);
					//while(find.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
				}break;case vm.o8OfMutlambdo:{
					return this.downToCur(curN);
					//throw 'TODO';
				}break;case vm.o8OfNs:{
					throw 'Dont do Ns here.';
				}break;case vm.o8OfLamNs:{
					//let lastParamName = this.paramNamesWithoutFuncBody().n.R(); //FIXME what if theres 0 param names? Should ops.Lambda do the same thinga as if params list is not a list at all if so? Cuz every possible combo of at most 7 params of U (recursively no more than 7 in childs either) must be halted.
					//if()
					throw 'Dont do LamNs here.';

				/*case vm.o8OfVarargAx:case o8OfLambda:
					let find = this.lam; //starts as (varargAx funcBodyAndVarargChooser a b c d) or (opOneMoreParam aVarName aLambda ...params...)
					let prevFind = find;
					//FIXME redesign this so the loop is smaller?
					while(find.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
					//while(find.n.l.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
					throw 'TODO';
					//this.cacheFuncBody = TODO;
				*/
				//break;case vm.o8OfOpOneMoreParam:
					//this.cacheFuncBody = TODO;
				//	throw 'TODO find aLambda in (opOneMoreParam aVarName aLambda ...params...) and call node.funcBody() on it recursively.';
				}break;default:
					//this.cacheFuncBody = U;
					throw 'Unknown o8 for getAtCurNOfLambdaOrMutLamOrInfcurOf2Things: '+o8;
			}
			//return this.cacheFuncBody;
		};

		/*
		//returns something like (Lambda_or_MutLam [..paramNames..] FuncBody)
		vm.Node.prototype.getAtCur8OfLambdaOrMutLamOrInfcurOf2Things = function(){
			let o8 = this.o8();
			if(this.cur() < 8) throw 'There is no 8th param so cant get FuncBody. If this is called in paramNames then FIXME that should call this.downToCur(7) instead but FIXME need to handle [AllParamsExceptLast LastParam].';
			switch(o8){
				/*FIXME optimize by putting in header or some way... to efficiently know if its the 8th param. ???
				Or change these 3 ops (varargAx opOneMoreParam lambda) so that funcBody is the 7th param?
				Would need to have 2 or 4 of each of those ops if so, cuz up to the 7th param,
				every next param being u vs anything_except_u branches to twice as many ops.
				By design the op and curriesLeft are known at param 7 (or less),
				so the design of using the 8th param as funcBody and maybe 9th for something related,
				is complicating that. Write out the design below, and try to make it consistent,
				and look for all other ops that have strange curriesLeft
				andOr evalingVsHalted params, such as op.evaling has o8 of 0)...
				Thats in vm.opInfo[o8].isStrange.
				Or should they be 1 deeper than that, so can find funcBody just by o8? A few specific o8s have funcBody as their r child.
				The problem with waiting until param7 is every later param has the same o8 as param7 as it copies from l child after that.
				...
				*
				
				case vm.o8OfInfcur:
					if(this.cur() != 9) throw 'Is not a [(Lambda_or_MutLam [..paramNames..] FuncBody ...allParamsExceptLast...) LastParam] cuz this.cur()=='+this.cur();
					//let shouldBeLambdaOrMutLam = this.n.l.n.r;
					//this.cacheFuncBody = shouldBeLambdaOrMutLam.funcBody();
				break;case vm.o8OfLambdo:
					//this.cacheFuncBody = this.downToCur(8).n.r;
					return this.downToCur(8);
					//while(find.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
				break;case vm.o8OfMutLam:
					throw 'TODO';
				/*case vm.o8OfVarargAx:case o8OfLambda:
					let find = this.lam; //starts as (varargAx funcBodyAndVarargChooser a b c d) or (opOneMoreParam aVarName aLambda ...params...)
					let prevFind = find;
					//FIXME redesign this so the loop is smaller?
					while(find.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
					//while(find.n.l.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
					throw 'TODO';
					//this.cacheFuncBody = TODO;
				*
				//break;case vm.o8OfOpOneMoreParam:
					//this.cacheFuncBody = TODO;
				//	throw 'TODO find aLambda in (opOneMoreParam aVarName aLambda ...params...) and call node.funcBody() on it recursively.';
				break;default:
					//this.cacheFuncBody = U;
					throw 'Unknown o8 for getAtCur8OfLambdaOrMutLamOrInfcurOf2Things: '+o8;
			}
			//return this.cacheFuncBody;
		};*/

		//In a (Lambda_or_MutLam [..paramNames..] FuncBody ...allParamsExceptLast...) LastParam),
		//or in (Lambda_or_MutLam [..paramNames..] FuncBody ...firstNParams...) etc, returns FuncBody.
		vm.Node.prototype.funcBody = function(){
			if(!this.cacheFuncBody){
				if(vm.isFullLamNs(this.lam)){
					//(LamNs (ops.Lambda_or_ops.MutLambdo ...) lastParam)
					let lambdoOrMutlambdo = this.L().n.R();
					this.cacheFuncBody = lambdoOrMutlambdo.n.funcBody();
				}else if(this.o8() == vm.o8OfLambdo || this.o8() == vm.o8OfMutlambdo){

					//let at8Params = this.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things(8);
					//this.cacheFuncBody = at8Params.n.r;
					//FIXME, this might break things: 2022-8-27 adding a comment param before funcBody in vm.ops.Lambdo, so FuncBody is now param 9 (was 8).
					
					//This was correct 2023-4-11, but redesigning Lambdo and Mutlambdo ops to put funcBody at end of params list,
					//and remove comment param which is right after param list, so its 2 params shorter... (// aka comment op can be around funcbody or not)
					//let at9Params = this.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things(9);				
					//this.cacheFuncBody = at9Params.n.r;
					let at7Params = this.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things(7);
					let paramListWithFuncBodyAtEnd = at7Params.n.R(); //For (λ [x y (P x)] valX) its [x y (P x)]
					this.cacheFuncBody = paramListWithFuncBodyAtEnd.n.R(); //For (λ [x y (P x)] valX) its (P x)
				}else{
					throw 'TODO are there other cases where a funcbody is defined? op='+this.opName();
				}
			}
			return this.cacheFuncBody;
		};
		
		//TODO rename this to paramNamesWithFuncBody.
		//gets the 7th param which is, as of 2023-4, [a b c FuncBody] if the params are a b c.
		//
		//These are not the whole name. Example: (λ[a b c U] valA valB) has keys a% b% and vals valA valB. not a b. a% b%. aka (P a) and (P b).
		//
		//OLD...
		//In a [(Lambda_or_MutLam [..paramNames..] FuncBody ...allParamsExceptLast...) LastParam)],
		//or in (Lambda_or_MutLam [..paramNames..] FuncBody ...firstNParams...), returns the [..paramNames..].
		vm.Node.prototype.paramNames = function(){
			if(!this.cacheParamNames){
				if(this.o8() === vm.o8OfInfcur){
					if(this.cur() != 9){
						throw 'Is not an Infcur/[] of 2 things: '+this.lam;
					}
					let normallyIsALambdaOrMutlam = this.l.n.r;
					let at7Params = normallyIsALambdaOrMutlam.n.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things(7);
					this.cacheParamNames = at7Params.n.R();
				}else if(vm.isFullLamNs(this.lam)){ //o8 is vm.o8OfLamNs and curriesLeft is 1.
					//FIXME what to do if its not a lambdoOrMutlambdo?
					let lambdoOrMutlambdo = this.L().n.R();
					this.cacheParamNames = lambdoOrMutlambdo.n.paramNames(); //Example: [a b c FuncBody] if params are a b c. TODO rename paramNames to paramNamesWithFuncBody.
				}else{
					let at7Params = this.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things(7);
					this.cacheParamNames = at7Params.n.R();
				}
				
			}
			return this.cacheParamNames;
		};

		
		//These are not the whole name. Example: (λ[a b c U] valA valB) has keys a% b% and vals valA valB. not a b. a% b%. aka (P a) and (P b).
		vm.Node.prototype.paramNamesWithoutFuncBody = function(){
			return this.paramNames().n.L();
		};
		
		
		//If this is a call of Lambdo (λ is {L Lambdo}, to make room for vararg param names infcurList/(a b c...))
		//then comment is 8th param, or it might not have 8 params in which case comment is U.
		//If this is MutLam or maybe VarargAx, or maybe a few other types might have a standard place to put in a comment,
		//then todo return comment of those too.
		vm.Node.prototype.getComment = function(){
			if(this.cur() < 8) return U;
			switch(this.o8()){
				case vm.o8OfLambdo:
					return this.getAtCurNOfLambdaOrMutLamOrInfcurOf2Things(8).n.r;
				break;default:
					return U;
			}
		};

		//TODO rename .p and .pOrNull to .get and .getOrNull, cuz its not ops.P.
		//
		//null if not found. Same as Node.p except the null part.
		//
		/*
		2023-5-30:
		Here's the planned solution: (Lambda[x y z funcbody] valX valY) is viewed as having keys x% (aka (P x)) and y%, not x and y. (P x ns) will get the value of key (P x), not the value of key x. So use x% and y% and z% in funcbody. x% in Ns, LamNs, Treemap, EmptyTreemap, Lambda, and Mutlambda works the same way for READ. For WRITE (by forkedit) Im still undecided if (Put x% ns) should work for LamNs, Lambda, and Mutlambda, to forkedit the valX valY etc, vs if it should in Ns skip LamNs that doesnt have x% and go to the next ns in it.
		-- x$ gets from non-Lam, normally float64. (D x)
		-- x% gets from any namespace. (P x). //maybe merge (Du x) into this?
		-- x@ gets from non-Lam, normally typed cbt.
		*/
		//
		vm.Node.prototype.pOrNull = function(name){
			if(!vm.isLambda(name)){
				throw 'Not isLambda: '+name+' typeof='+typeof(name);
			}
			name = vm.wrap(name); //in case call it on string
			//FIXME verify FuncBody is not viewed as a param name even though it goes at end of same list like [..paramNames.. FuncBody].
			let pNames = null;
			//let funcBody = this.funcBody();
			//FIXME adjust for new design of Lambdo and Mutlambdo ops to put funcBody at end of params list,
			let o8 = this.o8();
			switch(o8){
				/* UPDATE: 2023-8-3 bringing [] back as ns/namespace, but still need to check its length is even or odd?
				[]/Infcur isnt used as a namespace anymore: case vm.o8OfInfcur:{
					//if(!pNames) pNames = this.paramNames(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					if(!pNames) pNames = this.paramNamesWithoutFuncBody(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					throw 'TODO remove this?';
					//2023-4-20 this should be removed cuz []/Infcur isnt used for key val key val anymore in lambda/mutlambda. Use LamNs Ns etc.
					if(this.o8() === vm.o8OfInfcur){ //should be [(Lambda FuncBody ...allParamsExceptLast...) lastParam] which FuncBody is called on.
						if(this.cur() != 9) throw 'Is not a [(Lambda_or_MutLam [..paramNames..] FuncBody ...allParamsExceptLast...) LastParam] cuz this.cur()=='+this.cur();
						//FIXME its not 9 anymore. its 7 cuz Lambdo and Mutlambdo ops to put funcBody at end of params list,
						if(name.n.eq(pNames.n.R())){
							let ret  = this.R(); //return LastParam in [(Lambda FuncBody ...allParamsExceptLast...) LastParam] which FuncBody is called on.
							console.log('node.p [] name='+name+' val='+ret);
							return ret;
						}
						let lambdaOrMutLam = this.l.n.r;
						return lambdaOrMutLam.n.p(name); //uses cached this.paramNames()
					}
				}break;*/
				case vm.o8OfInfcur:{
					//2023-8-3 bringing [] back as ns/namespace, but still need to check its length is even or odd?
					//(b% [a valA b valB c valC]) returns valB, for example. b% is (P b). Searches from end (c then b then a)
					//and returns first val of that key, even if theres duplicate keys. If list size (after 7th param) is odd
					//(even if you count those 7), it doesnt care, counts down by 2 from end anyways, and ignores the 8th param after U.
					let infcurList = this.lam;
					//caller already does this, so just search for name: let searchName = ops.P(name); //the keys in [a valA b valB c valC] are a% b% c% aka (P a) (P b) (P c), similar to in Lambda and Mutlambda.
					if(!vm.isFullP(name)){
						return null; //not found, cuz only (P a) aka a% or (P [hello world]) etc can be keys, such as in [a valA [hello world] valHelloWorld]
					}
					let searchListItem = name.n.R(); //get a from a%, or get [hello world] from  (P [hello world]), etc.
					while(infcurList.n.paramsSoFar() >= 2){
						let val = infcurList.n.R();
						infcurList = infcurList.n.L();
						let key = infcurList.n.R();
						infcurList = infcurList.n.L();
						//if(searchName.n.eq(key)){
						//if(name.n.eq(key)){
						if(searchListItem.n.eq(key)){
							return val;
						}
					}
					return null; //not found
				}break;case vm.o8OfLambdo: case vm.o8OfMutlambdo:{
					//if(!pNames) pNames = this.paramNames(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					if(!pNames) pNames = this.paramNamesWithoutFuncBody(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					let curLeft = this.curriesLeft();
					if(o8 === vm.o8OfMutlambdo){
						//console.log('FIXME Node.p Mutlambdo curLeft='+curLeft+' name='+name+' Should this add or subtract 1 from curLeft? TODO test with (Λ [a b x I#(F U)] valA valB valX)');
						curLeft--; //this works
						//curLeft++;
					}


					//remove newest curLeft params, so the Lambda params (in this.r and this.l.n.r and this.l.n.l.n.r etc) are aligned to pNames.
					for(let i=0; i<curLeft; i++) pNames = pNames.n.L();

					let lambdaOrMutLamCall = this.lam;
					if(vm.isFullP(name)){ //name is (P NameWithoutP). Do this cuz "x% gets from any namespace. (P x)" but [x y z funcbody] in Lambda/Mutlambda params list instead of (P x).
						let NameWithoutP = name.n.R();
						while(lambdaOrMutLamCall.n.cur() > 7){ //7th param is [..paramNames.. FuncBody]. Then are the normal params.
							//if(name.n.eq(pNames.n.R())){
							if(NameWithoutP.n.eq(pNames.n.R())){
								let ret = lambdaOrMutLamCall.n.R(); //return the param with that name.
								console.log('node.p Lambda NameWithoutP='+NameWithoutP+' val='+ret);
								return ret;
							}
							pNames = pNames.n.L(); //remove newest name
							lambdaOrMutLamCall = lambdaOrMutLamCall.n.L(); //remove newest val
						}
					}
					//return U; //not found (A value in a LamNs/Treemap/EmptyTreemap/Ns may be U, but in this case its cuz its not found. Check the Has op to know the difference)
					return null; //not found
					
					/* Old, before moved FuncBody to end of params list and removed comment (use ops.CC instead).
					//if 1, then it got its second last param and has not "[(Lambda FuncBody ...allParamsExceptLast...) lastParam] which FuncBody is called on" yet.
					//If 2, its the param just before that (if any).
					let curLeft = this.curriesLeft();


					//remove newest curLeft params, so the Lambda params (in this.r and this.l.n.r and this.l.n.l.n.r etc) are aligned to pNames.
					for(let i=0; i<curLeft; i++) pNames = pNames.n.L();

					let lambdaOrMutLamCall = this.lam;
					while(lambdaOrMutLamCall.n.cur() > 8){ //7th param is [..paramNames..]. 8th parm is FuncBody. Then are the normal params.
						if(name.n.eq(pNames.n.R())){
							let ret = lambdaOrMutLamCall.n.R(); //return the param with that name.
							console.log('node.p Lambda name='+name+' val='+ret);
							return ret;
						}
						pNames = pNames.n.L(); //remove newest name
						lambdaOrMutLamCall = lambdaOrMutLamCall.n.L(); //remove newest val
					}
					*/
				//}break;case vm.o8OfMutlambdo:{
					//similar to Lambda but with an extra (EmptyTreemap GodelLessThan) param at end or similar namespace param. Namespace ops are Ns, LamNs, Treemap, and EmptyTreemap.
				//	throw 'TODO';
				}break;case vm.o8OfTreemap: case vm.o8OfEmptyTreemap:{
					let ret = this.lam(name);
					if(ret === U){
						if(vm.treemapOrEmptytreemapHas(this.lam,name)){
							return ret; //has it, and val happens to be U
						}else{
							return null; //does not have it
						}
					}else{
						return ret; //has it, and val is not U
					}
				}break;case vm.o8OfNs:{
					//throw 'FIXME must get null from these, not U, if not found, so cant just call them this way since they return U if not found';
					//return this.lam(name); //added this case/case/case and line of code 2023-5-24. Hope it doesnt cause infinite loops in Ns (in Treemap and EmptyTreemap it wont).

					if(vm.isFullNs(this.lam)){
						let innerNs = this.L().n.R();
						let outerNs = this.R();
						//Namespace types are: Ns, LamNs, Treemap, EmptyTreemap,
						//and maybe Lambdo and Mutlambdo but those are normally wrapped in LamNs though .p and .pOrNull should work on them too so maybe should count them.
						return innerNs.n.pOrNull(name) || outerNs.n.pOrNull(name); //Ns chains 2 namespaces.
					}else{
						return null; //FIXME should Ns without enough params have any p(paramName)?
					}

				}break;case vm.o8OfLamNs:{
					if(this.curriesLeft()==1){ //same as vm.isFullLamNs(this.lam)
						let paramNames = this.paramNamesWithoutFuncBody();
						let lastParamName = paramNames.n.R();
						if(vm.isFullP(name)){
							let nameWithoutP = name.n.R(); //cuz "-- x% gets from any namespace."
							//if(lastParamName.n.eq(name)){
							if(lastParamName.n.eq(nameWithoutP)){
								return this.R(); //get lastParam from (LamNs (Lambdo_or_MutLambdo ...) lastParam)
							}else{
								//it might not actually be a lambdoOrMutlambdo. FIXME what to do then?
								let lambdoOrMutlambdo = this.L().n.R();
								//return lambdoOrMutlambdo.n.p(name);
								return lambdoOrMutlambdo.n.p(name); //name --> removes the P and compute nameWithoutP recursively.
							}

							/*
							//FIXME if this.L() is not a full (curriesleft of 1) lambda (or how to do mutlambda?) then return U for not found?
							//or what if for some reason the lambda in the LamNs isnt full, is waiting on 2 or more params?
							//If so, must have got there some way other than the lambda or mutlambda opcode,
							//maybe FuncBody put together arbitrary lambdas or something. Just choose a consistent design and stick with it.
							if(this.R().n.eq(name)){
							*/
						}else{
							console.log('WARNING: .pOrNull(name) returning null cuz name isnt a call of P. name='+name);
							//not found. If Lambda has a [x y z funcbody] then x% and y% and z% are its param names, not x y and z. Aka (P x) (P y) (P z). But only up to the number of params that have values.
							return null;
						}
					}else{
						//return U; //not found
						return null; //not found
					}
				}break;default:
					//return U;
					return null; //not found
			}
		};

		//U if not found.
		//name is a fn.
		//get Param whose name is any fn, normally a (Typeval U Utf8bytes) aka the simplest kind of string but could be any fn/lambda.
		//If there is no such param, returns U.
		//If theres more than 1 param of the same name, returns the rightmost one. I didnt mean to design it to allow
		//multiple params of the same name, but its for efficiency that Lambda op does not check the list of param names for duplicates.
		vm.Node.prototype.p = function(name){
			return this.pOrNull(name) || U;
		};
		
		/* This worked 2023-5-24 for alot of cases, though some testcases failed. I'm forking this into pOrNull and p, so dont have to implement it again in vm.has.
		//name is a fn.
		//get Param whose name is any fn, normally a (Typeval U Utf8bytes) aka the simplest kind of string but could be any fn/lambda.
		//If there is no such param, returns U.
		//If theres more than 1 param of the same name, returns the rightmost one. I didnt mean to design it to allow
		//multiple params of the same name, but its for efficiency that Lambda op does not check the list of param names for duplicates.
		vm.Node.prototype.p = function(name){
			name = vm.wrap(name); //in case call it on string
			//FIXME verify FuncBody is not viewed as a param name even though it goes at end of same list like [..paramNames.. FuncBody].
			let pNames = null;
			//let funcBody = this.funcBody();
			//FIXME adjust for new design of Lambdo and Mutlambdo ops to put funcBody at end of params list,
			let o8 = this.o8();
			switch(o8){
				case vm.o8OfInfcur:{
					//if(!pNames) pNames = this.paramNames(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					if(!pNames) pNames = this.paramNamesWithoutFuncBody(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					throw 'TODO remove this?';
					//2023-4-20 this should be removed cuz []/Infcur isnt used for key val key val anymore in lambda/mutlambda. Use LamNs Ns etc.
					if(this.o8() === vm.o8OfInfcur){ //should be [(Lambda FuncBody ...allParamsExceptLast...) lastParam] which FuncBody is called on.
						if(this.cur() != 9) throw 'Is not a [(Lambda_or_MutLam [..paramNames..] FuncBody ...allParamsExceptLast...) LastParam] cuz this.cur()=='+this.cur();
						//FIXME its not 9 anymore. its 7 cuz Lambdo and Mutlambdo ops to put funcBody at end of params list,
						if(name.n.eq(pNames.n.R())){
							let ret  = this.R(); //return LastParam in [(Lambda FuncBody ...allParamsExceptLast...) LastParam] which FuncBody is called on.
							console.log('node.p [] name='+name+' val='+ret);
							return ret;
						}
						let lambdaOrMutLam = this.l.n.r;
						return lambdaOrMutLam.n.p(name); //uses cached this.paramNames()
					}
				}break;case vm.o8OfLambdo: case vm.o8OfMutlambdo:{
					//if(!pNames) pNames = this.paramNames(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					if(!pNames) pNames = this.paramNamesWithoutFuncBody(); //[..paramNames.. FuncBody]. Caches it, so it doesnt cost much to call it again (which often happens in o8OfInfcur vs o8OfLambda etc)
					let curLeft = this.curriesLeft();
					if(o8 === vm.o8OfMutlambdo){
						//console.log('FIXME Node.p Mutlambdo curLeft='+curLeft+' name='+name+' Should this add or subtract 1 from curLeft? TODO test with (Λ [a b x I#(F U)] valA valB valX)');
						curLeft--; //this works
						//curLeft++;
					}


					//remove newest curLeft params, so the Lambda params (in this.r and this.l.n.r and this.l.n.l.n.r etc) are aligned to pNames.
					for(let i=0; i<curLeft; i++) pNames = pNames.n.L();

					let lambdaOrMutLamCall = this.lam;
					while(lambdaOrMutLamCall.n.cur() > 7){ //7th param is [..paramNames.. FuncBody]. Then are the normal params.
						if(name.n.eq(pNames.n.R())){
							let ret = lambdaOrMutLamCall.n.R(); //return the param with that name.
							console.log('node.p Lambda name='+name+' val='+ret);
							return ret;
						}
						pNames = pNames.n.L(); //remove newest name
						lambdaOrMutLamCall = lambdaOrMutLamCall.n.L(); //remove newest val
					}
					return U; //not found (A value in a LamNs/Treemap/EmptyTreemap/Ns may be U, but in this case its cuz its not found. Check the Has op to know the difference)
					
					/* Old, before moved FuncBody to end of params list and removed comment (use ops.CC instead).
					//if 1, then it got its second last param and has not "[(Lambda FuncBody ...allParamsExceptLast...) lastParam] which FuncBody is called on" yet.
					//If 2, its the param just before that (if any).
					let curLeft = this.curriesLeft();


					//remove newest curLeft params, so the Lambda params (in this.r and this.l.n.r and this.l.n.l.n.r etc) are aligned to pNames.
					for(let i=0; i<curLeft; i++) pNames = pNames.n.L();

					let lambdaOrMutLamCall = this.lam;
					while(lambdaOrMutLamCall.n.cur() > 8){ //7th param is [..paramNames..]. 8th parm is FuncBody. Then are the normal params.
						if(name.n.eq(pNames.n.R())){
							let ret = lambdaOrMutLamCall.n.R(); //return the param with that name.
							console.log('node.p Lambda name='+name+' val='+ret);
							return ret;
						}
						pNames = pNames.n.L(); //remove newest name
						lambdaOrMutLamCall = lambdaOrMutLamCall.n.L(); //remove newest val
					}
					*
				//}break;case vm.o8OfMutlambdo:{
					//similar to Lambda but with an extra (EmptyTreemap GodelLessThan) param at end or similar namespace param. Namespace ops are Ns, LamNs, Treemap, and EmptyTreemap.
				//	throw 'TODO';
				}break;case vm.o8OfTreemap: case vm.o8OfEmptyTreemap: case vm.o8OfNs:{
					return this.lam(name); //added this case/case/case and line of code 2023-5-24. Hope it doesnt cause infinite loops in Ns (in Treemap and EmptyTreemap it wont).
				}break;case vm.o8OfLamNs:{
					if(this.curriesLeft()==1){ //same as vm.isFullLamNs(this.lam)
						let paramNames = this.paramNamesWithoutFuncBody();
						let lastParamName = paramNames.n.R();
						if(lastParamName.n.eq(name)){
							return this.R(); //get lastParam from (LamNs (Lambdo_or_MutLambdo ...) lastParam)
						}else{
							//it might not actually be a lambdoOrMutlambdo. FIXME what to do then?
							let lambdoOrMutlambdo = this.L().n.R();
							return lambdoOrMutlambdo.n.p(name);
						}

						/*
						//FIXME if this.L() is not a full (curriesleft of 1) lambda (or how to do mutlambda?) then return U for not found?
						//or what if for some reason the lambda in the LamNs isnt full, is waiting on 2 or more params?
						//If so, must have got there some way other than the lambda or mutlambda opcode,
						//maybe FuncBody put together arbitrary lambdas or something. Just choose a consistent design and stick with it.
						if(this.R().n.eq(name)){
						*

					}else{
						return U; //not found
					}
				}break;default:
					return U;	
			}
		};*/

		//number of curries so far. Different than curriesLeft which is a byte stored in int header and is 0 to mean evaling,
		//1-254 to mean waiting on that many more params before eval, or 255 to mean never eval such as Infcur.
		//This is how many times you'd have to go l l l l... before reach U.
		vm.Node.prototype.cur = function(){
			if(this.cache_cur === undefined){
				//FIXME do "or 255 to mean never eval such as Infcur" for Infcur. put a few vm.xt test cases for it.
				this.cache_cur = (this.isLeaf() ? 0 : (this.L().n.cur()+1));
			}
			return this.cache_cur;
		};
		
		
		/* See other intAt doubleAt etc funcs, near the bitAt and byteAt funcs.
		
		//index is in units of ints, not bits. Node.blob is always a Int32Array. always 0s outside range.
		//If blobFrom<blobTo then blob exists.
		vm.Node.prototype.intAt = function(index){
			//if(index < this.blobFrom || this.blobTo <= index) return 0;
			//return this.blob[index];
			//in case its undefined cuz outside valid range.
			//index|0 might help js compiler optimize since it cant be a string index etc.
			//FIXME if this.blob is not a powOf2 number of bits,
			//then it must be viewed as padded by a 1 bit then 0s until the next powOf2 IF VIEWED AS BITSTRING,
			//ELSE PAD WITH ALL 0S AS JUST A SPARSE REPRESENTATION OF A CBT.
			//Every bitstring is a cbt, but not every cbt is a bitstring.
			//The only cbts that are not bitstrings, are all 0s.
			//The easiest way is just to keep all blobs as powOf2 number
			//of ints and preallocate pow(2,0)..+..pow(2,16) number of cbts for all possible
			//bitstrings up to 16 bits, so calling 2 of those together makes 32 bits. calling 2
			//of those together makes 64 bits. and so on.
			return this.blob[index|0]|0;
		};
		
		//TODO choose to swap the names doubleAt vs doubleAtt (which both should exist). which way is more intuitive?
		
		//index is in units of doubles
		vm.Node.prototype.doubleAtt = function(index){
			return this.doubleAt(index<<1);
		};
		
		//index is in units of ints
		vm.Node.prototype.doubleAt = function(index){
			//FIXME bigEndian or littleEndian and of ints or bytes etc?
			return vm.twoIntsToDouble(this.intAt(index), this.intAt(index+1));
			//TODO optionalPerNode optimization of this func (just replace it, or inherit using .prototype?)
			//that overlaps a new Float64Array(this.blob.buffer) with this.blob which is an Int32Array,
			//and cache that in a this.blobD, similar to also do this.blobF for Float32Array etc,
			//but since many nodes wont use that, dont make these type specific optimizations by default,
			//just where its likely to help. To be explored later.
		};
		
		//as double
		vm.Node.prototype.d = function(){
			return this.doubleAt(0);
		};
		*/
		
		
		
		//can say duplicate forest shapes are not equal, but if forest shape differs then they certainly dont equal.
		//For perfect dedup, use 256 bit or 512 bit global ids which are lazyEvaled and most nodes never need one.
		vm.Node.prototype.equalsByLazyDedup = function(otherNode){
			//TODO optimize by using === between 2 nodes, since only 1 node in memory should ever have the same localId128?
			return this.hashInt==otherNode.hashInt && this.idB==otherNode.idB && this.idA==otherNode.idA && this.blobFrom==otherNode.blobFrom && this.blobTo==otherNode.blobTo;
		};
		
		//The node form of lambda x is x(), such as x().curriesLeft() or x().o8().
		vm.Node.prototype.equalsByLazyDedupOf2ChildNodes = function(otherLNode,otherRNode){
			//FIXME if lazy load .l and .r, then need to call .L() and .R() to lazy load them first. but that wont happen until a much later version of this VM.
			//TODO optimize by using Node instead of the lambdize wrapper of it so can use this.l. instead of this.l(). etc? Or put those funcs in the lambdized form?
			return this.l().equalsByLazyDedup(otherLNode) && this.r().equalsByLazyDedup(otherRNode);
		};

		//2 Uint8Array in, 1 out.
		vm.concatBytes = (a,b)=>{
			let c = new Uint8Array(a.length+b.length);
			c.set(a, 0);
			c.set(b, a.length);
			return c;
		};

		vm.arraysEqual = (a,b)=>{
			if(a.length != b.length) return false;
			for(let i=0; i<a.length; i++) if(a[i]!==b[i]) return false;
			return true;
		};

		//returns true or false.
		//do 2 nodes equal by hash? Tries some basic compares first since hash is expensive.
		//Average of constant time (big constant). Worst case of linear of number of nodes. Caches so only pays for each node at most once.
		vm.Node.prototype.eq = function(nodeOrLam){
			let node = nodeOrLam.n || nodeOrLam;
			if(this === node) return true;
			if(this.header != node.header) return false;
			return vm.arraysEqual(vm.marklar203bId(this.lam),vm.marklar203bId(node.lam));
		};
		
		//the last 24 bytes of the marklar203b id of U/theUniversalLambda. First 8 bytes, as usual, are node.header and node.Bize(),
		//which there can be a few variants of that header if its still evaling, or depending on evilBit being true/false, etc.
		//Even though it will normally be displayed as hex or base58 or base64 (TODO choose which),
		//if you view it in a hex editor you can see the text here in this genesis block.
		//
		//I'm going with _Marklar203bGenesisBlock . marklar is a joke word from tv show southpark that means all possible words
		//at once, which is kind of how a universal lambda is. 203 is the version of wikibinator. 203b is the version of the marklar id,
		//cuz might have a 512 bit version in 203c or other variants in d e f later.
		vm.marklar203b_last24BytesOfLeaf = vm.stringToUtf8AsUint8Array('_Marklar203bGenesisBlock');

		//UPDATE: dont skip padding, cuz in this early prototype of wikibinator203, its better for existing hash tools to be able to confirm its security,
		//and make different id types later that are more efficient andOr more secure.
		//
		//returns a Uint8Array(32) of a global id you can share online or use locally, of the given fn/lambda.
		//Caches it in fn.n.cache_marklar203bId (aka fn().n.cache_marklar203bId) so calling this again gets that same Uint8Array(32). Dont modify that array.
		//
		//This is the name of an idMaker. The id of U/leaf is chosen arbitrarily (other than its 64 bit header which is derived as usual).
		//Every id after that is derived from the ids of its 2 childs. (FIXME make sure to check for IdentityFunc called on U since those are the 2 childs of U).
		//These ids are 256 bits (node.header, node.Bize(), then the last 192 bits of oneCycleOf_sha256_without_padding) OR if it contains 1-128 bits of literal data
		//then its that instead of the hash, or in some cases (see the first byte prefix in header) a 256 bit literal fits in a 256 bit id,
		//and in most of those cases of "a 256 bit literal fits in a 256 bit id" its id is itself. See "id of id of id".
		//Id of parent is derived deterministicly from ids of its 2 childs IF its halted.
		//If not halted, then you would not (at least in this implementation of wikibinator203) have a fn object to call this on,
		//but in other implementations it might allow nonhalted ids since they are part of the directed-graph of callpairs
		//even though lambdas cant see nonhalted lambdas. A debugger (with breakpoints) made of lambdas could stepInto and stepOver tiny parts of the calculation
		//of a lambda, and those are all halted.
		//
		//There is no opcode for marklar203bId or any idMaker since that would unfairly bias it toward use of some kind of ids over others.
		//IdMakers should be derived from U, and optionally optimized using an evaler aka (vm,func,param)=>{...compute return value...} of a cbt256 or cbt512.
		//Simply use Lambda or MutLam opcodes to derive that, then optionally outside the system call pushEvaler on that or leave it as it is to compute ids slower.
		//Opmut should still be able to compute it not too slow, but evaler will be faster.
		vm.marklar203bId = fn=>{
			if(fn.n.cache_marklar203bId) return fn.n.cache_marklar203bId;
			let ret;
			//TODO optimize use oneCycleOfSha256WithoutPaddingOnMutable88Ints instead of allocating multiple arrays and converting between bytes and ints etc,
			//and it will be more secure to not allocate arrays during hashing.
			let putHeaderAndBizeAsFirst64Bits = true; //only false for literal 256 bits that fits in a 256 bit id (most literal 256 bits do)
			if(fn === U){
				//hardcode the 192 bits of hash of U as all 0s, but compute header and bize the usual way
				ret = new Uint8Array(32);
				for(let i=0; i<24; i++) ret[8+i] = vm.marklar203b_last24BytesOfLeaf[i]; //genesis block starts with this constant
			}else{
				if(fn.n.fitsInId256()){
					//cbt1..cbt128 always fits in id256. Most cbt256s fit in 256 bits. 1/64 of them do not and are done by hash of 2 childs instead.
					/*if(fn.n.isCbt()){
						let siz = this.cbtSize(); //is a powOf2 num of bits from 1 to 2**vm.log2OfMaxBits. aka 2**this.cbtHeight()
						if(
						switch(siz){
							case 1:
						}
						throw 'FIXME still need to put 1-256 bits of literal data in the id depending on if its a cbt those sizes, and for the size of 256 depending on the first byte';
					}*/
					
					ret = new Uint8Array(32);
					for(let i=0; i<32; i++) ret[i] = 0;
					let siz = fn.n.cbtSize();
					switch(siz){
						case 1:
							ret[31] = fn.n.bitAt(0); //TODO optimize
						break;case 2:
							ret[31] = (fn.n.bitAt(0)<<1)|fn.n.bitAt(1); //TODO optimize
						break;case 4:
							ret[31] = (fn.n.bitAt(0)<<3)|(fn.n.bitAt(1)<<2)|(fn.n.bitAt(2)<<1)|fn.n.bitAt(3); //TODO optimize
						break;case 8:
							ret[31] = fn.n.byteAt(0);
						break;case 16:
							ret[30] = fn.n.byteAt(0);
							ret[31] = fn.n.byteAt(1);
						break;case 32:
							ret[28] = fn.n.byteAt(0);
							ret[29] = fn.n.byteAt(1);
							ret[30] = fn.n.byteAt(2);
							ret[31] = fn.n.byteAt(3);
						break;case 64:
							for(let i=0; i<8; i++){
								ret[24+i] = fn.n.byteAt(i);
							}
						break;case 128:
							for(let i=0; i<16; i++){
								ret[16+i] = fn.n.byteAt(i);
							}
						break;case 256:
							putHeaderAndBizeAsFirst64Bits = false;
							for(let i=0; i<32; i++){
								ret[i] = fn.n.byteAt(i);
							}
							if(ret[0]>>3 == 0b11110){ //any id that starts with 11110 is the id of itself as 256 literal bits
								console.log('is the id of itself as 256 literal bits, leaving first byte as it is');
							}else{
								console.log('is the id of 256 literal bits that are not itself. Adding 1 to first byte to mean "id of id" or "id of id of id", or id of [some 256 bits thats not used as an id].');
								ret[0]++;
							}
							
							//FIXME is something missing here?
							
							/*switch(ret[0]){
								case vm.prefixByteOfOther_evilBitOn:
								case vm.prefixByteOfOther_evilBitOff:
								case vm.callPairPrefixByte_evilBitOn:
								case: vm.callPairPrefixByte_evilBitOff:
								vm.prefixByteOfIdOfIdOrOfAny256BitsA:
								vm.prefixByteOfIdOfIdOrOfAny256BitsB:
								vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsA:
								vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsB:
							}*/
							//throw 'fixmefixme';
						break;default:
							throw 'cbtSize='+siz+' which is too big to fit in a 256 bit id (so why did fitsInId256 say it fits?)';
					}
				}else{
					let leftId = vm.marklar203bId(fn.n.L()); //is a Uint8Array
					let rightId = vm.marklar203bId(fn.n.R());
					let cat = vm.concatBytes(leftId,rightId);
					//ret = vm.sha256(cat,true); //true to skip padding, so its 1 sha256 cycle instead of 2. Size is always 512 bits in so dont need padding.
					ret = vm.sha256(cat); //with padding so 2 sha256 cycles.
				}
			}			
			if(putHeaderAndBizeAsFirst64Bits){
				let asInts = new Int32Array(ret.buffer); //TODO optimize just do it as bytes
				asInts[0] = fn.n.header;
				asInts[1] = fn.n.Bize();
			}
			return fn.n.cache_marklar203bId = ret;
		};

		//string view of: the default kind of id in this VM is marklar203bId, but theres no opcode for "default id" cuz it supports any kind of id that can be derived from content.
		//TODO use this when toStringing code.
		//TODO generalize this to any kind of idMaker but dont make it hard to use. This isnt preventing anyone from using a different idMaker at user level.
		vm.Node.prototype.fullId = function(){
			if(this.cache_fullIdString) return this.cache_fullIdString;
			return this.cache_fullIdString = 'λ'+vm.bytesToHex(vm.marklar203bId(this.lam));
		};
		
		vm.Node.prototype.binForestToStringNoNames = function(){
			if(this.lam == U) return 'λ';
			return '('+this.L().n.binForestToStringNoNames()+' '+this.R().n.binForestToStringNoNames()+')';
		};
		
		//This should be maybe 30 times bigger than toString, instead of exponentially bigger.
		//the map is a js Map, not a js {}. Thats needed so lambda/fn can be a key
		//without causing toString on the lambda and that string being key (which is expensive).
		//
		//Example:
		//let code = '(+ 2)'; code+': '+vm.eval(code).n.binForestToStringMakeUpNames();
		//returns:
		//'(+ 2): (U N1#(U U) U U N1 U N1 U (N2#(N3#(N1 U U) N1 N1 N1) N1 (N2 U U (N4#(N5#(N6#(N7#(N3 U U) N1) U) N8#(N6 N1)) N9#(N8 N5) N10#(N4 N11#(N5 N5)) (N9 N11 N12#(N11 N11)))) (N10 N12 N13#(N12 N12) N14#(N13 N13) (N14 N14))))'
		//Then when vm.eval(that)+'' it returns '(+ 2)'.
		//
		vm.Node.prototype.binForestToStringMakeUpNames = function(){
			let map = new Map();
			//map.set(U,'λ');
			map.set(U,'U');
			let count = {count:1}; //for names only
			let nameMaker = function(){
				return 'N'+(count.count++);
			};
			let mapCountParents = new Map();
			this.countParents_(mapCountParents); //fills mapCountParents
			return this.binForestToStringMakeUpNames_(map,nameMaker,mapCountParents,true);
		};
		
		vm.Node.prototype.binForestToStringMakeUpNames_ = function(map, nameMaker, countParents, isRightRecursion){
			//if(this.lam == U) return 'λ';
			//return '('+this.L().n.binForestToStringNoNames()+' '+this.R().n.binForestToStringNoNames()+')';
			let name = map.get(this.lam);
			if(name === undefined){
				
				let numParents = countParents.get(this.lam);
				if(numParents <= 0) throw 'numParents must be at least 1 but is '+numParents;
				let prefix;
				if(numParents == 1){
					prefix = '';
				}else{
					name = nameMaker();
					map.set(this.lam,name);
					prefix = name+'#';
				}
				let displayParens = isRightRecursion || prefix;
				let lParen = displayParens ? '(' : ''; //so ((a b) c) is displayed as (a b c).
				let rParen = displayParens ? ')' : '';
				return prefix+lParen+this.L().n.binForestToStringMakeUpNames_(map,nameMaker,countParents,false)+' '+this.R().n.binForestToStringMakeUpNames_(map,nameMaker,countParents,true)+rParen;
				
				/*
				//display name either way, even if theres only 1 of them.
				//That problem was solved in Node.prototype.toString by doing 2 passes,
				//one to find what has more than 1 parent, and one to give names only to
				//those that need it.
				//But here in this simpler way binForestToStringMakeUpNames_, always display names,
				//at least for now. TODO only if multiple parents.
				return name+'#('+this.L().n.binForestToStringMakeUpNames_(map,nameMaker)+' '+this.R().n.binForestToStringMakeUpNames_(map,nameMaker)+')';
				*/
				
			}else{
				return name; //this is why the returned code size is linear instead of exponential. Dont recurse again for same lambda/fn.
			}
		};
		
		//Fills a "new Map()" of fn to number of fn parents, plus one for the node
		//this was first called on, viewing its caller as a parent. Returns that shared Map.
		//If the same fn is both childs of another fn, counts that twice.
		vm.Node.prototype.countParents_ = function(map){
			let count = map.get(this.lam);
			if(count === undefined){
				map.set(this.lam,1); //0 becomes 1, but the 0 wasnt there before.
				this.L().n.countParents_(map);
				this.R().n.countParents_(map);
			}else{
				map.set(this.lam,count+1); //dont recurse
			}
			return map;
		};
		
		vm.stringWithoutPrefixCanBeId = function(str){
			if(str.length === 0) return false;
			if(str[0] === 'λ') return false; //cant start with λ cuz thats a prefix of fullIds and maybe of other syntax.
			if(str.length > 64) return false; //arbitrary max len, but id as hex, with the λ prefix, is 65 bytes and 66 bytes.
			if(/\(\)\{\}\[\]\<\>\'\"\#\\\:\,\s\?/.test(str)) return false; //has syntax chars or whitespace not allowed. FIXME there might be more to not allow.
			return true;
		};
		
		//same as fullId except if this would be displayed smaller than an id in the language, as a number or string etc,
		//then thats the id. Small string containing only certain chars (no whitespace etc) then is itself as a literal,
		//and maybe if this is a double (such as 3.45e-23), either way in a Typeval, then its id is that.
		//UPDATE: dont include numbers that contain '.' cuz that a syntax char.
		vm.Node.prototype.id = function(){
			if(this.cache_idString) return this.cache_idString;

			let ret = null;

			let l = this.L();
			let r = this.R();
			//x% is (P x). x$ is (D x). x@ is (Bl x). The .id() of those will be the concat of ids
			//of 2 childs cuz is smaller that way, TODO... but only if that would make it smaller than the other way??
			if(this.lam.builtInName){
				//builtInName only exists for opcodes (theres 256 opcodes), and never starts with a lowercase letter. Can be other symbol or capital.
				ret = 'λ'+this.lam.builtInName; //(!this.lam.builtInName || ops[this.lam.builtInName].n.eq(this.lam)) should always be true. Example: ops.P.builtInName == 'P'.
			}else if(l == ops.P || l == ops.D || l == ops.Bl){
				//TODO optimize by doing the next 2 lines only if l == ops.D
				let rIsUtf8String = r.n.L()===vm.utf8Prefix; //TODO merge this with Node.isTypeUtf8?
				let rIsSmallUtf8String = rIsUtf8String && r.n.R().n.cbtSize() <= vm.smallStringBitSizeLimit;
				if(l == ops.D && rIsSmallUtf8String){
					//FIXME also verify it doesnt have certain chars such as , _ λ ( ) [ ] { } < > and doesnt start with 0-9 etc.
					//ret = r+'$'; //Example: (D x) displays as x$ and x$ should also be its id.
					ret = ''+this.lam; //Example: (D x) displays as x$ and x$ should also be its id.
				}else{
					ret = l.n.id()+r.n.id();
				}
				//FIXME if its (P (P (P (P ...)))) that could get to be a very long id. Check if the
				if(ret.length > 70){
					console.log('WARNING: generated id length '+ret.length+' and using .fullId instead, but the long id could be slowing things down if its a (P (P (P (P ...)))) etc.');
					ret = null;
				}
			}else{
				//let str;
				/*if(this === U){
					return 'λ';
				}if(this.l === vm.typeDouble){
					return ''+this.d();
				}else */if(this.l === vm.typeUtf8){
					let content = this.r;
					if(content.n.fitsInId256()){					
						let utf8Bytes = content.n.bytes();
						let smallString = vm.utf8AsUint8ArrayToString(utf8Bytes); //TODO optimize by caching this? (this happens multiple places)
						if(vm.stringWithoutPrefixCanBeId(smallString)){ //without the λ prefix.
							ret = this.cache_idString = 'λ'+smallString;
						}
					}
				}
			}
			if(ret == null){
				ret = this.fullId();
			}
			return this.cache_idString = ret;
		};
		
		//This is used in Wikibinator203DragAndDropTree.html for example, but is more general than that.
		//If you want a name, it will find one, of that fn,
		//of localName or localId. (If theres a builtInName its also the localName).
		//If it starts with Λ (such as Λ322) then its a localId
		//and TODO should that go in the literal div instead of the suffix div as a name?
		//FIXME it has to be able to go in suffix cuz the  might need to name some nodes by it
		//in the programming language so you know which code (...)#Λ322 [...]#Λ322 is its definition,
		//BUT FIXME make sure as a string literal of that localId it would have be written as 'Λ322'
		//since Λ322 by itself refers to the fn/lambda itself.
		vm.Node.prototype.nameEtc = function(){
			return this.lam.localName || this.locid();
		};
		
		//Would nameEtc return a string that starts with Λ? else its probably human readable. its text either way.
		vm.Node.prototype.nameEtc_isLocid = function(){
			return !this.lam.localName;
		};

		//local id, either 64 or 128 bits depending if those 128 bits are all 0s they can be ignored or not. Its prefixed by λ then hex.
		vm.Node.prototype.locid = function(){
			if(!this.cache_locidString){
				let s = '';
				if(this.blobFrom || this.blobTo) s += vm.intToHex(this.blobFrom)+vm.intToHex(this.blobTo); //put these first so they are dropped as leading 0s
				s += vm.intToHex(this.idA)+vm.intToHex(this.idB);
				while(s.length>1 && s.startsWith('0')) s = s.substring(1); //dont display leading 0s
				this.cache_locidString = 'Λ'+s; //Λ (capital lambda) prefixes a localId. Λ also means mutlam, as an opcode, which is unrelated but feels like its a little similar maybe.
			}
			return this.cache_locidString;
		};

		//returns 3 ids, including my left and right childs.
		vm.Node.prototype.fullIdlr = function(){
			return this.id()+'_'+this.l.n.id()+'_'+this.r.n.id();
		};

		/** this is getting too hard to test. TODO write it using vm.sha256 first (which I know works), and I'll add an optional param there to skip padding or not,
		Use vm.sha256(bytes,true) instead.
		//
		//given an Int32Array(88), reads the last 16 ints and writes the 8 ints just before that, using the first 64 ints for internal state.
		//This is ame as vm.sha256 except the multi-block code is commented-out, and the
		//FIXME test this. Is there some other implementation of just 1 cycle of sha256?
		//
		//This is normally used to hash 2 256 bit ids of 2 fns to make 192 bits (ignoring first 64 bits) of their parent id.
		//This will be a fork of https://github.com/benrayfield/jsutils/blob/master/src/sha256.js
		//WARNING, TODO CHECK SECURITY OF SHA3_256: checkIfSha3PermutationStepIsUnitaryAndIfItsNotThenCheckThatItExpandsItFirstInWayThatsSecureAgainstCreatingCollisionsInTheFirstNonunitarySoCalledPermutation
		//	But the main reason using sha256 instead of sha3_256 is sha256 is faster in CPU (and faster than that in GPU, todo find it i wrote that code using lazycl somewhere, was around 50 gflops i think) even though SHA3_256 is designed to be even faster in GPU (todo verify).

		/*
		2023-6-26 https://chat.openai.com/?model=text-davinci-002-render-sha
		is the sha3 "block permutation" unitary?
		ChatGPT
		The SHA-3 (Secure Hash Algorithm 3) family of cryptographic hash functions, including its core component known as the Keccak sponge construction, employs a block permutation function. This function, often referred to as "theta," is part of the iterative round process within the hash computation.
		To answer your question, the block permutation function used in SHA-3, specifically in Keccak, is not unitary. Unitary transformations are mathematical operations that preserve the norm of vectors and the inner product between them. In the context of cryptographic hash functions, the block permutation is a nonlinear and irreversible operation, which means it does not have the property of being unitary.
		The purpose of the block permutation function in SHA-3 is to introduce confusion and diffusion, helping to ensure the security properties of the hash function, such as resistance to collision and preimage attacks.
		*

		vm.oneCycleOfSha256WithoutPaddingOnMutable88Ints = a=>{
			if(!(a instanceof Int32Array)) throw 'mem is not an Int32Array';
			//write them into array to make it easier for javascript's JIT compiler to know their values and that they are ints instead of doubles. In theory that will be faster. TODO test that theory.
			if(a.length != 88) throw 'mem.length must be 8 (output) + 16 (input) + 64 (SHA256 constants) = 88 (ints), but is '+a.length;

			//https://raw.githubusercontent.com/benrayfield/jsutils/master/src/sha256.js

			//var t = typeof bytesIn;
			//if(t != 'Uint8Array') throw 'Expected Uint8Array but got a '+t; //this check wont work because its like a map of index to byte
			
			/*
			var chunks = Math.floor((bytesIn.byteLength+9+63)/64); //512 bit each
			
			//Copy bytesIn[] into b[], then pad bit1, then pad bit0s,
			//then append int64 bit length, finishing the last block of 512 bits.
			//byte b[] = new byte[chunks*64];
			var b = new Uint8Array(chunks*64);
			
			//System.arraycopy(bytesIn, 0, b, 0, bytesIn.byteLength);
			b.set(bytesIn, 0);
			
			b[bytesIn.byteLength] = 0x80;
			
			//long bitLenTemp = bytesIn.byteLength*8;
			var bitLenTemp = bytesIn.byteLength*8; //in js, this has float64 precision, which is more than enough for Uint8Array size
			for(var i=7; i>=0; i--){
				b[b.byteLength-8+i] = bitLenTemp&0xff;
				bitLenTemp >>>= 8;
			}
			*
			
			//log('b as hex = '+bitfuncs.uint8ArrayToHex(b));
			
			
			//var a = new Uint32Array(136);
			//"first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311"
			a[0]=0x428a2f98;
			a[1]=0x71374491;
			a[2]=0xb5c0fbcf;
			a[3]=0xe9b5dba5;
			a[4]=0x3956c25b;
			a[5]=0x59f111f1;
			a[6]=0x923f82a4;
			a[7]=0xab1c5ed5;
			a[8]=0xd807aa98;
			a[9]=0x12835b01;
			a[10]=0x243185be;
			a[11]=0x550c7dc3;
			a[12]=0x72be5d74;
			a[13]=0x80deb1fe;
			a[14]=0x9bdc06a7;
			a[15]=0xc19bf174;
			a[16]=0xe49b69c1;
			a[17]=0xefbe4786;
			a[18]=0x0fc19dc6;
			a[19]=0x240ca1cc;
			a[20]=0x2de92c6f;
			a[21]=0x4a7484aa;
			a[22]=0x5cb0a9dc;
			a[23]=0x76f988da;
			a[24]=0x983e5152;
			a[25]=0xa831c66d;
			a[26]=0xb00327c8;
			a[27]=0xbf597fc7;
			a[28]=0xc6e00bf3;
			a[29]=0xd5a79147;
			a[30]=0x06ca6351;
			a[31]=0x14292967;
			a[32]=0x27b70a85;
			a[33]=0x2e1b2138;
			a[34]=0x4d2c6dfc;
			a[35]=0x53380d13;
			a[36]=0x650a7354;
			a[37]=0x766a0abb;
			a[38]=0x81c2c92e;
			a[39]=0x92722c85;
			a[40]=0xa2bfe8a1;
			a[41]=0xa81a664b;
			a[42]=0xc24b8b70;
			a[43]=0xc76c51a3;
			a[44]=0xd192e819;
			a[45]=0xd6990624;
			a[46]=0xf40e3585;
			a[47]=0x106aa070;
			a[48]=0x19a4c116;
			a[49]=0x1e376c08;
			a[50]=0x2748774c;
			a[51]=0x34b0bcb5;
			a[52]=0x391c0cb3;
			a[53]=0x4ed8aa4a;
			a[54]=0x5b9cca4f;
			a[55]=0x682e6ff3;
			a[56]=0x748f82ee;
			a[57]=0x78a5636f;
			a[58]=0x84c87814;
			a[59]=0x8cc70208;
			a[60]=0x90befffa;
			a[61]=0xa4506ceb;
			a[62]=0xbef9a3f7;
			a[63]=0xc67178f2;
			//h0-h7 "first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19"
			a[64]=0x6a09e667;
			a[65]=0xbb67ae85;
			a[66]=0x3c6ef372;
			a[67]=0xa54ff53a;
			a[68]=0x510e527f;
			a[69]=0x9b05688c;
			a[70]=0x1f83d9ab;
			a[71]=0x5be0cd19;
			//a[72..135] are the size 64 w array of ints
			for(var chunk=0; chunk<chunks; chunk++){
				var bOffset = chunk<<6;
				//copy chunk into first 16 words w[0..15] of the message schedule array
				for(var i=0; i<16; i++){
					//Get 4 bytes from b[]
					var o = bOffset+(i<<2);
					a[72+i] = ((b[o]&0xff)<<24) | ((b[o+1]&0xff)<<16) | ((b[o+2]&0xff)<<8) | (b[o+3]&0xff);
				}
				//Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:
				for(var i=16; i<64; i++){
					//s0 := (w[i-15] rightrotate 7) xor (w[i-15] rightrotate 18) xor (w[i-15] rightshift 3)
					//s1 := (w[i-2] rightrotate 17) xor (w[i-2] rightrotate 19) xor (w[i-2] rightshift 10)
					//w[i] := w[i-16] + s0 + w[i-7] + s1
					var wim15 = a[72+i-15];
					var s0 = ((wim15>>>7)|(wim15<<25)) ^ ((wim15>>>18)|(wim15<<14)) ^ (wim15>>>3);
					var wim2 = a[72+i-2];
					var s1 = ((wim2>>>17)|(wim2<<15)) ^ ((wim2>>>19)|(wim2<<13)) ^ (wim2>>>10);
					a[72+i] = a[72+i-16] + s0 + a[72+i-7] + s1;
				}
				var A = a[64];
				var B = a[65];
				var C = a[66];
				var D = a[67];
				var E = a[68];
				var F = a[69];
				var G = a[70];
				var H = a[71];
				for(var i=0; i<64; i++){
					/* S1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)
					ch := (e and f) xor ((not e) and g)
					temp1 := h + S1 + ch + k[i] + w[i]
					S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)
					maj := (a and b) xor (a and c) xor (b and c)
					temp2 := S0 + maj
					h := g
					g := f
					f := e
					e := d + temp1
					d := c
					c := b
					b := a
					a := temp1 + temp2
					*
					var s1 = ((E>>>6)|(E<<26)) ^ ((E>>>11)|(E<<21)) ^ ((E>>>25)|(E<<7));
					var ch = (E&F) ^ ((~E)&G);
					var temp1 = H + s1 + ch + a[i] + a[72+i];
					var s0 = ((A>>>2)|(A<<30)) ^ ((A>>>13)|(A<<19)) ^ ((A>>>22)|(A<<10));
					var maj = (A&B) ^ (A&C) ^ (B&C);
					var temp2 = s0 + maj;
					H = G;
					G = F;
					F = E;
					E = D + temp1;
					D = C;
					C = B;
					B = A;
					A = temp1 + temp2;
				}
				a[64] += A;
				a[65] += B;
				a[66] += C;
				a[67] += D;
				a[68] += E;
				a[69] += F;
				a[70] += G;
				a[71] += H;
			}
			//RETURN h0..h7 = a[64..71]
			//byte ret[] = new byte[32];
			var ret = new Uint8Array(32);
			for(var i=0; i<8; i++){
				var ah = a[64+i];
				ret[i*4] = (ah>>>24)&0xff;
				ret[i*4+1] = (ah>>>16)&0xff;
				ret[i*4+2] = (ah>>>8)&0xff;
				ret[i*4+3] = ah&0xff;
			}
		};
		*/


		//Works for sha256. About a variant of it... FIXME when optionalParam_skipPadding is true (have been using it as undefined meaning false) make the number of chunks not include padding size,
		//so can do 1 sha256 cycle on 64 bytes without padding, for example. This could be useful for wikib ids cuz each node has 2 child nodes, so 32+32 bytes in, 32 bytes out,
		//of which 24 bytes are used and the other 8 bytes are header (the first 8 bytes of id). TODO 512 bit (64 byte) ids as option for high security uses,
		//which might (todo???) have 384 bits of hash and 128 bits of header??? Or the same 64 bits of header and 448 bits of hash??? Might want to do it as a multihash/multicodec id?
		//Lots of possible kinds of ids to explore later. Any fn can be an idMaker if it returns a cbt of the same size for any fn as its param.
		//
		//returns a mutable Uint8Array(32).
		//Uint8Array(any size) in. Uint8Array(32) out.
		//WARNING, TODO CHECK SECURITY OF SHA3_256: checkIfSha3PermutationStepIsUnitaryAndIfItsNotThenCheckThatItExpandsItFirstInWayThatsSecureAgainstCreatingCollisionsInTheFirstNonunitarySoCalledPermutation
		//	But the main reason using sha256 instead of sha3_256 is sha256 is faster in CPU (and faster than that in GPU, todo find it i wrote that code using lazycl somewhere, was around 50 gflops i think) even though SHA3_256 is designed to be even faster in GPU (todo verify).
		vm.sha256 = function(bytesIn, optionalParam_skipPadding){
			//https://raw.githubusercontent.com/benrayfield/jsutils/master/src/sha256.js slightly modified by adding optionalParam_skipPadding param

			//var t = typeof bytesIn;
			//if(t != 'Uint8Array') throw 'Expected Uint8Array but got a '+t; //this check wont work because its like a map of index to byte
			
			var chunks = Math.floor((bytesIn.byteLength+(optionalParam_skipPadding?0:9)+63)/64); //512 bit each
			
			//Copy bytesIn[] into b[], then pad bit1, then pad bit0s,
			//then append int64 bit length, finishing the last block of 512 bits.
			//byte b[] = new byte[chunks*64];
			var b = new Uint8Array(chunks*64);
			
			//System.arraycopy(bytesIn, 0, b, 0, bytesIn.byteLength);
			b.set(bytesIn, 0);
			
			if(!optionalParam_skipPadding){
				b[bytesIn.byteLength] = 0x80;
			
				//long bitLenTemp = bytesIn.byteLength*8;
				var bitLenTemp = bytesIn.byteLength*8; //in js, this has float64 precision, which is more than enough for Uint8Array size
				for(var i=7; i>=0; i--){
					b[b.byteLength-8+i] = bitLenTemp&0xff;
					bitLenTemp >>>= 8;
				}
			}
			
			//log('b as hex = '+bitfuncs.uint8ArrayToHex(b));
			
			
			var a = new Uint32Array(136);
			//"first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311"
			a[0]=0x428a2f98;
			a[1]=0x71374491;
			a[2]=0xb5c0fbcf;
			a[3]=0xe9b5dba5;
			a[4]=0x3956c25b;
			a[5]=0x59f111f1;
			a[6]=0x923f82a4;
			a[7]=0xab1c5ed5;
			a[8]=0xd807aa98;
			a[9]=0x12835b01;
			a[10]=0x243185be;
			a[11]=0x550c7dc3;
			a[12]=0x72be5d74;
			a[13]=0x80deb1fe;
			a[14]=0x9bdc06a7;
			a[15]=0xc19bf174;
			a[16]=0xe49b69c1;
			a[17]=0xefbe4786;
			a[18]=0x0fc19dc6;
			a[19]=0x240ca1cc;
			a[20]=0x2de92c6f;
			a[21]=0x4a7484aa;
			a[22]=0x5cb0a9dc;
			a[23]=0x76f988da;
			a[24]=0x983e5152;
			a[25]=0xa831c66d;
			a[26]=0xb00327c8;
			a[27]=0xbf597fc7;
			a[28]=0xc6e00bf3;
			a[29]=0xd5a79147;
			a[30]=0x06ca6351;
			a[31]=0x14292967;
			a[32]=0x27b70a85;
			a[33]=0x2e1b2138;
			a[34]=0x4d2c6dfc;
			a[35]=0x53380d13;
			a[36]=0x650a7354;
			a[37]=0x766a0abb;
			a[38]=0x81c2c92e;
			a[39]=0x92722c85;
			a[40]=0xa2bfe8a1;
			a[41]=0xa81a664b;
			a[42]=0xc24b8b70;
			a[43]=0xc76c51a3;
			a[44]=0xd192e819;
			a[45]=0xd6990624;
			a[46]=0xf40e3585;
			a[47]=0x106aa070;
			a[48]=0x19a4c116;
			a[49]=0x1e376c08;
			a[50]=0x2748774c;
			a[51]=0x34b0bcb5;
			a[52]=0x391c0cb3;
			a[53]=0x4ed8aa4a;
			a[54]=0x5b9cca4f;
			a[55]=0x682e6ff3;
			a[56]=0x748f82ee;
			a[57]=0x78a5636f;
			a[58]=0x84c87814;
			a[59]=0x8cc70208;
			a[60]=0x90befffa;
			a[61]=0xa4506ceb;
			a[62]=0xbef9a3f7;
			a[63]=0xc67178f2;
			//h0-h7 "first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19"
			a[64]=0x6a09e667;
			a[65]=0xbb67ae85;
			a[66]=0x3c6ef372;
			a[67]=0xa54ff53a;
			a[68]=0x510e527f;
			a[69]=0x9b05688c;
			a[70]=0x1f83d9ab;
			a[71]=0x5be0cd19;
			//a[72..135] are the size 64 w array of ints
			for(var chunk=0; chunk<chunks; chunk++){
				var bOffset = chunk<<6;
				//copy chunk into first 16 words w[0..15] of the message schedule array
				for(var i=0; i<16; i++){
					//Get 4 bytes from b[]
					var o = bOffset+(i<<2);
					a[72+i] = ((b[o]&0xff)<<24) | ((b[o+1]&0xff)<<16) | ((b[o+2]&0xff)<<8) | (b[o+3]&0xff);
				}
				//Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:
				for(var i=16; i<64; i++){
					//s0 := (w[i-15] rightrotate 7) xor (w[i-15] rightrotate 18) xor (w[i-15] rightshift 3)
					//s1 := (w[i-2] rightrotate 17) xor (w[i-2] rightrotate 19) xor (w[i-2] rightshift 10)
					//w[i] := w[i-16] + s0 + w[i-7] + s1
					var wim15 = a[72+i-15];
					var s0 = ((wim15>>>7)|(wim15<<25)) ^ ((wim15>>>18)|(wim15<<14)) ^ (wim15>>>3);
					var wim2 = a[72+i-2];
					var s1 = ((wim2>>>17)|(wim2<<15)) ^ ((wim2>>>19)|(wim2<<13)) ^ (wim2>>>10);
					a[72+i] = a[72+i-16] + s0 + a[72+i-7] + s1;
				}
				var A = a[64]; //TODO replace "var" with "let" in case "var" puts it into global namespace in some systems.
				var B = a[65];
				var C = a[66];
				var D = a[67];
				var E = a[68];
				var F = a[69];
				var G = a[70];
				var H = a[71];
				for(var i=0; i<64; i++){
					/* S1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)
					ch := (e and f) xor ((not e) and g)
					temp1 := h + S1 + ch + k[i] + w[i]
					S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)
					maj := (a and b) xor (a and c) xor (b and c)
					temp2 := S0 + maj
					h := g
					g := f
					f := e
					e := d + temp1
					d := c
					c := b
					b := a
					a := temp1 + temp2
					*/
					var s1 = ((E>>>6)|(E<<26)) ^ ((E>>>11)|(E<<21)) ^ ((E>>>25)|(E<<7));
					var ch = (E&F) ^ ((~E)&G);
					var temp1 = H + s1 + ch + a[i] + a[72+i];
					var s0 = ((A>>>2)|(A<<30)) ^ ((A>>>13)|(A<<19)) ^ ((A>>>22)|(A<<10));
					var maj = (A&B) ^ (A&C) ^ (B&C);
					var temp2 = s0 + maj;
					H = G;
					G = F;
					F = E;
					E = D + temp1;
					D = C;
					C = B;
					B = A;
					A = temp1 + temp2;
				}
				a[64] += A;
				a[65] += B;
				a[66] += C;
				a[67] += D;
				a[68] += E;
				a[69] += F;
				a[70] += G;
				a[71] += H;
			}
			//RETURN h0..h7 = a[64..71]
			//byte ret[] = new byte[32];
			var ret = new Uint8Array(32);
			for(var i=0; i<8; i++){
				var ah = a[64+i];
				ret[i*4] = (ah>>>24)&0xff;
				ret[i*4+1] = (ah>>>16)&0xff;
				ret[i*4+2] = (ah>>>8)&0xff;
				ret[i*4+3] = ah&0xff;
			}
			return ret;
		};
		
		
		
		
		
		
		
		
		
		
		
		
		//3 times bigger if so, but has the advantage that you only need the toString outputs of all the relevant lambdas
		//to copy all those lambdas to another computer without needing to try many pairs of them to find what is the
		//left and right childs of which of them so its squared times faster but 3 times more storage. There are of course faster ways if you store many
		//of them together, but each [parent left right] can be written in a sentence on a forum as a self contained lambda
		//that tells you what other lambdas to look for (maybe in other sentences or big lists of such [parent left right] on IPFS or something, to find them.
		vm.nodeToStringIncludesChilds = true;
		
		//else localId which is 2 ints of autoIncrement and 2 ints of from and to index in a wrapped array if there is such an array.
		vm.nodeToStringIsGlobalId = true;
		
		vm.nodeToStringPrefix = 'λ';
		
		//just 1 of parent left right. nodeToString may concat 3 of these or just use parent.
		vm.nodeToStringOne = function(){
			let evilbitStr = 'TODOEVILBITSTR';
			if(vm.nodeToStringIsGlobalId === undefined) throw 'FIXME bind or what? this is getting disorganized for some funcs to be in vm and some in vm.Node.prototype';
			if(vm.nodeToStringIsGlobalId){
				throw 'TODO globalId and toString of it';
			}else{
				//TODO? return vm.nodeToStringPrefix+evilbitStr+this.slowLocalId();
				return vm.nodeToStringPrefix+evilbitStr+this.slowLocalId();
			}
		};
		
		vm.nodeToString = function(node){
			if(vm.nodeToStringIncludesChilds === undefined) throw 'FIXME bind or what? this is getting disorganized for some funcs to be in vm and some in vm.Node.prototype';
			if(vm.nodeToStringIncludesChilds) return vm.nodeToStringOne(node);
			else return vm.nodeToStringOne(node)+vm.nodeToStringOne(node.L())+vm.nodeToStringOne(node.R());
		};
		
		//vm.base58Digits = 
		
		//true/false. TODO always store it as evil (since thats the most general, allowing (probably accidental) evil, good, and neutral), and just view it as good if requested.
		//literal 256 bits that fits in a 256 bit id (or similar for 512 bit ids) have evilBit==false. Theres just not room in them for even 1 bit of metadata. They have no header,
		//but they're small enough they they probably cant cause much of a problem. Combining 2 or more of them requires a node capable of having evilBit (true or false)
		//so its really a statement about a max of 256 or depending on id size 512 bits. Literals that do have a value, such as 1 2 4 8 16 32 64 or 128 bits, do have header,
		//so can have evilBit, even though its probably not very useful in such small literals.
		//If that becomes a problem, a new kind of id can be derived that always has header so can always have evilBit, by storing at most 128 bits of literal in a 256 bit id.
		vm.evilBitOf = function(headerInt){
			//FIXME theres multiple prefixes that have evilBit. Look around vm.callPairPrefixByte_evilBitOn for similar named things,
			//Basically theres a 5 bit prefix (0b11110) that if it matches then the next bit is an evilBit,
			//and if it doesnt match those first 5 bits
			//then its neutral (doesnt have a header so doesnt have an evilBit being true or false)
			//and is small enough its a literal that fits in an id.
			
			let x = (headerInt>>24)&0xff;
			return x==prefixByteOfOther_evilBitOn || x==callPairPrefixByte_evilBitOn; //FIXME theres faster way to do that, without 2 of ==, but might need to swap some of the constants in first byte.
			//return (headerInt>>24)&0xff == vm.callPairPrefixByte_evilBitOn; //a certain value of first byte. literal256thatfitinid or callPairPrefixByte_evilBitOff return false.
			
			
			/*vm.callPairPrefixByte_evilBitOn =  0b11110100; //FIXME might need to rearrange these bits so its easier to write as text in base64 or base58
			vm.callPairPrefixByte_evilBitOff = 0b11110000; //FIXME
			return (this.evilBitMaskOfHeaderInt&headerInt)?true:false;
			*/
		};
		
		//true/false. TODO always store it as evil (since thats the most general, allowing (probably accidental) evil, good, and neutral), and just view it as good if requested.
		vm.Node.prototype.evilBit = function(){
			return vm.evilBitOf(this.header);
		};
		
		/*
		TODO remove the mask_stackIsAllowImportEvilIds and just check for a certain prefix to know if its evil (call pair), good (call pair), or neutral (254 of them for 256 bit literals) namespace. Have vm.evilBit be true or false, and just use them as separate namespaces for generating ids, but allow import of any of them that vm.import func says to. User can replace vm.import function if they want. By default its not able to find anything, but future versions of this VM might hook into a peer to peer network if user checks a checkbox saying it can, andOr you can run a server with 50 people playing a game and sharing lambdas together in realtime, however you want to organize the sending and receiving of lambdas. There should be a kind of gas vm.gasUpload gasDownload or gasNetwork something like that. There should be a kind of gas* counted for each compute resource used, not a cryptocurrency just a local count of it to divide compute resources among lambdas. Or maybe the 50 remote players using such an experimental server together can have gas* on that server that lasts only as long as the game is running, like an hour. Players can copy/paste lambdas between different such servers andOr eachother.
		//stateful short-term way to upload and download stateless lambdas, such as between 50 players in a game together for an hour.
		vm.Server = function(){
			TODO
			
			TODO use mutableWrapperLambda?
			
			TODO gasUpload gasDownload stackTime stackMem, per user (by ed25519 or just secret url suffix?)? TODO recursiveExpireTime? zapeconacyc?
			
			join game by https://someaddress/passwordWfghsdf/roomXYZ ? way to move gas* from one place to another (by mutableWrapperLambda or by url?)
			no, make the url something shareable so https://someaddress/roomXYZ ?
			https://someaddress/lambda/id234wer324wr5sadrefasddfid234345id2343245324 ?
			
			
		};*/
		
		//vm.stackTime = 100000000; //fill these back up before starting another call at bottom of stack, to avoid running out, but not until the stack becomes empty.
		//vm.stackMem = 100000000;
		//vm.stackDeep = 200; //TODO should probably be higher, but might need to not use js stack if too deep.
		//vm.refill(); //set vm.stackTime vm.stackMem etc.

		vm.gasErr = 'gasErr';

		//see ops.Sandbox and vm.StackStuff class and vm.stackStuff instance of it
		vm.prepay = function(time,mem){
			let newTime = this.stackTime-time;
			let newMem = this.stackMem-mem;
			if(newTime <= 0 || newMem <= 0) throw this.gasErr;
			this.stackTime = newTime;
			this.stackMem = newMem;
			return undefined; //so you can || it with things for shorter lines of code
		};
		
		vm.prepay1Time = function(){
			if(!this.stackTime) throw this.gasErr;
			this.stackTime--;
		};
		
		vm.prepay1Mem = function(){
			if(!this.stackMem) throw this.gasErr;
			this.stackMem--;
		};
		
		//true or false
		vm.Node.prototype.isCbt = function(){
			//throw 'TODO replace vm.mask_isCbt with node.bize being some constant if its not a cbt';
			//return !!(this.header&vm.mask_isCbt);
			return this.bize != vm.BIZE_OF_NOT_A_CBT;
		};
		
		//true or false
		vm.Node.prototype.containsAxConstraint = function(){
			return !!(this.header&vm.mask_containsAxConstraint);
		};
		
		//You can turn an evaler (which is used by 0-infinity nodes, on or off using aNode.n.evaler.prev.prev.on = trueOrFalse.
		//and to find whichever is the nearest Evaler thats on, use aNode.n.getEvaler(),
		//and vm.lambdize(aNode)(vm.lambdize(bNode)) does that lambda call.
		//You normally use the lambdized form so you dont need to call lambdize directly or even know that Nodes exist.
		//Its stuff inside the wikibiantor203 VM.
		vm.Node.prototype.getEvaler = function(){
			let evaler = this.evaler;
			//if(!evaler) throw 'No evaler in thisNode='+this; //TODO optimize by removing this line since all Nodes will have evalers
			while(!evaler.on) evaler = evaler.prev;
			return evaler;
		};
		
		vm.Node.prototype.isLeaf = function(){
			return this.o8()==1;
		};

		
		//u().evaler starts as rootEvaler, but everything elsew uses pushEvaler.
		vm.Node.prototype.pushEvaler = function(evaler){
			if(evaler.on === undefined) evaler.on = true;
			evaler.prev = this.evaler;
			this.evaler = evaler;
		};
		
		vm.Node.prototype.o8Of = headerInt=>{
			return (headerInt>>16)&0xff;
		};
		
		//8 bit opcode, a bitstring of 0-7 bits then a high 1 bit. its 1 for u, and is 2*o8 or 2*o8+1 or o8 for next curry.
		//If o8 < 128 then full opcode isnt known yet, so its 2*o8 if r is u, and its 2*o8+1 if r is not u. Else o8 is just copied from l child.
		vm.Node.prototype.o8 = function(){
			return this.o8Of(this.header);
		};
		
		//not part of the wikibinator203 spec since those names can vary across different VMs.
		vm.Node.prototype.opName = function(){
			return vm.opInfo[this.o8()].name;
		};
		
		vm.Node.prototype.firstByteOf = function(headerInt){
			return (headerInt>>24)&0xff;
		};

		vm.Node.prototype.firstByte = function(){
			return this.firstByteOf(this.header);
		};
		
		/*vm.Node.prototype.isCbtOf = function(headerInt){
			//let o8 = this.o8();
			//return o8 == vm.o8OfBit0 || o8 == vm.o8OfBit1;
			//return (headerInt&0x00fe0000)==vm.o8OfBit0;
			//throw 'TODO replace vm.mask_isCbt with node.bize being some constant if its not a cbt';
			//return !!(headerInt&vm.mask_isCbt);
			throw 'Use node.bize != vm.BIZE_OF_NOT_A_CBT cuz vm.mask_isCbt was removed';
		};
		
		//this is a duplicate isCbt func, and has wrong code since header doesnt contain a cbt bit anymore, was replaced by node.bize != vm.BIZE_OF_NOT_A_CBT
		vm.Node.prototype.isCbt = function(){
			return this.isCbtOf(this.header);
		};*/

		//number of bits in the cbt, range 1 to [2 pow 247], if vm.log2OfMaxBits==247, as a double.
		//If not a cbt, TODO what should this return, or let it give nonsense answer since you shouldnt call it for that?
		vm.Node.prototype.cbtSize = function(){
			return 2**this.cbtHeight();
		};
		
		//For avl balancing Treemap or EmptyTreemap, and maybe also used in TreemapNorm.
		//Returns 0 if is anything other than an EmptyTreemap with 1 param (height 1) or a Treemap with 5 params (height 2 or more). Caches it.
		vm.Node.prototype.treemapHeight = function(){
			if(this.treemapHeight_ === undefined){
				let h;
				switch(this.o8()){
				case vm.o8OfTreemap:
					//(Treemap comparator leftTreemap key val rightTreemap)
					if(this.paramsSoFar()===5){
						h = 1+Math.max(this.leftTree().n.treemapHeight(), this.rightTree().n.treemapHeight());
					}else{
						//(Treemap comparator leftTreemap key) or Treemap etc
						h = 0;
					}
				break;case vm.o8OfEmptyTreemap:
					//(EmptyTreemap comparator)
					/*if(this.paramsSoFar()===1){
						h = 1;
					}else{
						//is EmptyTreemap or one of its non-normed forms (variants of the first 7 params that choose opcode/o8).
						h = 0;
					}*/
					h = this.paramsSoFar(); //0 if EmptyTreemap, 1 if (EmptyTreemap anything)
				break;default:
					//anything else, such as [hello world] or EmptyTreemap or (Treemap comparator leftTreemap key) or Treemap
					h = 0;
				}
				if(h < twoPow53){
					this.treemapHeight_ = h;
				}else{
					throw 'treemapHeight does not fit in double, max treemapHeight of pow(2,53)-1 in this VM, but in the spec theres no limit. In practice this should never happen even if you try to cuz the most unbalanced tree, similar to a list, would still need around tha pow(2,55) fns, and a balanced tree would need superexponentially many nodes (but could share branches to still only have around pow(2,55) unique nodes if it wasnt sorted correctly or if it is sorted correctly but has duplicates, and the spec technically allows non-treemap structures to be made with Treemap), to exceed this limit.';
				}
			}
			return this.treemapHeight_;
		};
		
		vm.Node.prototype.leftTree = function(){
			//TODO check for this, but its doing stackoverflow as of 2022-12-12: if(!this.isNonemptyTree()) throw 'Not a tree or is empty tree';
			return this.L().n.L().n.L().n.R(); //TODO func to do n L's then an R, to get a param.
		};
		
		vm.Node.prototype.rightTree = function(){
			//TODO check for this, but its doing stackoverflow as of 2022-12-12: if(!this.isNonemptyTree()) throw 'Not a tree';
			return this.R();
		};
		
		vm.Node.prototype.treeKey = function(){
			if(!this.isNonemptyTree()){
				throw 'Not a tree or is empty tree';
			}
			return this.L().n.L().n.R(); //TODO func to do n L's then an R, to get a param.
		};
		
		vm.Node.prototype.treeVal = function(){
			if(!this.isNonemptyTree()){
				throw 'Not a tree or is empty tree';
			}
			return this.L().n.R(); //TODO func to do n L's then an R, to get a param.
		};
		
		vm.Node.prototype.treeComparator = function(){
			if(this.isNonemptyTree()){
				return this.L().n.L().n.L().n.L().n.R(); //TODO func to do n L's then an R, to get a param.
			}else if(this.isEmptyTree()){
				return this.R();
			}else{
				return vm.infloop();
				//return vm.ops.GodelLessThan; //slow but most general comparator
			}
			
		};

		vm.isTreemapOrEmptyTreemap = fn=>(fn.n.isTree());
		
		//is a Treemap of 5 params or EmptyTreemap of 1 param?
		vm.Node.prototype.isTree = function(){
			return this.treemapHeight()>0; //0 if not a tree. 1 if EmptyTreemap of 1 param. 2 or more if Treemap of 5 params.
		};
		
		//true if its an EmptyTreemap with 1 param.
		vm.Node.prototype.isEmptyTree = function(){
			return this.treemapHeight()===1;
		};
		
		//make a non-empty tree node. Takes these params: comparator, leftTree, key, val, rightTree.
		vm.tree = (comparator, leftTree, key, val, rightTree)=>vm.ops.Treemap(comparator)(leftTree)(key)(val)(rightTree);
		//vm.tree = vm.ops.Treemap;
		
		//TODO: map can be any namespace: Ns, LamNs, Treemap, EmptyTreemap, Lambda, Mutlambda. TODO rename map param here to ns.
		vm.putNoBal = (putKey,putVal,map)=>{
			if(vm.isFullNs(map)){
				//(Ns namespaceA namespaceB)
				let nsNamespaceA = map.n.L();
				let namespaceA = nsNamespaceA.n.R();
				let namespaceB = map.n.R();
				if(vm.has(putKey, namespaceA)){
					let newNamespaceA = vm.putNoBal(putKey,putVal,namespaceA);
					return ops.Ns(newNamespaceA)(namespaceB);
				}else{
					let newNamespaceB = vm.putNoBal(putKey,putVal,namespaceB);
					return nsNamespaceA(newNamespaceB);
				}
			}else if(vm.isLambdoOrMutlambdo(map)){
				throw 'TODO lambda or mutlambda';
			}else if(vm.isFullLamNs(map)){
				throw 'TODO LamNs';
			}else if(vm.isTreemapOrEmptyTreemap(map)){
				let comparator = map.n.treeComparator();
				//FIXME update comments and opcode names cuz renaming TreemapPutNoBal to PutNoBal
				//let TreemapPutNoBal_putKey_putVal = l; //(PutNoBal putKey putVal), without map aka the last param.
				//FIXME what if map is an EmptyTreemap?
				if(map.n.isEmptyTree()){ //(EmptyTreemap comparator).
					return vm.tree(comparator,map,putKey,putVal,map); //use map as (EmptyTreemap comparator).
				}else{
					let foundKey = map.n.treeKey();
					let compared = comparator(putKey)(foundKey);
					if(compared===T){ //putKey < foundKey
						let newLeftTree = vm.putNoBal(putKey,putVal,map.n.leftTree());
						return map.n.replaceLeftTree(newLeftTree);
					}else{ //foundKey <= putKey
						if(foundKey.n.eq(putKey)){ //foundKey equals putKey
							//return map.n.replaceTreeKeyAndVal(putKey,putVal);
							return map.n.replaceTreeVal(putVal);
						}else{ //foundKey < putKey
							let newRightTree = vm.putNoBal(putKey,putVal,map.n.rightTree());
							return map.n.replaceRightTree(newRightTree);
						}
					}
				}
			}else if(map.n.o8() == vm.o8OfInfcur){
				//2023-8-3 bringing [] back as ns/namespace, but still need to check its length is even or odd?
				//(b% [a valA b valB c valC]) returns valB, for example. b% is (P b). Searches from end (c then b then a)
				//and returns first val of that key, even if theres duplicate keys. If list size (after 7th param) is odd
				//(even if you count those 7), it doesnt care, counts down by 2 from end anyways, and ignores the 8th param after U.
				let infcurList = map; //let infcurList = this.lam;
				//caller already does this, so just search for name: let searchName = ops.P(name); //the keys in [a valA b valB c valC] are a% b% c% aka (P a) (P b) (P c), similar to in Lambda and Mutlambda.
				if(!vm.isFullP(putKey)){
					//return null; //not found, cuz only (P a) aka a% or (P [hello world]) etc can be keys, such as in [a valA [hello world] valHelloWorld]
					vm.infloop(); //FIXME what should it do if its a key that it cant contain? [] can only contain keys like x% aka (P x) (P [hello world]) etc.
				}
				//let searchListItem = name.n.R(); //get a from a%, or get [hello world] from  (P [hello world]), etc.
				let searchListItem = putKey.n.R();
				let removedFromList = [];
				while(infcurList.n.paramsSoFar() >= 2){
					let val = infcurList.n.R();
					removedFromList.push(val);
					infcurList = infcurList.n.L();
					let key = infcurList.n.R();
					removedFromList.push(key);
					infcurList = infcurList.n.L();
					//if(searchName.n.eq(key)){
					//if(name.n.eq(key)){
					if(searchListItem.n.eq(key)){
						//return val;
						removedFromList[removedFromList.length-2] = putVal; //replace val
						while(removedFromList.length){
							infcurList = infcurList(removedFromList.pop());
						}
						return infcurList;
					}
				}
				//return null; //not found
				return map(searchListItem)(putVal); //add R(putKey) and putVal at end of [].
			}else{
				throw 'putNoBal not know what to do with namespace='+map;
			}
		}
		
		//If this is a Treemap (TODO also allow EmptyTreemap and make a Treemap?) forkEdits it to have that leftTree.
		vm.Node.prototype.replaceLeftTree = function(newLeftTree){
			//TODO optimize by not calling so many funcs here. inline some of it to reuse shared code between those.
			if(this.isNonemptyTree()){
				return vm.tree(this.treeComparator(),newLeftTree,this.treeKey(),this.treeVal(),this.rightTree());
			}else if(this.isEmptyTree()){
				return newLeftTree; //FIXME this might be confusing to caller, but if param is a valid treemap, its ok.
				//return vm.tree(this.treeComparator(),this,this.treeKey(),this.treeVal(),this);
			}else{
				return vm.infloop();
			}
		};
		
		//only call this if you already know this is a Treemap of 5 params (not EmptyTreemap or anything else).
		vm.Node.prototype.replaceTreeKeyAndVal = function(putKey,putVal){
			//TODO optimize by inlining some stuff, instead of getting all 5 things...
			return vm.tree(this.treeComparator(),this.leftTree(),putKey,putVal,this.rightTree());
		};
		
		//only call this if you already know this is a Treemap of 5 params (not EmptyTreemap or anything else).
		vm.Node.prototype.replaceTreeVal = function(putVal){
			let Treemap_comparator_leftTree_key = this.L().n.L();
			return Treemap_comparator_leftTree_key(putVal)(this.R());
		};
		
		//If this is a Treemap (TODO also allow EmptyTreemap and make a Treemap?) forkEdits it to have that rightTree.
		vm.Node.prototype.replaceRightTree = function(newRightTree){
			//TODO optimize by not calling so many funcs here. inline some of it to reuse shared code between those.
			if(this.isNonemptyTree()){
				return vm.tree(this.treeComparator(),this.leftTree(),this.treeKey(),this.treeVal(),newRightTree);
			}else if(this.isEmptyTree()){
				return newRightTree; //FIXME this might be confusing to caller, but if param is a valid treemap, its ok.
				//return vm.tree(this.treeComparator(),this,this.treeKey(),this.treeVal(),this);
			}else{
				return vm.infloop();
			}
		};
		
		//vm.emptyTree(comparator) -> an empty treemap of that kind.
		vm.emptyTree = vm.ops.EmptyTreemap;
		
		//vm.put(key,val,map)->forkEditedAvlBalancedMap, the same as if by vm.ops.TreemapPut (this is how thats implemented).
		//TreemapPut must be balanced exactly the same as TreemapPutNoBal then DoAvlBal,
		//even though it may (TODO) be optimized to put and balance at the same time.
		//Determinism is a very important option as defined on stack using vm.mask_*.
		vm.put = (key,val,map)=>{
			console.log('FIXME vm.treemapPut (renamed to vm.put) is not balancing. should do the same as vm.ops.TreemapPutNoBal then vm.ops.DoAvlBal, but DoAvlBal isnt working yet 2022-12-12 so just using treemapPutNoBal for now.');
			return vm.putNoBal(key,val,map);
		};
		
		//treemap get value of key. This is just here to explain get and put. You'd probably just call map(key) directly instead of this.
		vm.get = (key,map)=>map(key);
		
		//remove a key/val from map. Return forkEdited map.
		vm.del = (delKey,map)=>{
			console.log('FIXME vm.del is not balancing. Using non-balanced ops for now, but thats not correct spec. Must do the same as vm.ops.DoAvlBal after the deletion, even if optimized to do it all together, must generate the same lambdas at the end.');
			
			let comparator = map.n.treeComparator();
			if(map.n.isEmptyTree()){ //(EmptyTreemap comparator)
				return map; //already deleted, nothing to do
			}else{
				let foundKey = map.n.treeKey();
				let compared = comparator(delKey)(foundKey);
				if(compared===T){ //delKey < foundKey
					let newLt = vm.del(delKey,map.n.leftTree());
					return map.n.replaceLeftTree(newLt);
				}else{ //foundKey <= delKey
					let lt = map.n.leftTree();
					let rt = map.n.rightTree();
					if(foundKey.n.eq(delKey)){ //foundKey equals delKey
						//use map.n.leftTree() and map.n.rightTree() without the key/val here between them.
						//This can be done with the rightmost key in leftTree or the leftmost key in rightTree.
						if(map.n.treemapHeight() === 2){ //would be 1 if empty, 0 if not a treemap/emptytreemap.
							//only has that 1 key/val, so return empty.
							//leftTree and rightTree are both, in theory, (EmptyTreemap comparator), of same comparator as me,
							//but even if they arent, the spec would still be correct, as long as its deterministic.
							return lt; //(EmptyTreemap comparator)
						}else{
							//Use the nearest key/val (rightmost of leftTree or leftmost of rightTree) of whichever is tallest,
							//since removing a key/val tends to reduce height, so on average theres less balancing to do.
							//TODO optimize: this could be done all at once instead of separately getting lastKey, getting its val, and deleting last key.
							if(lt.n.treemapHeight() >= rt.n.treemapHeight()){
								//move rightmost/last key in left child to center
								let lastKey = lt.n.treeLastKeyOrNull();
								if(!lastKey) throw 'No lastKey in lt='+lt;
								let lastVal = lt(lastKey);
								let newLt = vm.del(lastKey,lt);
								return vm.tree(comparator,newLt,lastKey,lastVal,rt); //FIXME spec requires vm.ops.DoAvlBal either here or as an optimization all at once
							}else{
								//move leftmost/first key in right child to center
								let firstKey = rt.n.treeFirstKeyOrNull();
								if(!firstKey) throw 'No firstKey in rt='+rt;
								let firstVal = rt(firstKey);
								let newRt = vm.del(firstKey,rt);
								return vm.tree(comparator,lt,firstKey,firstVal,newRt); //FIXME spec requires vm.ops.DoAvlBal either here or as an optimization all at once
							}
						}
					}else{ //foundKey < delKey
						let newRt = vm.del(delKey,rt);
						return map.n.replaceRightTree(newRt);
					}
				}
			}
		};

		//returns true or false. Assumes map is a Treemap Or EmptyTreemap.
		vm.treemapOrEmptytreemapHas = (getKey,map)=>{
			if(!map.n.isNonemptyTree()) return false;
			let comparator = map.n.treeComparator();
			let key = map.n.treeKey(); //(Treemap comparator leftTree key val rightTree)
			let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
			if(compared===T){ //getKey < key
				//ret = leftTreemap(getKey); //is normally another Treemap or EmptyTreemap
				return vm.has(key, map.n.leftTree());
			}else{ //key <= getKey
				if(getKey.n.eq(key)){ //getKey equals key
					//ret = val;
					return true;
				}else{ //key < getKey
					//ret = rightTreemap(getKey); //is normally another Treemap or EmptyTreemap
					return vm.has(key, map.n.rightTree());
				}
			}
		};
		
		//does a treemap have a given key? returns true/false (not T/F).
		//map can be a Treemap, EmptyTreemap, LamNs, Ns, Lambdo, or MutLambdo.
		vm.has = (getKey,namespace)=>{
			return !!namespace.n.pOrNull(getKey);
			/*
			let map = namespace; //TODO rename them all to namespace. map is just a kind.
			switch(map.n.o8()){
				case vm.o8OfTreemap: case vm.o8OfEmptyTreemap:{
					return vm.treemapOrEmptytreemapHas(getKey,map);
					/*if(!map.n.isNonemptyTree()) return false;
					let comparator = map.n.treeComparator();
					let key = map.n.treeKey(); //(Treemap comparator leftTree key val rightTree)
					let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
					if(compared===T){ //getKey < key
						//ret = leftTreemap(getKey); //is normally another Treemap or EmptyTreemap
						return vm.has(key, map.n.leftTree());
					}else{ //key <= getKey
						if(getKey.n.eq(key)){ //getKey equals key
							//ret = val;
							return true;
						}else{ //key < getKey
							//ret = rightTreemap(getKey); //is normally another Treemap or EmptyTreemap
							return vm.has(key, map.n.rightTree());
						}
					}*
				}break; case vm.o8OfLamNs:{
					if(vm.isFullLamNs(map)){
						//FIXME what if its a LamNs of a Lambdo/Mutlambdo that has some params missing (is waiting on 3 more params, for example) but got into a LamNs anyways?
						throw 'TODO';
					}else{
						return U; //not found cuz LamNs doesnt have enuf params
					}
				}break; case vm.o8OfNs:{
					throw 'TODO';
				}break; case vm.o8OfLambdo:{
					throw 'TODO';
				}break; case vm.o8OfMutlambdo:{
					throw 'TODO';
				}break; default:{
					throw 'TODO';
				}
			}*/
			
			/*break;case o.Treemap:{
			//vm.addOp('Treemap',null,false,6,'(Treemap (IdThenGodelLessThan IdMaker) leftChild key val rightChild key)->val. Avl treemap. leftChild andOr rightChild can be (EmptyTreemap (IdThenGodelLessThan IdMaker)). (IdThenGodelLessThan IdMaker) returns T or F for < vs >=. Check equals func, or call that twice, to know if equal.');
			//(Treemap (IdThenGodelLessThan IdMaker) leftChild key val rightChild key)
			let comparator = a;
			let leftTreemap = b;
			let key = c;
			let val = x;
			let rightTreemap = y;
			let getKey = z;
			//FIXME what should this return? T or F? Or 3 possible vals: [T F], [F F], [F T] for less eq right?
			//Or should it be T, I (identityfunc aka (F U), or F?
			
			/*
			if(key.eq(getKey)){ //check if it equals key here first, so theres less calls of the comparator which costs more than equals???
				ret = val;
			}else{
				let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
				let child = vm.bit(compared) ? leftChild : rightChild; //FIXME is this backward?
				ret = child(getKey);
			}*
			
			let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
			if(compared===T){ //getKey < key
				ret = leftTreemap(getKey); //is normally another Treemap or EmptyTreemap
			}else{ //key <= getKey
				if(getKey.n.eq(key)){ //getKey equals key
					ret = val;
				}else{ //key < getKey
					ret = rightTreemap(getKey); //is normally another Treemap or EmptyTreemap
				}
			}
			*/
		};
		
		/*
		//returns -1 if key should look in leftTree, 0 if in the key/val directly in that Treemap node, or 1 if should look in rightTree,
		//using map's own comparator.
		//TODO should a comparator return T/F or should it return 3 possible things?
		//As of 2022-12-4 its T/F but I'm thinking of changing it so dont have to call eq.
		vm.treeCompare = (key,map){
			if(!vm.isNonemptyTreeTree(map)) throw 'Not a tree';
			vm.comparator(map)(
		};*/

		vm.Node.prototype.pushNsWithLoopVar = function(key, val){
			key = vm.wrap(key); //in case not already a fn
			val = vm.wrap(val);
			let comparator = this.treeComparator(); //infloops if this doesnt have a comparator
			let empty = ops.EmptyTreemap(comparator);
			let namespaceOfOneKeyVal = vm.tree(comparator,empty,key,val,empty);
			return ops.Ns(namespaceOfOneKeyVal)(this.lam);
		};

		//Get outerNs from (Ns innerNs outerNs) if it is such a Ns of 2 params, else infloops (run out of gas)
		vm.Node.prototype.popNs = function(){
			if(vm.isFullNs(this.lam)){
				return this.R(); //Get outerNs from (Ns innerNs outerNs)
			}else{
				vm.infloop();
			}
		};


		//TODO 2023-6-10 vm.ifElse vm.If vm.unless vm.While etc should probably be removed???
		
		vm.ifElse = (condition, ifTrue, ifFalse, map)=>(vm.bit(condition(map)) ? ifTrue(map) : ifFalse(map));
		
		vm.If = (condition, ifTrue, map)=>(vm.bit(condition(map)) ? ifTrue(map) : map);
		
		vm.unless = (condition, ifFalse, map)=>(vm.bit(condition(map)) ? map : ifFalse(map));
		
		vm.While = (condition, loopBody, map)=>{
			while(vm.bit(condition(map))){
				map = loopBody(map);
			}
			return map;
		};
		
		//like Let in Lisp, except in wikibinator theres no state, other than in the given treemap (a stateless immutable state).
		vm.Let = (key, val, action, map)=>action(vm.put(key,val,map));
		
		//Like progn in lisp.
		//Example: vm.progn(vm.eval('[a b c d e]'),[vm.ops.L,vm.ops.L,vm.ops.R]) -> vm.eval('c')
		vm.progn = (state, actions)=>{
			for(let action of actions){
				state = action(state);
			}
			return state;
		};
		
		vm.Node.prototype.isNonemptyTree = function(){
			return this.treemapHeight()>1;
		};
		
		//returns null if this is not a treemap/emptytreemap of the right number of params, or if its empty.
		vm.Node.prototype.treeFirstKeyOrNull = function(){
			//0 if not a treemap/emptytreemap of the right number of params. 1 if EmptyTreemap of 1 param. 2 or more if Treemap of 5 params.
			//If it has 1 key/val then its a "Treemap of 5 params" whose left and right trees are normally an (EmptyTreemap comparator).
			let h = this.treemapHeight();
			if(h < 2) return null;
			if(h === 2) return this.treeKey();
			return this.leftTree().n.treeFirstKeyOrNull() || this.treeKey(); //in case left is empty
		};
		
		//returns null if this is not a treemap/emptytreemap of the right number of params, or if its empty.
		vm.Node.prototype.treeLastKeyOrNull = function(){
			//0 if not a treemap/emptytreemap of the right number of params. 1 if EmptyTreemap of 1 param. 2 or more if Treemap of 5 params.
			//If it has 1 key/val then its a "Treemap of 5 params" whose left and right trees are normally an (EmptyTreemap comparator).
			let h = this.treemapHeight();
			if(h < 2) return null;
			if(h === 2) return this.treeKey();
			return this.rightTree().n.treeLastKeyOrNull() || this.treeKey(); //in case right is empty
		};
		
		//a double. throws if height >= pow(2,53), cuz in the spec it approaches infinite height. Caches it.
		vm.Node.prototype.height = function(){
			if(this.height_ === undefined){
				let h;
				if(this.isCbt()){
					h = 7+this.cbtHeight();
					//gets the same answer as the "else" below but without triggering lazyEval of .L() and .R() recursively
					//which IF this is a wrapper of Uint8Array in this.blob
					//(in range this.blobFrom (inclusive byte index) to this.blobTo (exclusive byte index))
					//THEN triggering lazyEval would create more wrappers with same .blob (shared array) and different blobFrom and blobTo,
					//starting with half size range blobFrom to (blobFrom+blobTo)/2, and the other half is (blobFrom+blobTo)/2 to blobTo,
					//until it gets down to around 2 bytes (see Flyweight design-pattern, vm . something... where is that...)
					//then its small enough to be normal call pairs again (not wrapping .blob .
					//So this is here to compute height without triggering that lazyEval.
				}else{
					h = this.isLeaf() ? 0 : (1+Math.max(this.L().n.height(), this.R().n.height()));
				}
				if(h >= twoPow53) throw 'height is too big to fit in double, h='+h;
				this.height_ = h;
			}
			return this.height_;
		};
		
		vm.Node.prototype.fitsInId256 = function(){
			if(!this.isCbt()) return false;
			let siz = this.cbtSize();
			if(siz < 256) return true;
			if(siz == 256){
				let firstByte = this.byteAt(0);
				switch(firstByte){
					case vm.prefixByteOfOther_evilBitOn:
					case vm.prefixByteOfOther_evilBitOff:
					//case vm.callPairPrefixByte_evilBitOn:
					//case: vm.callPairPrefixByte_evilBitOff:
					//case vm.prefixByteOfIdOfIdOrOfAny256BitsA:
					case vm.prefixByteOfIdOfIdOrOfAny256BitsB:
					//case vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsA:
					case vm.prefixByteOfIdOfIdOfIdOrOfAny256BitsB:
						return false; //these must hash 2 child id256s, dont fit in id256 as literal.
					default:
						return true;
				}
			}
			return false; //cbt bigger than 256 bits
		};

		//If this is a cbt, then it is 2 pow cbtHeight bits. That ranges 1 bit to approx 2 pow 248 bits (FIXME thats not the exact right exponent?).
		//If not cbt, then I'm not sure what this will return, TODO. For efficiency, does not check if its a cbt, but TODO maybe it should?
		vm.Node.prototype.cbtHeight = function(){
			return vm.log2OfMaxBits-this.curriesLeft();
		};
		
		
		//header int is like: namespaceByte o8Byte curriesLeftByte maskByte
		
		vm.Node.prototype.curriesLeft = function(){
			return this.curriesLeftOf(this.header);
		};
		
		vm.Node.prototype.curriesLeftOf = function(headerInt){
			return (headerInt>>8)&0xff;
		};
		
		
		/*
		vm.Node.prototype.curriesLeft = function(){
			return this.curriesLeftOf(this.header);
		};
		
		vm.Node.prototype.curriesLeftOf = function(headerInt){
			if(this.isCbtOf(headerInt)) return 1; //pow(2,4088-rawCurriesLeft) is number of bits in cbt, and curriesLeft is always 1 for cbt.
			return this.rawCurriesLeftOf(headerInt); //rawCurriesLeft is number of curries left.
		};
		
		
		//raw means just get the 12 bits without checking if its cbt or not.
		//1 to 4094 if finite number of curries left, or 4095 for infinity curries left (never eval). or in some implementations 0 means evaling now.
		vm.Node.prototype.rawCurriesLeftOf = function(headerInt){
			return this.header&0xff;
		};

		//raw means just get the 12 bits without checking if its cbt or not.
		//1 to 4094 if finite number of curries left, or 4095 for infinity curries left (never eval). or in some implementations 0 means evaling now.
		//
		//curriesLeft is 12 bits and means 2 different things depending if its a cbt or not.
		//if cbt, curriesLeft is always 1, and height is 4088-uint12. It enforces that l and r childs are cbts of the same size.
		//If not cbt, then those 12 bits are the number of curries left.
		//
		vm.Node.prototype.rawCurriesLeft = function(){
			return thi.curriesLeftOf(this.header);
		};*/

		vm.Node.prototype.toString = function(){
			return this.vm.nodeToString(this);
			//return this.slowLocalId();
			//TODO 1 char prefix concat base58 form of 256 bit default kind of id, recursively.
		};
		
		vm.emptyFrozenArray = new Array();
		Object.setPrototypeOf(vm.emptyFrozenArray,null);
		Object.freeze(vm.emptyFrozenArray); //FIXME can you both set prototype to null and freeze, and is this the right order to do that?
		
		vm.emptyFrozenDoubleArray = new Float64Array(0); //would normally share a buffer between int array and double array, but if its size 0, that might do strange things?
		Object.setPrototypeOf(vm.emptyFrozenDoubleArray,null);
		Object.freeze(vm.emptyFrozenDoubleArray);
		
		vm.emptyFrozenIntArray = new Int32Array(0); //would normally share a buffer between int array and double array, but if its size 0, that might do strange things?
		Object.setPrototypeOf(vm.emptyFrozenIntArray,null);
		Object.freeze(vm.emptyFrozenIntArray);
		
		
		
		
		
		
		/*
		vm.OpmutState = function(whichOpmutSpace){
			this.o = whichOpmutSpace;
			
			throw 'TODO';
			
		};
		
		//Returns a Mut, at most 1 Mut per deduped fn.
		//wrap the fn in a Mut. If the fn is not deduped (check idA and maybe also idB) then wraps the deduped form instead.
		//A deduped fn always has blobFrom==0 and blobTo==0, so you only need id64 of the fn, combined with whichOpmutSpace,
		//to uniqely identify a Mut.
		vm.OpmutState.prototype.fnToMut = function(fn){
			throw 'TODO';
		};
		*/
		
		
		
		
		

		/*vm.Mut = function(n){
			this.m = {};
			this.d = new Float64Array(n);
		};*/
		
		/*
		See from above something like this[[[
			FIXED design keeps Mut mostly as it is, adds .j->fn and .g->string and has weaker merged gasTime/gasMem and only runs for a tiny fraction of a second so it wont run out of mem.
			..
			TODO asap, but confirm this solves the problem...
			Have ops for string length, concat, substring, etc.
			Have try/catch op for undefined[anything] where some things may return undefined.
			Have just 1 var in opmut that counts down with each thing done next, sometimes counts by variable amount like when string concat it will check their lengths.
			I'm guessing (TODO verify) that putting a big string as a map key doesnt cost the size of that string as its deduped or hashed or something... but im not sure.
			Opmut only happens, normally, for a small fraction of a second. Its unlikely to run out of memory at all.
			So if just use 1 gas* var, gasTimeAndOrMem, and subtract from it for heap allocation and for every write in a {}, then it cant infinite loop and must halt within some approximatable (though might vary by 10 times faster or slower) limit.
			..
			Mut.n size of Float64Array if need to have null prototype.
			Mut.m -> {} where key is string and val is [Mut or double or undefined]. (with null prototype?).
			Mut.d -> Float64Array, with null prototype. can use this for canvas pixel graphics (copy between them, but lambdas are still immutable, etc).
			Mut.g -> string
			Mut.j -> fn (u by default).
			...
			{hi:'hello'}+2
			2
			{hi:'hello'}+33
			33
			{hi:'hello'}*5
			VM176:1 Uncaught SyntaxError: Unexpected token '*'
			({hi:'hello'})*5
			NaN
			OK.

		]]];*/
		
		
		
		const objectThatReturns0ForAllFieldValues = new Proxy({}, { get(obj, prop){  return 0; } });
		Object.freeze(objectThatReturns0ForAllFieldValues);
		vm.objectThatReturns0ForAllFieldValues = objectThatReturns0ForAllFieldValues;
		
		//1 <= i <= 2**30. FIXME or is it 2**31?
		vm.roundUpToPowOf2 = i=>{
			if(i<=1) return 1;
			let leadingZeros = Math.clz32(i-1);
			return 2**(32-leadingZeros);
		};
		
		//adds at least 1 byte of padding, and pads a 1 bit then 0s until next powOf2. Returns byte array of powOf2 size.
		vm.padBytes = bytes=>{
			//FIXME some callers of this, if they give an empty byte array, should get back vm.ops.Bit1 (a cbt of 1 bit, the padding bit), instead of 0b10000000 ???
			
			//TODO optimize using prototype and something like vm.expandBytesToPowOf2 if can ever get that to work,
			//but for now just copy it to a new byte array if need to expand it.
			let newByteSize = vm.roundUpToPowOf2(bytes.length+1);
			let ret = new Uint8Array(newByteSize);
			for(let i=0; i<bytes.length; i++) ret[i] = bytes[i]; //TODO optimize by using a Uint8Array func (or in TypedArray) to copy a range.
			ret[bytes.length] = 0x80; //pad 1 bit and the rest up to the next powOf2 are 0s, but only put 7 of those 0s here
			for(let i=bytes.length+1; i<newByteSize; i++) ret[i] = 0; //TODO optimize, would it already be 0s?
			return ret;
		};
		
		/** this isnt working. pad to next powOf2 size (using vm.padBytes), at least for now....
		
		//Modifies its param (which can be Uint8Array (or maybe later also allow Int32Array etc). Keeps same length but adds cbt padding if any is needed.
		//Example: if its a Uint8Array size 19, pads a (byte)0 at index 19 (by setting key 19 to that,
		//and pads 0s after that up to size 32 by setting its prototype to vm.objectThatReturns0ForAllFieldValues.
		vm.expandBytesToPowOf2 = blob=>{
			let newByteSize = vm.roundUpToPowOf2(blob.length);
			let len = blob.length;
			if(newByteSize != len){
				Object.setPrototypeOf(blob, vm.objectThatReturns0ForAllFieldValues);
				blob[len] = 0b10000000; //pad 1 bit and the rest up to the next powOf2 are 0s, but only put 7 of those 0s here
			}
		};
		*/
		
		
		
		/*
		//TODO start all fields as undefined, since vals of [Mut, double, or undefined] (but not lambda or string, cuz those are wrapped in Mut) are allowed?
		
		UPDATE 2022-3-9 todo implement this...
		
		TODO asap make the lambdas of variable number of (lambda funcBody ?varA ?varb ?varc u ...paramsOfThatManyParamsUpTo240Something), AND make the Mut as described below, and do some basics graphics, sound, or something just start playing with it.



		FIXED design keeps Mut mostly as it is, adds .j->fn and .g->string and has weaker merged gasTime/gasMem and only runs for a tiny fraction of a second so it wont run out of mem.
		"Mut.m -> {} where key is string and val is [Mut or double or undefined], with null prototype?." prevents accidentally getting string when you expected double.
		..
		TODO asap, but confirm this solves the problem...
		Have ops for string length, concat, substring, etc.
		Have try/catch op for undefined[anything] where some things may return undefined.
		Have just 1 var in opmut that counts down with each thing done next, sometimes counts by variable amount like when string concat it will check their lengths.
		I'm guessing (TODO verify) that putting a big string as a map key doesnt cost the size of that string as its deduped or hashed or something... but im not sure.
		Opmut only happens, normally, for a small fraction of a second. Its unlikely to run out of memory at all.
		So if just use 1 gas* var, gasTimeAndOrMem, and subtract from it for heap allocation and for every write in a {}, then it cant infinite loop and must halt within some approximatable (though might vary by 10 times faster or slower) limit.
		..
		Mut.n size of Float64Array if need to have null prototype.
		Mut.m -> {} where key is string (may be made from double or undefined or concat of mutA.g with mutB.g etc) and val is [Mut or double or undefined], with null prototype?.
		Mut.d -> Float64Array, with null prototype. can use this for canvas pixel graphics (copy between them, but lambdas are still immutable, etc).
		Mut.g -> string
		Mut.j -> fn (u by default).
		...
		{hi:'hello'}+2
		2
		{hi:'hello'}+33
		33
		{hi:'hello'}*5
		VM176:1 Uncaught SyntaxError: Unexpected token '*'
		({hi:'hello'})*5
		NaN
		OK.
		..
		Can aMut.m.someStringABC cuz know 'someStringABC' is a string (dont need to wrap in a Mut in Mut.g),
		but otherwise the only keys accepted in it are from Mut.g.
		*
		//SOLUTION to 1 of the sandbox problems,
		//though maybe not the fastest, will get musical instruments and flexible recursion in opmut working soon,
		//which sandbox depends on js String and js Number dont have any of these fields (m d n, etc)...:
		vm.Mut = function(n, optionalString, optionalLambda){
			//this was the Mut class 2022-2, that was never done enough to use it, but am about to replace it with one that juses only arrays so will be faster
			//and not have to undo as much of javascript's existing behaviors such as + doing string concat and number plus. There are no strings in the newer design,
			//but you can still do concat of ranges of primitive array and use it like a string.
		
			//truncate to nonnegative int n even if its string or lambda or mut etc (which if they are not a double then becomes 0).
			//in js, int or float or byte are a subset of doubles.
			this.n = n&0x7fffffff;
			
			//view as thisMut<indexOfDouble>.
			//This is normally copied from Node.blob which is an Int32Array. Can get Int32Array.buffer and wrap that same buffer in a Float64Array.
			//In opmut, contents of .d and of .m are mutable, but in lambdas everything (except lazyEval cache of Node.bize etc) is used as immutable,
			//including that Node.blob is used as immutable even though it may technically be mutable but dont write it. ForkEdit only.
			//TODO start all fields as undefined, since vals of [Mut, double, or undefined] (but not lambda or string, cuz those are wrapped in Mut) are allowed?
			this.d = new Float64Array(this.n); //TODO reuse an empty Float64Array if !this.n aka this.n==0
			
			//view as thisMut[abc] or thisMut.xyz where value of abc is 'xyz', and root namespace (in an opmut call) is a Mut (maybe with just 1 key set to the param of opmut??),
			//and a "root namespace" normally only exists for .001 to .03 seconds between one video frame and the next or multiple such calls during one,
			//or for some uses maybe much longer or as fast as a microsecond.
			//Cycles are allowed in Mut.m that lead to that same Mut etc, but only during opmut
			//which is designed to be optimized by compiling to javascript code.
			//Lambdas cant have cycles while halted, but can eval in cycles or forever expanding etc.
			this.m = {};
		
			//string
			this.g = optionalString || '';
			
			//fn/lambda (lambdized wrapper of node)
			this.j = optionalLambda || u;
			
			//this.λ = null; //lambda (output of lambdize of Node) or null. or should lambda be value in Mut.m?
			
			//To make formal-verification easier and efficient, remove js prototype of fields of Mut,
			//except Object.getPrototypeOf(Mut.n) is Number, which cant be changed cuz for example 5.67 in js has no prototype pointer and is just literal bits,
			//similar to Object.getPrototypeOf('xyz') cant be changed and is always String. Number and String, of key n d or m, seem to always be undefined,
			//so will correctly throw if generated js code reads g.h.i where g.h returns a Number or a String or a lambda, but if it returns a Mut then .i is theMut.m.i
			//which may be undefined or have a value of string or double or lambda or Mut, and so on.
			//
			//block access to this.d.buffer and this.d.length etc in generated js code, without needing to do param|0..
			//Object.setPrototypeOf(this.d,null);
			//Object.setPrototypeOf(this.d.prototype, objectThatReturns0ForAllFieldValues); //FIXME dont set prototype here like that. set that once outside Mut constructor
			//block access to this.m.__lookupGetter__ etc in generated js code.
			//Object.setPrototypeOf(this.m,null);
			Object.setPrototypeOf(this.m, objectThatReturns0ForAllFieldValues);
		};
		Object.setPrototypeOf(Float64Array.prototype, objectThatReturns0ForAllFieldValues); //FIXME dont set prototype here like that. set that once outside Mut constructor
		Object.setPrototypeOf(vm.Mut.prototype, objectThatReturns0ForAllFieldValues);
		//FIXME lambdas (lambdize returns it) prototype should be objectThatReturns0ForAllFieldValues?
		//let protoProtoOfNumber = Object.getPrototypeOf(Object.getPrototypeOf(5));
		//Object.setPrototypeOf(vm.Mut.prototype, objectThatReturns0ForAllFieldValues);
		*/
		
		
		/*
		vm.OpmutState = function(hashtableSizeInNodes){
			
			
			
			this.log2OfIntsPerHashtableSlot = 3; //mutableIntVal mutablePtrToNode iummutableLeftPtr immutableRightPtr mutableDoubleA mutableDoubleB.
			//TODO fitting a max of 1<<25 nodes (actually just around half that cuz hashtable needs to be part empty, seems too small for some uses,
			//but consider that each node can have its own primitive array so can reach 64 bit sizes such as using a petabyte of memory, if your browser (or whatever the VM is ported to) supports it,
			//and nodes have (other than their left and right childs) mutable data (mutable pointer at node. mutable int, 2 mutable doubles, mutable pointer to fn/lambda, mutable pointer to Float64Array,
			//and maybe TODO Int32Array, Uint8Array, etc. The array of a node will be a pointer to a shared empty array of that type until its replaced, to avoid allocating unused arrays.
			if(hashtableSizeInNodes&(hashtableSizeInNodes-1)!=0 || hashtableSize < 1 || hashtableSize > (1<<25)) throw 'Invalid hashtableSize='+hashtableSize+' cuz must be a powOf2 in some range.';
			this.ptrMask = (this.ints.length-1)&~((1<<this.log2OfIntsPerHashtableSlot)-1);
			
			//trs are ints but lambdas and opmuts arent allowed to know what they are, just check them for equality. That way, different hash functions, VMs, etc, have the same input/output behaviors.
			
			//a hashtable with no removing, no tombstones. You use it (in this OpmutState) for a fraction of a second, as an optimization of a lambda call, then garbcol/garbageCollect the whole thing.
			//this.ints[ptr] is mutableIntVal
			//this.ints[ptr+1] is mutablePtrToNode
			//this.ints[ptr+2] is iummutableLeftPtr
			//this.ints[ptr+3] is immutableRightPtr
			//this.ints[ptr+4 to ptr+7] is not used here since thats where this.doubles overlaps it.
			this.ints = new Int32Array(hashtableSizeInNodes<<this.log2OfIntsPerHashtableSlot);
			
			//this.doubles[2+ptr>>1] is mutableDoubleA
			//this.doubles[3+ptr>>1] is mutableDoubleB
			this.doubles = new Float64Array(this.ints.buffer);
			
			//index is ptr. size is hashtableSizeInNodes lambdas.
			//FIXME fill with u? None should be null or undefined. Or use prototype for that to save memory?
			this.lambdas = new Array();
			
			//index is ptr. size is hashtableSizeInNodes lambdas.
			//FIXME fill with emptyDoubleArray? None should be null or undefined. Or use prototype for that to save memory?
			this.doubleArrays = new Array();
		};
		//TGDO hash func goes here, of 3 int params, the 2 ptrs to make pair of, and which number of hashing again it is, such as the third time it couldnt put something there it has to jump buckets.
		//a and b are divisible by 8. c is any nonneg int.
		vm.OpmutState.prototype.hash3IntsToBucket = (leftPtr,rightPtr,triedHowManyTimes)=>(vm.hash3Ints(a,b,c)&this.ptrMask);
		//like the lambda cp func except it just creates a pair of int ptrs, that is another int ptr, which is whatever hashtable bucket it ends up in.
		vm.OpmutState.prototype.cp = (leftPtr,rightPtr)=>{
			for(let triedHowManyTimes=0; triedHowManyTimes<256; triedHowManyTimes++){
				let parentPtr = this.hash3IntsToBucket(leftPtr,rightPtr,triedHowManyTimes);
				if(this.ints[2+parentPtr]==leftPtr && this.ints[3+parentPtr]==rightPtr) return parentPtr;
			}
			throw 'couldnt make parent ptr of '+leftPtr+' and '+rightPtr+'. Is hashtable near full? Or is hash3IntsToBucket a bad hash function?';
		};
		vm.OpmutState.prototype.i = ptr=>this.ints[2+ptr]; //mutableIntVal
		vm.OpmutState.prototype.I = (ptr,newIntVal)=>(this.ints[2+ptr]=newIntVal); //mutableIntVal
		vm.OpmutState.prototype.p = ptr=>this.ints[2+ptr]; //mutablePtrToNode
		vm.OpmutState.prototype.P = (ptr,newPtr)=>(this.ints[2+ptr],newPtr); //mutablePtrToNode. Ptrs are ints but lambdas and opmuts arent allowed to know what they are, just check them for equality. That way, different hash functions, VMs, etc, have the same input/output behaviors.
		vm.OpmutState.prototype.l = ptr=>this.ints[2+ptr]; //iummutableLeftPtr
		vm.OpmutState.prototype.r = ptr=>this.ints[3+ptr]; //immutableRightPtr
		vm.OpmutState.prototype.a = ptr=>this.doubles[2+ptr>>1]; //mutableDoubleA
		vm.OpmutState.prototype.A = (ptr,newDoubleVal)=>(this.doubles[2+ptr>>1]=newDoubleVal); //mutableDoubleA
		vm.OpmutState.prototype.b = ptr=>this.doubles[3+ptr>>1]; //mutableDoubleB
		vm.OpmutState.prototype.B = (ptr,newDoubleVal)=>(this.doubles[3+ptr>>1]=newDoubleVal); //mutableDoubleB
		vm.OpmutState.prototype.AB = (ptr,newDoubleValA,newDoubleValB)=>{
			let p = 2+ptr>>1;
			this.doubles[p] = newDoubleValA; //mutableDoubleA
			this.doubles[p+1] = newDoubleValB; //mutableDoubleB
		};
		
		
		//Mut_or_number.e is a number.
		let getZero = ()=>0;
		let getThisPlusZero = function(){ return this+0; };
		let emptyFrozenMap = {};
		Object.setPrototypeOf(emptyFrozenMap,objectThatReturns0ForAllFieldValues);
		Object.freeze(emptyFrozenMap);
		let getEmptyFrozenMap = ()=>emptyFrozenMap;
		//let emptyFloat64Array = {};
		let emptyFloat64Array = new Float64Array(0);
		//Object.setPrototypeOf(emptyFloat64Array,objectThatReturns0ForAllFieldValues);
		//Object.setPrototypeOf(emptyFloat64Array,objectThatReturns0ForAllFieldValues);
		Object.freeze(emptyFloat64Array);
		let getEmptyFloat64Array = ()=>emptyFloat64Array;
		vm.Mut.prototype.e = getZero;
		let protoProtoOfNumber = Object.getPrototypeOf(Object.getPrototypeOf(5));
		Object.defineProperty(protoProtoOfNumber, 'e', { get: getThisPlusZero });
		Object.defineProperty(protoProtoOfNumber, 'n', { get: getZero });
		Object.defineProperty(protoProtoOfNumber, 'm', { get: getEmptyFrozenMap }); //FIXME use objectThatReturns0ForAllFieldValues instead of freezing?
		Object.defineProperty(protoProtoOfNumber, 'd', { get: getEmptyFloat64Array }); //FIXME use objectThatReturns0ForAllFieldValues instead of freezing?
		Object.defineProperty(protoProtoOfNumber, 'j', { get: ()=>u });
		//Now (in theory todo test) every number, as long as its in parens, acts like a Mut, but values of Mut_or_number_or_undefined are still a problem when thats undefined since undefined.anything throws.
		if((10+20).e != 30) throw 'Number proto proto didnt work';
		if((10+21).n != 0) throw 'Number proto proto didnt work';
		if((10+21).d.length != 0) throw 'Number proto proto didnt work';
		//
		//TODO try this to get rid of undefined in {}...
		//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get
		/*Using a computed property name
		const expr = 'foo';
		const obj = {
		  get [expr]() { return 'bar'; }
		};
		console.log(obj.foo); // "bar"
		*/
		//or this https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
		/*it works, todo get rid of the undefined in {} and replace it with 0.
		Proxy
		ƒ Proxy() { [native code] }
		x = {};
		{}
		z = {
		  get(bb){
			  return 'abc';
		  }
		}
		{get: ƒ}
		z.hi
		undefined
		cc = new Proxy({}, {
		  get(obj, prop) {
			return 'hello';
		  }
		});
		Proxy {}
		cc.yo
		'hello'
		cc[undefined]
		'hello'
		x.hello
		undefined
		Object.setPrototypeOf(x,cc);
		{}
		x.a = 'b'
		'b'
		x.c
			constructor(params) {
				
			}
		}
		VM722:2 Uncaught SyntaxError: Unexpected token '{'
		x.c
		'hello'
		*/
		/*
		2022-3-9
		valing l=s(t)(t) r=s(pair)(l)
		wikibinator203.js:2371 Evaling l=f r=u
		wikibinator203.js:2371 Evaling l=s r=f(u)
		wikibinator203.js:2371 Evaling l=f r=u
		wikibinator203.js:2371 Evaling l=s(f(u)) r=f(u)
		wikibinator203.js:2371 Evaling l=s(f(u))(f(u)) r=pair
		(5).d
		Float64Array []
		(5).e
		5
		(5).n
		0
		(5).j
		ƒ (param){
					
					//TODO test the code NODE.evaler(NODE.lam,param) which should do this.
					//TODO evaler, so can put various optimizations per node. chain of evalers with evaler.on defining which i…
		''+(5).j
		'u'
		''+(5).m.hello
		'0'
		(5).m.hello
		0
		(5).m.helloasdf
		0
		(5).m[undefined]
		0
		(22*33).m.testab
		0
		*/






		












		
		//These mut* funcs take Mut or double as param, which all have the fields n m d g j e. n is array size. m is {}/map. d is Float64Array. g is string. j is fn/lambda. e is double value.
		//the prototype of prototype of Number has been modified to have all those fields, such as (10+7).m is a {}, and (10+7).j==u, and (10+7).e==17.
		//undefined is not allowed as a value. In theory these things have been modified to never return undefined when used certain ways that js code can be generated for.
		//mut* primitive math...
		const mutPlus = (a,b)=>(a+b);
		const mutMult = (a,b)=>(a*b);
		const mutSin = a=>Math.sin(a);
		
		//mut* controlflow such as loops, if/else, and sequence of code...
		
		//condition and loopBody are function(mut)->mut.
		//mutableState is a Mut
		const mutWhile = (condition,loopBody,mutableState)=>{
			while(condition(mutableState)){
				//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
				loopBody(mutableState);
			}
			return mutableState; //also mutableState may have been modified
		};
		
		const mutDoWhile = (loopBody,condition,mutableState)=>{
			do{
				//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
				loopBody(mutableState);
			}while(condition(mutableState));
			return mutableState; //also mutableState may have been modified
		};
		
		const mutFor = (start, condition, afterLoopBody, loopBody, mutableState)=>{
			for(start(mutableState); condition(mutableState); afterLoopBody(mutableState)){
				//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
				loopBody(mutableState);
			}
			return mutableState; //also mutableState may have been modified
		};
		
		const mutIfElse = (condition,ifTrue,ifFalse,mutableState)=>{
			//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
			return (condition(mutableState) ? ifTrue : ifFalse)(mutableState);
		};
		
		const mutIf = (condition,ifTrue,mutableState)=>{
			//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
			return condition(mutableState) ? ifTrue(mutableState) : mutableState;
		};
		
		//a sequence of mut* funcs to call on a mutableState
		const mutProgn = (listOfMutFuncs,mutableState)=>{
			//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
			for(let mutFunc of listOfMutFuncs){
				//or should it just be: mutFunc(mutableState); without setting mutableState? might be more optimizable. but dont call it progn if so.
				mutableState = mutFunc(mutableState);
			}
			return mutableState;
		};
		
		const mutMapPut = (getMap,getKey,getVal,mutableState)=>{
			//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
			return getMap(mutableState).m[getKey(mutableState).g] = getVal(mutableState);
		};
		
		const mutMapGet = (getMap,getKey,mutableState)=>{
			//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
			return getMap(mutableState).m[getKey(mutableState).g];
		};
		
		const mutDoubleArrayPut = (getDoubleArray,getKey,getVal,mutableState)=>{
			//TODO check gas* when? todo rename gas* to stack* like vm.stackTime vm.stackMem
			//return getDoubleArray(mutableState).d[getKey(mutableState).e] = getVal(mutableState).e;
			return getDoubleArray(mutableState).d[getKey(mutableState)] = getVal(mutableState);
		};
		
		const mutDoubleArrayGet = (getDoubleArray,getKey,mutableState)=>{
			//TODO check gas* when?
			return getDoubleArray(mutableState).d[getKey(mutableState)];
		};
		
		const mutStringConcat = (getStringA,getStringB,mutableState)=>{
			//TODO check gas* when? and pay for length of new string in stackMem. todo rename gas* to stack* like vm.stackTime vm.stackMem
			let stringA = getStringA(mutableState).g;
			let stringB = getStringB(mutableState).g;
			vm.prepay(1,(stringA.length+stringB.length));
			return vm.wrapInMut(stringA+stringB); //FIXME create vm.wrapInMut func
		};
		
		//returns a new empty Mut
		const mutNewEmpty = ()=>{
			throw 'TODO';
		};
		
		//You can use Mut without this, but you might want to call opmut from inside funcBody of a lambda, and have easy access to the var names of that lambda.
		//lambdaCallingDatastruct is (pair_or_lazyeval (lambda funcBody ?a ?b ?varCDE u ...paramsExceptLast) lastParam).
		const mutPutLambdaParamsInMut = (lambdaCallingDatastruct, getMut)=>{
			throw 'TODO';
		};
		
		//a lambda that can be used as a mut* func. all of them can be but most just ignore it and return some constant (TODO). default way to compile to cpu is to generate js code string.
		const mutCompileForCpu = getLambda=>{
			throw 'TODO';
		};
		
		//a lambda that can be used as a mut* func. all of them can be but most just ignore it and return some constant (TODO). default way to compile to gpu is to generate GPU.js code string,
		//which will use float32 math, and have nondeterministic roundoff, instead of float64, but it can reach over a teraflop in a browser if not IO bottlenecked such as a 3d fractal,
		//else maybe around 30 gflops for matmul etc.
		const mutCompileForGpu = (lambdaCallingDatastruct, getMut)=>{
			throw 'TODO';
		};
		
		//TODO mut* func (or something that returns one)... wrap string, fn/lambda, double, (and maybe Int32Array andOr Float64Array etc) in Mut.
		//Use Object.freeze(theMut) to make a string constant so aLambda(rootMutGivenByOpmut) can generate efficient js code.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		//FIXME where do blobs go in here, that dont have a left and right child yet cuz its lazy and creating the top of the blob as wrapper node?
		
		//TODO faster localIds instead of strings in map. use an Int32Array and a [], or something like that, for faster hashtable specialized in Nodes.
		//vm.dedupMap = {};
		//FIXME put u in dedupMap
		
		/*vm.HashtableNode = function(val,next){
			this.val = val;
			this.next = next;
		};*/
		
		//TODO this replaces vm.dedupMap, doesnt create strings, and uses Node.idA .idB .blobFrom and .blobTo from 2 Nodes (8 ints) as key and parent Node as value.
		//Its a linked hashtable, containing vm.HashtableNode's whose .val is Node. Similar will be done for funcallCacheMap somewhere else. Or nulls?
		vm.dedupHashtable = [];
		for(let i=0; i<(1<<24); i++) vm.dedupHashtable.push(null); //TODO expand as needed, doubling size each time?
		vm.dedupHashtableMask = vm.dedupHashtable.length-1; //only works if its a powOf2.
		
		//vm.dedupHashtableBucket = (nodeA,nodeB)=>(vm.hash2Nodes(nodeA,nodeB)&vm.dedupHashtableMask);
		

		//TODO faster localIds instead of strings in map. use an Int32Array and a [], or something like that, for faster hashtable specialized in nodes.
		vm.funcallCacheMap = {};
		
		//FIXME this might cause problems with vm.Node.blob (shared Uint8Arrays each between 1 or more vm.Nodes) and maybe vm.Node in general and dedup problems.
		//2023-6 it makes some test cases fail but others still pass (todo write the number of tests and exact date).
		vm.clearCache = function(){
			console.log('vm.clearCache');
			vm.funcallCacheMap = {};
			vm.dedupHashtable = []; //FIXME push nulls???
			//TODO? vm.clearAllCachedJsEval(); might need to also remove evalers generated at runtime (by js eval of transpilers) if so?
		};
		

		//2023-6 this isnt used anymore. might find another use for it later? Use LamNs instead of this.
		//
		//BTFL is Bring To Front List, made of Infcur/[] aka "stream/[]".
		//I'm making it a BTFL, instead of just appending, so it doesnt get too big.
		//I'm also going to optimize most uses of it so it doesnt get stored as a BTFL
		//except at the start and end of loops in loops in loops combined with if/else += etc,
		//aka MutLam etc.
		//
		//Key is any k where the list contains (k v). Example: [a b c] is key in [a b c val].
		//There will be a few opcodes to be prefixes of keys, though you dont have to use them.
		//One will have an Ob, Key, and Val. Another just a Key and Val. And another a Key and CbtAsVal.
		//The Ob Key Val is for object oriented programming,
		//done for .01 second between copying state back to lambdas, for example.
		//
		//Returns U if there is no value stored for it.
		vm.btflGet = (list,searchKey)=>{
			while(list.hasMoreThan7Params()){
				let foundKeyAndVal = list.n.R();
				let foundKey = keyAndVal.n.L();
				if(searchKey.n.eq(foundKey)){
					return foundKeyAndVal.n.R(); //foundVal
				}
				list = list.n.L(); //btfl list 1 foundKeyAndVal shorter
			}
			return U; //not found, or is found but is mapped to U.
		};
		
		//keyAndVal example: [a b c val]. Key example: [a b c].
		//TODO If val.eq(U) then deletes it, since its val would be U.
		vm.btflPut = (list,keyAndVal)=>{
			let searchKey = keyAndVal.n.L();
			let newVal = keyAndVal.n.R();
			let listWithFirstOfThoseDeleted = vm.btflDel(list,searchKey);
			return listWithFirstOfThoseDeleted(keyAndVal); //in a [] list, whatever its called on is appended.
		};
		
		//set val to U is same as deleting it. Deletes only the first one found.
		vm.btflDel = (list,searchKey)=>{
			//FIXME dont let js stack get too deep. If stackoverflow then use a loop here instead.
			if(list.hasMoreThan7Params()){
				let foundKeyAndVal = list.n.R(); //(foundKey foundVal)
				let foundKey = keyAndVal.n.L();
				//list without foundKeyAndVal. Its possible searchKey is in
				//there again (multiple times), but thats not how a btfl is supposed to work.
				let listWithout_foundKeyAndVal = list.n.L();
				if(searchKey.n.eq(foundKey)){
					return listWithout_foundKeyAndVal;
				}else{
					return vm.btflDel(listWithout_foundKeyAndVal, searchKey);
				}
			}else{
				return list; //return vm.ops.Infcur; //[]
			}
			
			/*if(newVal.isLeaf()){
				return vm.btflDel(list,searchKey);
			}else{
				let stack = []; //put the other key/vals back, that go past to find one and forkEdit its value (if exists)
				while(list.hasMoreThan7Params()){
					let foundKeyAndVal = list.n.R();
					stack.push(foundKeyAndVal); //to put it back after forkEdit something deeper in list
					let foundKey = keyAndVal.n.L();
					list = list.n.L(); //btfl list 1 foundKeyAndVal shorter
					if(searchKey.n.eq(foundKey)){
						let newVal = keyAndVal.n.R();
						
					}
				}
			}
			*/
		};
		
		

		/*
		//TODO remove this
		vm.dedupKeyOfNode = function(isLeaf,func,param){
			//TODO see comment "dont concat strings to create key" in similar code.
			this.prepay(1,2); //FIXME?
			return isLeaf+"_"+func().slowLocalId()+"_"+param().slowLocalId();
		};
		*/
		
		//TODO use faster hashtable specialized in things having 4 ints.
		vm.Node.prototype.slowLocalId = function(){
			//TODO see comment "dont concat strings to create key" in similar code.
			//FIXME need to pay this somewhere but dont have vm param here: vm.prepay(1,2);
			return this.idA.toString(16)+"_"+this.idB.toString(16)+"_"+this.blobFrom.toString(16)+"_"+this.blobTo.toString(16);
		};

		//FIXME must have 4 ints of salt and 3 bits of kinds of clean, on stack, for funcall cache.
		vm.dedupKeyOfFuncallCache = function(func,param,optionalStackStuff){
			//TODO dont concat strings to create key. just look it up without creating heap mem, in a hashtable specialized in 128+128 bit keys (128 bits of localId per lambda).
			//But until then, dedupKeyOfFuncallCache will prepay to include stackMem, instead of just stackTime.
			this.prepay(1,4); //FIXME?
			return "cache_"+func().slowLocalId()+"_"+param().slowLocalId()+"_"+(optionalStackStuff || vm.defaultStackStuff);
		};


		//increases every time any FuncallCache is used, so can garbcol old funcallcaches.
		vm.touchCounter = 0;
		
		const twoPow32 = Math.pow(2,32);
		const twoPow53 = Math.pow(2,32);
		const randInt = ()=>(Math.floor(Math.random()*twoPow32)|0); //FIXME does this make negatives ever? Its supposed to.
		const randIntSize = size=>Math.floor(Math.random()*size); //FIXME does this make negatives ever? Its supposed to.
		//const hashIntSalts = new Int32Array(13);
		const hashIntSalts = new Int32Array(30);
		const hashingInts = new Int32Array(9); //put 8 ints in here (5 from each of 2 Nodes) starting at index 0 to hash, and get the hash from index 8.
		for(let i=0; i<hashIntSalts.length; i++) hashIntSalts[i] = randInt();
		
		//random int from pow(2,30) to pow(2,31)-1, to mod hash ints by so bigger digits hash into all digits not just the small digitis.
		//Max hashtable size is pow(2,30) cuz of this, and cuz it has to be a powOf2 size so can efficiently mask lambda.hashInt to get bucket.
		//But since each node can potentially contain an Int32Array of up to (todo somewhere around, whats the exact max) pow(2,31) bits,
		//including that some nodes share the same array, it can still reach 64 bit sizes
		//such as if the browser supports using a terabyte or petabyte of RAM, or if this VM is ported to other systems that can.
		//Its normally a very low memory system, but depends how you use it.
		for(let i=8; i<hashIntSalts.length; i++) hashIntSalts[i] = (hashIntSalts[i]&0x7fffffff)|(1<<30); //make it range 1<<30 to 1<<31-1.
		//hashIntSalts[8] = (hashIntSalts[8]&0x7fffffff)|(1<<30);
		//hashIntSalts[12] = (hashIntSalts[12]&0x7fffffff)|(1<<30);
		
		
		vm.hash3Ints = (a,b,c)=>{
		//vm.hash3Ints = (p,q,r)=>{
			//let a = p^q;
			//let b = q^r;
			//let c = r^p;'
			
			let C = c+a+b; //cuz c is so often 0, and second most common is 1, then 2, 3, and so on, up to max number of buckets searched in hashtable per key is 256 (should average around 2).
			
			let B = a+b;
			
			let d = (hashIntSalts[21]+(a*hashIntSalts[9])%hashIntSalts[10]);
			let e = (hashIntSalts[22]+(B*hashIntSalts[13])%hashIntSalts[14]);		
			let f = (hashIntSalts[23]+(C*hashIntSalts[17])%hashIntSalts[18]);
			
			let g = ((hashIntSalts[24]+a*hashIntSalts[11])%hashIntSalts[12]);
			let h = ((hashIntSalts[25]+B*hashIntSalts[15])%hashIntSalts[16]);
			let i = ((hashIntSalts[26]+C*hashIntSalts[19])%hashIntSalts[20]);
			
			//minorityBit(d,e,f)*minorityBit(g,h,i), where minorityBit(a,b,c)==~(maj(a,b,c)) like in sha256 "maj",
			//an NP math op  of 3 bits -> 1 bit, but in this case 32 times at once.
			//return hashIntSalts[27]+(~(d&e)^(e&f)^(f&d))*(~(g&h)^(h&i)^(i&g));
			return hashIntSalts[27]+(hashIntSalts[28] + ~(d&e)^(e&f)^(f&d))*(hashIntSalts[29] + ~(g&h)^(h&i)^(i&g));
			
			//this hash function might be overkill of number of salts used. i dont want to waste alot of space in hashtables of int mut ids,
			//but i dont want to make mutCp(int,int)->int too slow. its sparse, and thats necessarily going to be slower than sequential memory access, of course.
		};
		//FIXME this is too weak a hash function. needs miniorityBit ((a&b) ^ (b&c) ^ (c&a)), and maybe some extra % and *,
		//but keep in mind that % and * are expensive compared to + & ^ etc, but since the bottleneck in CPU is usually memory bandwidth thats ok.
		//vm.hash3Ints = (a,b,c)=>((
		//	(Math.imul(a,hashIntSalts[9]) +  Math.imul(b,hashIntSalts[10]) + Math.imul(c,hashIntSalts[11]))%hashIntSalts[12]
		//)|0);
		
		vm.hash2Nodes = (a,b)=>{
			//TODO find some way to not check this IF just for u. its slowing down all the hashing.
			
			//FIXME verify a is identityfunc and b is u.
			
			
			if(!a || (!b.idA && !b.idB)) return 1; //overly complex???... u doesnt have l and r childs when its created. those are added soon after, but hashtable is used first. TODO optimize by just setting u.hashInt andOr u().hashInt. the 2 childs of u will be identityFunc and u.
			hashingInts[0] = a.idA;
			hashingInts[1] = a.idB;
			hashingInts[2] = a.blobFrom;
			hashingInts[3] = a.blobTo;
			hashingInts[4] = b.idA;
			hashingInts[5] = b.idB;
			hashingInts[6] = b.blobFrom;
			hashingInts[7] = b.blobTo;
			hashingInts[8] = 0;
			for(let i=0; i<8; i++) hashingInts[8] += Math.imul(hashingInts[i],hashIntSalts[i]); //dotProd with onceRandomAtJsBoot salts
			return hashingInts[8]%hashIntSalts[8];
		};
		
		/*
		vm.hash10Ints = (d,e,f,g,h,i,j,k,l,m)=>(
			d*hashIntSalts[0]
			+ e*hashIntSalts[1]
			+ f*hashIntSalts[1]
			+ g*hashIntSalts[1]
			+ h*hashIntSalts[1]
			+ i*hashIntSalts[1]
			+ j*hashIntSalts[1]
			+ k*hashIntSalts[1]
			+ l*hashIntSalts[1]
			+ m*hashIntSalts[1];
			a*vm.hashIntSaltA + b*vm.hashIntSaltB + c*vm.hashIntSaltC
		);*/

		//TODO use Node.lazyReturn (UPDATE: 2022-6 I dont remember what that is? did i remove it? TODO),
		//as a different way of funcall caching, but this way with the touch uses less memory and is a little faster.
		//but as a demo of the math, make both ways work. it can be done without this kind of FuncallCache at all.
		vm.FuncallCache = function(func,param,optionalStackStuff){
			this.func = func;
			this.param = param;
			
			//FIXME should this be the top StackStuff instead of vm.defaultStackStuff? See the code around vm.mask_* and
			//vm.stackTime and vm.stackMem etc. Theres a current StackStuff too.
			this.stackStuff = optionalStackStuff || vm.defaultStackStuff;
			
			this.ret = null; //func, param, and ret, are all what lambdize returns.
			//should it be this? //this.touch = ++vm.touchCounter;
			this.touch = ++this.touchCounter; //for garbcol of old funcallcaches. FIXME this.touchCounter? or vm.touchCounter? why was i thinking that vm==this? doesnt seem like that would be true.
			this.hashInt = vm.hash3Ints(func.hashInt,param.hashInt,this.stackStuff.hashInt);
		};
		
		

		//returns a vm.FuncallCache, not its ret, so you can read or write its ret. Sets its FuncallCache.touch to newest of any FuncallCache.
		//salt isnt needed in pure clean mode, but if you want stackTime stackMem etc, to repeat the same call without getting the same return value from earlier cache, use salt.
		//salt is any 4 ints. Normally the first lambda call uses a random salt, and unitary transforms it by 2 different transforms as it takes different paths on stack,
		//but only changes salt when it wants to fork a different run of the same lambda call.
		//Whena all 4 iscleanvsdirty bits are 0, the same run of the same lambda call always returns the same lambda, but its useful to limit compute cycles and memory
		//and for some lambda calls to take different paths depending on if other lambda calls run out of compute resources or not, recursively.
		//Since there are many possible optimizations and that may vary across wikibinator203 VMs, the amounts of compute resources are nondeterministic,
		//and so are what digital signatures mutableWrapperLambda may find or not find, or find a newer one if theres multiple.
		//The 4 bits are to allow or not allow various kinds of nondeterminism, recursively on stack can tighten but not loosen.
		vm.funcallCache = function(func, param, optionalStackStuff){
			
			
			//TODO dont concat strings to create key. just look it up without creating heap mem, in a hashtable specialized in 128+128 bit keys (128 bits of localId per lambda).
			//But until then, dedupKeyOfFuncallCache will prepay to include stackMem, instead of just stackTime.
			let key = this.dedupKeyOfFuncallCache(func, param, optionalStackStuff);
			let cache = this.funcallCacheMap[key];
			if(cache){
				this.prepay(1,0);
			}else{
				this.prepay(1,4);
				cache = this.funcallCacheMap[key] = new this.FuncallCache(this,func,param,optionalStackStuff)
			}
			cache.touch = ++this.touchCounter;
			return cache;
		};
		
		//vm.o8OfIdentityFunc = 5000; //FIXME thats the wrong number

		//2 params gives a call pair. 3 params gives call pair of first 2, then call pair of that with third param. and so on for more params.
		//1 param is just that param. 0 params is identityFunc.
		//(func,param) or more params to curry...
		//FIXME vararg might be slow. use separate func for vararg cp
		//FIXME should some of the mask bits (vm.mask_*) in lambda.n.header (an int) be a param here,
		//such as if you want to make a cp/callPair of an evaling node or that allows hypercomputing?
		vm.cp = function(){
			//TODO divide cp into 2 funcs, one with 2 params and 1 with variable number of params, for efficiency.
			switch(arguments.length){
				case 0: return this.identityFunc;
				case 1: return arguments[0];
				case 2:
					let func = arguments[0];
					let param = arguments[1];
					if(param().o8()==1 && func().o8() == this.o8OfIdentityFunc){ //"tie the quine knot" (see test cases about that)
						vm.prepay1Time();
						return this.u; //the only node whose o8 is 1, but I'm making a point by implementing it without using == on nodes, just on bytes.
					}else{
						
						/*
						//TODO use faster kind of localIds and dedup than string. but for now i just want to get it working asap. GPU optimize, js code eval optimize, webasm optimize, etc later.
						let key = this.dedupKeyOfNode(false,func,param);
						return this.dedupMap[key] || (this.prepay(0,1) || (this.dedupMap[key] = vm.lambdize(new this.Node(this,func,param))));
						*/
						
						//Look in hashtable for node with those 2 childs, else create it.
						
						//TODO optimize: this code looks too big and slow, but will be be fast enough since most calculations will be done in blobs, GPU, evalers, etc
						//and only use this code when no compiled optimizations exist for the relevant lambda call. But still, it could probably be faster...
						
						//TODO optimize: If its 2 cbts sharing the same Node.blob that are adjacent then store parent pointer in them. just check parent pointer.
						
						
						let funcNode = func(), paramNode = param();
						let bucket = vm.hash2Nodes(funcNode,paramNode)&vm.dedupHashtableMask; //its a linked hashtable so its either in that bucket or not in the hashtable
						let lambda = vm.dedupHashtable[bucket]; //null if bucket is empty, else lambda.htNext is next lambda in linkedlist of bucket
						while(lambda){
							vm.prepay1Time();
							if(lambda.n.equalsByLazyDedupOf2ChildNodes(funcNode,paramNode)){
								return lambda; //found it, reuse that instead of creating another node of same forest shape
							}
							lambda = lambda.htNext; //linked list per bucket. Example: vm.eval('(Pair S T)').htNext is either undefined or next in linkedlist
						}
						//didnt find that forest shape. create one.
						this.prepay1Mem();
						//vm.dedupHashtable[bucket] is null or a vm.HashtableNode first in linkedlist that doesnt contain the node looking for.
						lambda = vm.lambdize(new vm.Node(vm,func,param));
						lambda.htNext = vm.dedupHashtable[bucket]; //linked list per bucket.
						vm.dedupHashtable[bucket] = lambda;
						return lambda;
						
						
						/*
						let bucket = vm.hash2Nodes(func,param)&vm.dedupHashtableMask; //its a linked hashtable so its either in that bucket or not in the hashtable
						let htNode = vm.dedupHashtable[bucket];
						let funcNode = func(), paramNode = param();
						while(htNode){
							vm.prepay1Time();
							//TODO optimize by HashtableNode storing Node instead of the lambdize wrapper of it, so can use htNode.val instead of htNode.val()?
							if(htNode.val().equalsByLazyDedupOf2ChildNodes(funcNode,paramNode)){
								return htNode.val; //found it, reuse that instead of creating another node of same forest shape
							}
							htNode = htNode.next;
						}
						//didnt find that forest shape. create one.
						this.prepay1Mem();
						//vm.dedupHashtable[bucket] is null or a vm.HashtableNode first in linkedlist that doesnt contain the node looking for.
						let lambda = vm.lambdize(new this.Node(this,func,param));
						vm.dedupHashtable[bucket] = new vm.HashtableNode(lambda, vm.dedupHashtable[bucket]);
						*/
						
						
						//return lambda;
					}
				break;
				default:
					let ret = arguments[0];
					for(let i=1; i<arguments.length; i++) ret = this.cp(ret,arguments[i]);
					return ret;
			}
		};
		
		
		//to use the same localNames etc, across multiple tostring calls of fn, lambdaToString fills this in if its null.
		vm.viewer = null;
		
		//WARNING: this might display a fn.localName without its (...expanded definition...)
		//if it was defined in an earlier eval or lambda tostring,
		//which produces code thats not self-contained, which needs that earlier code string to work.
		//To avoid that, use new vm.Viewer() every time.
		vm.getViewer = function(){
			throw 'Dont use getViewer. make a new vm.Viewer() instead';
			if(!vm.viewer) vm.viewer = new vm.Viewer();
			return vm.viewer;
		};

		//vm.lambdaToString is used as toString field in every [function(fn){...} that lambdize makes (which is a fn)].
		//Example, in js, ''+S(T)(T) returns '(S T T)' or something like that (TODO finish the default syntax).
		vm.lambdaToString = function(){
			if(vm.booted){
				//return vm.getViewer().fnToString(this); //recursive code string
				//let viewer = vm.getViewer(); //see "WARNING" about shared Viewer
				let viewer = new vm.Viewer();
				return viewer.fnToString(this); //"this" function that was returned by lambdize, aka this (someNode.lam).
			}else{
				//display simpler way
				if(this.localName) return this.localName; //starts as the op names, and can name other lambdas (which are all constants), but it doesnt affect ids since its contentAddressable.
				if(this().isLeaf()) return 'U'; //TODO remove this line since .localName will find 'U', but verify that while its working better.
				
				//what is this()? In vm.lambdaToString, this is a fn (output of lambdize). anyFn()==anyFn.n==theNodeOfThatFn.
				//lambdize puts it there, since Object.setPrototypeOf((new function(x){...}), ...) doesnt work for
				//functions BEFORE they're called. You can only use prototype after a js function is called,
				//especially when called by the new keyword.
				//Thats why every fn has 2 main objects, the js function (of 1 param) form, and as a vm.Node instance.
				//aNode.lam.n.lam.n.lam.n===aNode. aFn.n.lam===aFn. aFn()==aFn.n,
				//but might replace aFn() with just aFn.n depending on speed tests.
				//
				//TODO replace all fn() with fn.n for speed, but make sure to test which is faster.
				else return this().l+'('+this().r+')'; //as js code. but a similar syntax (used after vm.booted) is '(myL myR)' etc.
				//TODO? return this().slowLocalId(); //FIXME return a 45 char 256 bit globalId similar to (this one is made up) λDY8pvwNhj5DtiJBdyzN5H5kS1Hrc3286zZ8mKKnmkPHj
			}
		};

		//wraps a vm.Node in a javascript lambda of 1 param.
		//The output of lambdize is a fn (a wikibinator203 lambda). fnA(fnB)->fnC.
		//This allows using .prototype for object-oriented implementation of the lambdas
		//while they're still javascript lambdas.
		//vm.lambdize(nodeA).n===nodeA.
		//vm.lambdize(nodeA)()===nodeA.
		//vm.lambdize(nodeA)().idA or .otherFieldsOfNode .
		//vm.lambdize(nodeA).n.idA or .otherFieldsOfNode .
		//vm.lambdize(nodeA).n.lam===vm.lambdize(nodeA).
		//vm.lambdize(nodeA)===vm.lambdize(nodeA)
		vm.lambdize = function(node){
			if(node.lam) return node.lam;
			const NODE = node;
			const VM = this;
			//let lambda = function(param){
			let lambda = function(param){

				//FIXME should this happen only in (vm,func,param)=>{...} evalers (such as vm.rootEvaler and those added by pushEvaler?
				//This could slow it down since it happens in every call, even though its just a few double ops.
				vm.prepay1Time();
				
				//TODO test the code NODE.evaler(NODE.lam,param) which should do this.
				//TODO evaler, so can put various optimizations per node. chain of evalers with evaler.on defining which in the chain is used.
				//use the first aNode.evaler where aNode.evaler.on such as aNode.evaler.prev.prev.on.
				
				//aLambda() returns the node it wraps. Example: aLambda().l or aLambda().r or aLambda().vm.Node
				//or aLambda().vm.FuncallCache or aLambda().header or aLambdas().bize or aLambda().idA or aLambda().blob.
				//TODO optimize: maybe it should be aLambda.n to get the Node?
				//TODO optimize: can lambdize and Node be merged? Would it interfere with vm.Node.prototype?
				if(param === undefined) return NODE; //FIXME remove this line after replace all someLambda() with someLambda.n. This is how to get the vm.Node that lambdize wraps.
				//FIXME if this param = vm.wrap(param); slows things down, figure out some other way to do it, like making the (vm,func,param)=>{...}'s used in pushEvaler do it to param?
				
				
				//If the speed stats go down from 400k lambda calls per second on cpu on a "Intel(R) Core(TM) i9-9900K CPU running at 4.7ghz (liquid cooled)" single threaded,
				//then this might be the cause. Also, it could be multithreaded if sync on the cached hashtable for func param return caching and dedup,
				//but it might only be worth it to multithread in GPU and across multiple computers at once cuz of being RAM cache-miss bottlenecked by heavy use of hashtables.
				param = vm.wrap(param); //in case !vm.isLambda(param), will wrap it in one. Maybe its a string or Float64Array or float64 or Uint8Array etc.


				try{
					if(--VM.stackDeep <= 0){
						console.log('stackDeep ran out. TODO remove this message since its not an error exactly, is something that opSpend should try/else.');
						throw VM.gasErr;
					}
					if(vm.logEveryLambdaCallAsFullToString){
						console.log('vm.logEveryLambdaCallAsFullToString, START calling FUNC['+NODE.lam+'] on PARAM['+param+']');
					}
					//let ret = NODE.getEvaler()(VM,NODE.lam,param); //eval lambda call, else throw if not enuf stackTime or stackMem aka
					let ret;
					let evaler = NODE.evaler;
					do{
						//returns null if evalers wants evaler.prev to do it instead, which (TODO) can happen if evaler is a transpile optimization
						//that doesnt know how to optimize that lambda call. vm.rootEvaler can do all calls, and vm.rootEvaler.on is always true,
						//so this loop should always succeed.
						while(!evaler.on){
							evaler = evaler.prev;
						}
						ret = evaler(VM,NODE.lam,param); //eval lambda call, else throw if not enuf stackTime or stackMem aka
					}while(!ret);
					//}while(ret !== null);
					if(!ret){
						throw 'No evaler worked. This should never happen since vm.rootEvaler can always do it.';
					}
					
					if(vm.logEveryLambdaCallAsFullToString){
						console.log('vm.logEveryLambdaCallAsFullToString, END calling FUNC['+NODE.lam+'] on PARAM['+param+'] RETURN['+ret+']');
					}
					return ret;
					//FIXME what is this here for?: prepay(number,number)
				}finally{
					++VM.stackDeep;
				}
			};
			lambda.n = NODE; //so you can get node by aLambda.n or by aLambda(). TODO optimize by removing the aLambda() way cuz its slower.
			//causes vm.isLambda(lambda)->true but vm.isLambda({isWikibinator203Lambda:true})->false
			lambda.isWikibinator203Lambda = true;
			//lambda = lambda.bind(this);
			lambda.hashInt = vm.hash2Nodes(node.l,node.r); //TODO optimize should hashInt go in node instead of lambda? does that make it harder to use?
			lambda.toString = vm.lambdaToString;
			return (node.lam = lambda);
		};
		
		
		//TODO pushEvaler with .on and .prev and (prepay,func,param) or maybe (vm,func,param)
		

		
		//vm.opcodeToO8 = {}; //string to o8
		//vm.opcodesDescription = {};
		//vm.nextOpO8 = 128; //128..255
		//vm.o8ToLambda = []; //o8 of 0 is either evaling or doesnt exist. o8 of 1 to 255 exists. Past that, they copy o8 from l child.
		//vm.o8ToLambda[0] = (x=>{throw 'o8 of 0 does nothing or is evaling';});
		vm.opInfo = []; //o8 to info
		vm.opNameToO8 = {}; //a cache of vm.opInfo, used in a switch statement in vm.rootEvaler. TODO optimize further by making a separate evaler for each op and a few other common lambdas.
		//prefix is like _ for Seq, as in _[...], a 1 char prefix that doesnt need a space between it and its param, or null to not have one. TODO rename prefix to opAbbrev.
		vm.addOp = (name,prefix,isStrange,curriesLeft,description,compileMap)=>{
			let o8 = vm.opInfo.length;
			if(o8 >= 256) throw 'Max 128 opcodes, whose o8 is 128 to 255. Tried to add vm.ops.'+name+'. 0 is evaling. 1 to 127 is the first 0-6 params, before the op is known at 7 params. If you want to redesign this to use different ops, you could replace the last half of vm.opInfo, but you must keep the first half. You could change it to have a different number of ops, such as 1024 ops, using a bigger array twice as big as the number of ops, but then youd need to take some bits from the header int such as only having 13 bits of curriesLeft so up to 8191 curries instead of 2^16-1 curries. But its a universal lambda and that shouldnt be needed. Everyone can use the same opcodes and make all possible programs with that. You might want to use a different universalLambda/opcodes if its easier to optimize for certain kinds of things, but I think this one will be GPU.js optimizable, javascript eval optimizable, etc. Or maybe make a separate kind of object called Blob thats simpler and faster than lambdize of Node, and have Node wrap Blob, and Blob will still have localId but that might overlap part or all of the blob content? Also, a double/float64 maybe should count as a Blob? TODO: auto dedup every lambdize/Node thats a cbt thats at most 256 bits or 512 bits if using 512 bit ids, so have a vm option for cbt height to dedup, and since big blobs that copy between cpu and gpu etc will be wrappers of Int32Array etc that are usually bigger than 256 bits, it will auto not dedup those (just wrap as it is), and wont need to create lambdize/Node for those in most cases (use them as js arrays).';
			//TODO vm.o8ToLambda[vm.nextOpO8] = 
			//vm.opcodeToO8[name] = vm.nextOpO8;
			//vm.opcodesDescription[name] = (description || 'TODO write description of opcode '+name);
			//vm.nextOpO8++;
			vm.opInfo.push({name:name, prefix:prefix, isStrange:isStrange, curriesLeft:curriesLeft, description:description, compileMap:compileMap});
			vm.opNameToO8[name] = o8;
			console.log('Add op '+name+' o8='+o8+' curriesLeft='+curriesLeft+' description: '+description);
			return o8;
		};
		let o8OfEvaling = vm.addOp('Evaling',null,true,0,' opcode 0 (of 0-255). This is either never used or only in some implementations. Lambdas cant see it since its not halted. If you want a lazyeval that lambdas can see, thats one of the opcodes (TODO) or derive a lambda of 3 params that calls the first on the second when it gets and ignores the third param which would normally be U, and returns what (thefirst thesecond) returns. Example: λ[func param ignore {func% param%}]',
			{ty:'unknown', langs:{}});
		if(o8OfEvaling != 0){
			throw 'o8OfEvaling='+o8OfEvaling+' but must be 0';
		}
		let o8OfU = vm.addOp('U',null,true,7,'the universal lambda aka wikibinator203. opcode 1 (of 0-255). There are an infinite number of other possible universal lambdas but that would be a different system. They can all emulate eachother, if they are within the turingComplete cardinality (below hypercomputing etc), aka all calculations of finite time and memory, but sometimes an emulator in an emulator... is slow, even with evaler optimizations.',{langs:{}});
		if(o8OfU != 1){
			throw 'o8OfU='+o8OfU+' but must be 1';
		}
		for(let o8=2; o8<128; o8++){
			//TODO 'op' + 2 hex digits?
			let numLeadingZeros = Math.clz32(o8);
			let curriesSoFar = 31-numLeadingZeros;
			let isStrange = false;
			let curriesLeft = 7-curriesSoFar;
			let name = 'Op'+o8.toString(2);
			vm.addOp(name, null, isStrange, curriesLeft, name+' has '+curriesSoFar+' params. Op is known at 7 params, and is copied from left child after that.',{langs:{}});
		}
		vm.o8OfF = vm.addOp('F',null,false,2,'the church-false lambda aka λy.λz.z. (f u) is identityFunc. To keep closing the quine loop simple, identityFunc is (u u u u u u u u u) aka (f u), but technically (u u u u u u u u anything) is also an identityFunc since (f anything x)->x. (l u)->(u u u u u u u u u). (r u)->u. (l u (r u))->u, the same way (l anythingX (r anythingX))->anythingX forall halted lambda anythingX.',
			{ty:'bit', langs:{}});
		if(vm.o8OfF != 128) throw 'vm.o8OfF must be 128 so (L U) -> (U U U U U U U U U) and (R U) -> U, to close the quine loop.';
		/*let throwTrFnsTySlev = (tr,fns,ty,slev)=>{
			throw 'TODO Transpiler='+tr+' fns='+fns+' ty='+ty+' slev='+slev;
		};*/
		let throwTrFnTy = (tr,fn,ty,optionalPrefix)=>{
			throw 'TODO Transpiler='+tr+' fn='+fn+' ty='+ty+' optionalPrefix='+optionalPrefix;
		};
		vm.o8OfT = vm.addOp('T',',',false,2,'the church-true lambda and the k lambda of SKI-Calculus, aka λy.λz.y',
			{
				tyFunc: (fn=>((fn.n.cur)==7 ? 'bit' : 'key')), //T is bit. (T x) aka ,x is key aka pointer aka use it as a fn/lambda/object. T/, is often used with S/{}/<>. S and T together are turing complete.
				//ty:'bit',
				langs:{
					/*js: (tr,fn,ty)=>{
						if(ty == 'gNum'){
							let literalNum = fn.n.R(); //like 2.34 in ,2.34
							return tr.num(literalNum);
						}else if(ty == 'gKey'){
							//,x should return the Mut whose primaryKey is (whichOpmutIndex,x).
							let literalMutPrimaryKey = fn.n.R(); //like x in ,x
							return tr.key(literalMutPrimaryKey);
						}
						throwTrFnTy(tr,fn,ty);
					},*/
					/*js: (tr,fns,ty,slev)=>{
						if(slev == 0){
							//throw 'TODO T, fns='+fns;
							if(fns.length != 1){
								throw 'fns.length=='+fns.length;
							}
							let literal = fns[0].n.R();
							return tr.transpile([literal],'unknown',0); //FIXME should it -1 that?
							//tr.num(literal);

							//throw 'TODO return tr.transpile(...);';
						}
						throwTrFnsTySlev(tr,fns,ty,slev);
					},*/
					js: (tr,fn,ty,optionalPrefix)=>{
						//FIXME use ty here, or is the recursion enough?
						let literal = fn.n.R();
						if(optionalPrefix){
							literal = optionalPrefix(literal); //Example: in (DE ,x <* x$ x$>) the literal is x, and prefix is D so becomes (D x) aka x$. See js transpiler in addOp('DE'.
						}
						return tr.transpile(literal,ty,null);
					},
				}
			});
		if(vm.o8OfT != 129) throw 'vm.o8OfT must be 129.';
		vm.o8OfBit0 = vm.addOp('Bit0',null,false,vm.log2OfMaxBits,'complete binary tree is made of pow(2,cbtHeight) number of bit0 and bit1, evals at each curry, and counts rawCurriesLeft down to store (log2 of) cbt size',
			{ty:'unknown', langs:{}}); //FIXME is it 247 or 248 or what? or 4077 or what?
		if(vm.o8OfBit0 != 130) throw 'vm.o8OfBit0 must be 130.';
		vm.o8OfBit1 = vm.addOp('Bit1',null,false,vm.log2OfMaxBits,'see bit0',
			{ty:'unknown', langs:{}});
		if((vm.o8OfBit1 & 0b11111110) != vm.o8OfBit0) throw 'o8 of Bit0 must be even (for an optimization to check if its a bit) but is '+vm.o8OfBit0+' and o8 of Bit1 is '+vm.o8OfBit1;
		if(vm.o8OfBit1 != 131) throw 'vm.o8OfBit1 must be 131.';
		vm.o8IsOfCbt = o8=>((o8 & 0b11111110) == vm.o8OfBit0);
		vm.o8OfL = vm.addOp('L',null,false,1,'get left/func child. Forall x, (l x (r x)) equals x, including that (l u) is identityFunc and (r u) is u.',{ty:'unknown', langs:{}});
		vm.o8OfR = vm.addOp('R',null,false,1,'get right/param child. Forall x, (l x (r x)) equals x, including that (l u) is identityFunc and (r u) is u.',{ty:'unknown', langs:{}});
		vm.addOp('Isleaf',null,false,1,'returns t or f of is its param u aka the universal lambda, same as does OpByte param equal 0x01.',{ty:'unknown', langs:{}});

		//vm.addOp('ReservedForFutureExpansionJustSlidingSomeOtherOpcodesOver',null,false,1,'TODO',{langs:{}});
		
		//It is by design that a fn/lambda cant know evilbit==true vs evilbit==false about any fn/lambda,
		//since thats only a bit in some kinds of ids, a thing to say about a lambda, not about the lambda itself.
		
		
		
		vm.o8OfS = vm.addOp('S',null,false,3,'For control-flow. the S lambda of SKI-Calculus, aka λx.λy.λz.xz(yz)',
			{ty:'unknown', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					throw 'Doing S in .transpile func instead.';
					//return tr.transpile(fn,ty);
				}
				/*js: (tr,fns,ty,slev)=>{
					if(fns.length != 1){
						throw 'fns.length=='+fns.length;
					}
					let foundSlist = vm.sListToJsList(fns[0]);
					return tr.transpile(foundSlist,'unknown',1);

					//throw 'TODO 2023-6-12 copying some of this sListToJsListReversed sListToJsList stuff to wikib VM. Merge duplicate code by calling that from this UI...';
					//throw 'TODO <Lt x$ y$> etc. call the langs:js (tr,fn,ty) of the inner fn (Lt... in this case) but might need , vs S adjustment first.';
				}*/
			}});
		
		//vm.addOp('ReservedForFutureExpansionASDFASDFASDFJustSlidingSomeOtherOpcodesOver5555',null,false,1,'TODO',{ty:'unknown', langs:{}});

		vm.addOp('CC',null,false,3,'Comment. (CC [this is a comment] x y) -> (x y). You could for example put this around funcBody in lambda or mutlambda, which goes at end of param [] list.',{ty:'key', langs:{}});


		vm.addOp('Pair',null,false,3,'the church-pair lambda aka λx.λy.λz.zxy which is the same param/return mapping as Typeval, but use this if you dont necessarily mean a contentType and want to avoid it being displayed as contentType.',{ty:'unknown', langs:{}});
		vm.o8OfTypevalB = vm.addOp('TypevalB',null,false,3,'TypevalB: TypevalB is for viewing cbt as bitstring (with 100000... padding til next powOf2 size). TypevalC is viewing cbt as cbt (no padding, use whole powOf2 size, such as a double uses 64 bits). The church-pair lambda aka λx.λy.λz.zxy but means for example (TypevalB U BytesOfUtf8String) or (TypevalB (Typeval U BytesOfUtf8String) BytesOfWhateverThatIs), as in https://en.wikipedia.org/wiki/Media_type aka contentType such as "image/jpeg" or (nonstandard contentType) "double[]" etc. Depending on what lambdas are viewing this, might be displayed specific to a contentType, but make sure to keep it sandboxed such as loading a html file in an iframe could crash the browser tab so the best way would be to make the viewer using lambdas. UPDATE: doubles is d* and floats is f*, both of which could use TypevalB or TypevalC. double is d, and float is f, which normally use typevalC but could use a typevalB with padding.',
			{ty:'unknown', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					if(ty == 'key'){ //this will often be called by [gKey on ,varname] which calls this on just varname, to get Mut whose primaryKey is (whichOpmutIndex,varname).
						//throw 'Use tr.key(fn) instead of this???';
						return tr.key(fn);
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
				/*js: (tr,fns,ty,slev)=>{
					if(ty == 'key'){ //this will often be called by [gKey on ,varname] which calls this on just varname, to get Mut whose primaryKey is (whichOpmutIndex,varname).
						throw 'Use tr.key(fn) instead of this';
					}
					throwTrFnsTySlev(tr,fns,ty,slev);
				},*/
			}});
		vm.o8OfTypevalC = vm.addOp('TypevalC',null,false,3,
			'TypevalC: TypevalB is for viewing cbt as bitstring (with 100000... padding til next powOf2 size). TypevalC is viewing cbt as cbt (no padding, use whole powOf2 size, such as a double uses 64 bits). The church-pair lambda aka λx.λy.λz.zxy but means for example [replaced application/x-IEEE754-double with just d and replaced doubles with d*] (TypevalC d 0x0000000000000000) OLD:(TypevalC application/x-IEEE754-double 0x0000000000000000), means use powOf2 number of bits in the cbt without viewing the last n bits as padding',
			{ty:'unknown', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					switch(fn.n.L()){
						case vm.typeDouble: return ''+fn; //like '2.34'
						default:
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
				/*js: (tr,fns,ty,slev)=>{
					if(fns.length != 1){
						throw 'fns.length=='+fns.length;
					}
					//FIXME check ty. 'num' or 'unknown' allowed here?
					//switch(fn.n.L()){
					switch(fns[0].n.L()){
						case vm.typeDouble: return ''+fns[0]; //like '2.34'
						default:
					}
					throwTrFnsTySlev(tr,fns,ty,slev);
				},*/
			}}
		);
		if((vm.o8OfTypevalB&1)) throw 'vm.o8OfTypevalB must be even but is '+vm.o8OfTypevalB;
		if(vm.o8OfTypevalB+1 != vm.o8OfTypevalC) throw 'vm.o8OfTypevalB='+vm.o8OfTypevalB+' must be 1 less than vm.o8OfTypevalC='+vm.o8OfTypevalC;
		//TypevalB or TypevalC
		vm.o8IsOfTypeval = o8=>((o8 & 0b11111110) == vm.o8OfTypevalB);
		
		//vm.addOp('IsAllowSinTanhSqrtRoundoffEtc',null,false,1,'the 2x2 kinds of clean/dirty/etc. exists only on stack. only with both isClean and isAllowSinTanhSqrtRoundoffEtc at once, is it deterministic. todo reverse order?',{langs:{}});
		
		/*vm.addOp('ReservedForFutureExpansionZZZZZJustSlidingSomeOtherOpcodesOver5555',null,false,1,'TODO',{langs:{}});
		vm.addOp('ReservedForFutureExpansionYYYYYJustSlidingSomeOtherOpcodesOver5555',null,false,1,'TODO',{langs:{}});
		vm.addOp('ReservedForFutureExpansionXXXXJustSlidingSomeOtherOpcodesOver5555',null,false,1,'TODO',{langs:{}});
		*/
		
		/* I wrote code for this, "curriesLeft = 1+rCur; //FuncBody then paramVals." but todo test it.
		//
		fixme Lambda has to exist at 6 params, since [...param names...] in (Lambda [...param names...]) is 7th param,
		and number of params has to be known at 7th param, and there being more or less params in that chooses the number of params.
		Also, are there other ops which do that, or is it just Lambda? MutLam? VarargAx? etc?
		*/
		
		/*FIXMEFIXME Lambda has to refer to the 6 param form of it, so funcallcache doesnt reuse the 7 param form of it
		when params should differ but is reusing that instead.
		*/

		vm.addOp('GetSalt128',null,false,1,'(getSalt128 ignore)->the cbt128 of salt thats at top of stack aka 3-way-lambda-call of salt128 func and param.',{ty:'unknown', langs:{}});
		vm.addOp('WithSalt128',null,false,3,'(withSalt128 cbt128 func param)-> (func param) except with that cbt128 pushed onto the salt stack. During that, getSalt128 will get that cbt128.',{ty:'unknown', langs:{}});
		vm.addOp('WithSalt128TransformedBy',null,false,1,'(withSalt128TransformedBy funcOf128BitsTo128Bits func param)-> same as (withSalt128 (funcOf128BitsTo128Bits (getSalt128 u)) func param).',{ty:'unknown', langs:{}});

		//vm.o8OfOpOneMoreParam = vm.addOp('OpOneMoreParam',true,0,'Ignore See the lambda op. This is how to make it vararg. Ignore (in vm.opInfo[thisOp].curriesLeft cuz vm.opInfo[thisOp].isVararg, or TODO have 2 numbers, a minCurriesLeft and maxCurriesLeft. (lambda funcBody ?? a b ??? c d e) -> (funcBody (pair (lambda funcBody ?? a b ??? c d) e))',{langs:{}});
		vm.o8OfVarargAx = vm.addOp('VarargAx',null,true,1,'This is a Coq-language-like formal-verification opcode, but only finite sizes of compute, not infinite sizes. Incomplete.. (VarargAx FuncBody ..params... nextParam) is halted on itself if (FuncBody (LamNs (VarargAx FuncBody ...params...) nextParam)) -> U. If -> somethingElse, then returns (R somethingElse). It could form a parameter list can only contain prime numbers. Other calls dont halt. TODO replace [] in that with LamNs or if necessary make an AxNs but i want to keep it to just the 4 if can: Ns LamNs Treemap EmptyTreema, not add a fifth namespace type AxNs if can be avoided. https://twitter.com/wikibinator/status/1649574176238317569 ... OLD writing:.. For defining turing-complete-types. Similar to op Lambda in cleanest mode (no nondeterminism allowed at all, cuz its a proof) except that at each next param, its funcBody is called on the params so far [allParamsExceptLast lastParam] (UPDATE: should that be LamNs instead of []/Infcur (of 2 things)? or a fifth namespace type?) and returns U if thats halted else returns anything except U and takes the R of that to mean returns that. Costs up to infinity time and memory to verify a false claim, but always costs finite time and memory to verify a true claim, since a true claim is just that it returns U when all of those are called. Since its so expensive to verify, anything which needs such verifying has a vm.mask_* bit set in its id as an optimization to detect if it does or does not need such verifying (has made such a claim that things return U). FIXME varargAx has strange behaviors about curriesLeft and verifying it and halted vs evaling. Its 2 params at first but after that it keeps extending it by 1 more param, after verifying the last param and choosing to be halted or eval at each next param. That design might change the number of params to simplify things, so careful in building on this op yet. I set it to 2 params so that after the first 7 params it waits until 9 params to eval, and after that it evals on every next param.',{ty:'unknown', langs:{}});

		vm.addOp('IgnoreThisLambdaWithUParam',null,true,1,'Since Lambda takes 6 params, it needs 2 opcodes of space instead of 1, but this only happens if U is the 7th param param instead of [...].',{ty:'unknown', langs:{}});

		vm.o8OfLambdo = vm.addOp('Lambdo',null,true,1,'Vararg (FIXME number of params said in addOp). See testcases in VM using λ which is the 6 param form of it. Vararg up to about 245 (whats the exact number?) params. (λ [x y z funcBody] valX valY valZ) -> (funcBody (LamNs (λ [x y z funcBody] valX valY) valZ)). funcBody normally contains x% y% z% or whatever the param names are. Can also call itself recursively. OLD: It works like this: {{L Lambdo} (x y) (todo add comment param here...) [+ [* x x] *[y y]] 6 8}->100. {L Lambdo} is written as λ and its opcode is vm.o8OfLambda. The (x y ...) can be any num of params up to around 250 (todo whats the exact number? check vm.max* vars). OLD... Lambda is the 6 param form, waiting for a [...param names...] 7th param. Lambdo is the form with 7 params but that 7th param is (U U) so is just there to mark the opcode but is not used that way (it wont act like a lambda, would act like an Infcur). FIXME number of params depends on list size at param 7 but cant exceed around 250 (whats the exact number?). FIXME this must have an odd o8 cuz the [...] is 7th param which is not U. If it was U it would have to be an even o8. FIXME this will take varsize list??? [(streamGet varName) (streamGet otherVar) ...] and a funcBody (or is funcBody before that param) then that varsize list (up to max around 250-something params (or is it 120-something params?) then call funcBody similaar to described below (except maybe use [allParamsExceptLast lastParam] instead of (pair allParamsExceptLast lastParam)) FIXME TODO the streamGet op should work on that datastruct that funcBody gets as param, so (streamGet otherVar [allParamsExceptLast lastParam])-> val of otherVar in the param list of lambda op. OLD... Takes just funcBody and 1 more param, but using opOneMoreParam (the only vararg op) with a (lambda...) as its param, can have up to (around, TODO) '+vm.maxCurries+' params including that funcBody is 8th param of u. (lambda funcBody ?? a b ??? c d e) -> (funcBody (pair (lambda funcBody ?? a b ??? c d) e)). It might be, Im trying to make it consistent, that funcBody is always param 8 in lambda and varargAx. (opOneMoreParam aVarName aLambda ...moreParams...).',{ty:'unknown', langs:{}});
		vm.o8OfLambda = vm.o8OfLambdo>>1; //remove last child, so its 6 params and [...param names...] is 7th param.
		vm.addOp('IgnoreThisMutlambdaWithUParam',null,true,1,'Since Mutlambda takes 6 params, it needs 2 opcodes of space instead of 1, but this only happens if U is the 7th param param instead of [...].',{ty:'unknown', langs:{}});
		vm.o8OfMutlambdo = vm.addOp('Mutlambdo',null,true,1,'Vararg (FIXME number of params said in addOp). See testcases in VM using Λ which is the 6 param form of it. Similar to lambdo/lambda except theres an extra param of a namespace, and this pushes a LamNs onto that joining them with a Ns. See vm.inMutlambdaLamnsIsInner about which of the LamNs vs incoming namespace from last param, is the inner vs outer namespace in the Ns it makes when calling it on its last param and giving that to its FuncBody. I will end up picking true or false for that permanently but for now am leaving it undecided so have the var.',{ty:'unknown', langs:{}});
		vm.o8OfMutlambda = vm.o8OfMutlambdo>>1; //remove last child, so its 6 params and [...param names...] is 7th param.
		if((vm.o8OfMutlambdo&3) != 3){
			throw '('+vm.o8OfMutlambdo+'==vm.o8OfMutlambdo)&3 != 3 but must equal 3, so 4 things are aligned on blocks of 4 ops, so the high 6 bits of o8 are the same between lambda and lambdo and mutlambda and mutlambdo, so it can be optimized with a mask to check if its any of those.';
		}
		if((vm.o8OfLambdo&0b11111100) != (vm.o8OfMutlambdo&0b11111100)){
			//these are both 7 params even though they are used with [...] normally instead of (U U) which is the normed last param.
			throw '(('+vm.o8OfLambdo+'==vm.o8OfLambdo)&0b11111100) != (('+vm.o8OfMutlambdo+'==vm.o8OfMutlambdo)&0b11111100)';
		}
		/*if((vm.o8OfMutlambda&0xff) != vm.o8OfLambda){
			//Wrong... they are 7 params, so commentingout this.
			//these are both 6 params, instead of the usual 7, cuz waiting for [varnamex y z funcbody] param after that.
			throw '('+vm.o8OfMutlambda+'==vm.o8OfMutlambda)&0xff != vm.o8OfLambda == '+vm.o8OfLambda;
		}*/
		if((vm.o8OfLambdo&1) != 1){
			throw 'vm.o8OfLambdo=='+vm.o8OfLambdo+' is not odd. It must be odd cuz [...] as 7th param is not U.';
		}
		if((vm.o8OfMutlambdo&1) != 1){
			throw 'vm.o8OfMutlambdo=='+vm.o8OfMutlambdo+' is not odd. It must be odd cuz [...] as 7th param is not U.';
		}

		vm.o8OfInfcur = vm.addOp('Infcur','[]',true,vm.maxCurriesLeft,'Infcur aka []. (Infcur x) is [x]. (Infcur x y z) is [x y z]. Like a linkedlist but not made of pairs, so costs half as much nodes. just keep calling it on more params and it will be instantly halted.',{langs:{}});
		vm.o8OfRucfni = vm.addOp('Rucfni','-=',true,vm.maxCurriesLeft,'Rucfni aka -=. Does exact same thing as Infcur but is normally displayed in reverse. Example [a b c d -e f g h i=] is both together and is (Infcur a b c d (Rucfni i h g f e)). [] is infcur. -= is rucfni. TODO use this with the tape (fntape) opcodes. Tape should be made of this.',{langs:{}});
		if((vm.o8OfInfcur&0xfe) != (vm.o8OfRucfni&0xfe)){
			 throw 'vm.o8OfInfcur=='+vm.o8OfInfcur+' and vm.o8OfRucfni='+vm.o8OfRucfni+' must start with the same 7 bits of o8.';
		}

		vm.o8OfCanvas = vm.addOp('Canvas',null,false,6,'(Canvas preferredMagnifyY preferredMagnifyX dataHeight dataWidth bytes ignore). ----------- TODO also include dataHeight so can use it as a size to ask for bytes? TODO (Canvas preferredMagnifyY preferredMagnifyX dataWidth bytes ignore)? (Canvas preferredHeight preferredWidth dataHeight dataWidth (Pad bytes)_or_bytes_directly ignore). Example: (Canvas 300 400 150 200 (...the bytes...)) may display as 300 pixels high, 400 pixels wide, magnifying 150x200 to that size. (...the bytes...) should be bize 150*200*32 cuz its an int per pixel in browser canvas. This is the browser layout of color bits, not the java BufferedImage layout for example. Can be converted at runtime to other bit layouts fast enuf. TODO merge TypevalB with TypevalC and create Pad opcode to mean view it as padded (the TypevalB way) as in (Typeval (Pad bytes)) uses only the bits from start to (exclusive) the last 1 bit (or is not a bitstring if its all Bit0s) vs (Typeval bytes) uses those powOf2 number of bits.',{ty:'unknown', langs:{}});
		//3 canvases of 1 pixel each, for example:
		//[(Canvas 120 120 1 1 0x00ff00ff80000000) (Canvas 120 120 1 1 0xff0000ff80000000) (Canvas 120 120 1 1 0x0000ffff80000000)]
		//(Canvas 100 100 2 2 (0xff00ffffffffffff 0x00ffffffffff00ff (0x8000000000000000 0x0000000000000000)))
		//(Canvas 100 100 1 4 (0xff00fffff66666ff 0x00fffaaaafff00ff (0x8000000000000000 0x0000000000000000)))
		//(TypevalB b* (0xff00ffffffffffff 0x00ffffffffff00ff (0x8000000000000000 0x0000000000000000)))


		vm.addOp('OpByte',null,false,1,'returns a cbt8 whose bits are 1 to 255, whatever is params o8 opcode in its header. O8 of U is 1. O8 of (U U) is 2. O8 of (U (U U)) is 3. O8 of (U Anything_except_U) is 3. And so on up to 7 params. 6 params has O8 of 64 to 127. O8 of 7 params is 128 to 255.',{ty:'cbt8', langs:{}});
		
		vm.addOp('CurleftByte',null,false,1,'returns a cbt8 whose bits are 1 to 255, whatever is params curriesLeft. 1 means it will eval on next param. 2 means it will eval when gets 2 more params. And so on up to 254. 255 means will never eval, just keeps adding more params. 255 is used in Infcur/[] aka a list that adds its param to the list, to forkEdit itself.',{ty:'cbt8', langs:{}});
		
		//TODO make space for 8 opcodes to read this and 8 to write it? theres not enuf space. maybe make it part of LimitsMap in Sandbox op? Just leave the MaskByte op here.
		//FIXME need about 5 (UPDATE: 8) opcodes for this (maybe up to 8 cuz theres 8 mask bits), check vm.mask_* vars and vm.stackStuff for current value of it... vm.addOp('IsClean',null,false,1,'the 2x2 kinds of clean/dirty/etc. exists only on stack. only with both isClean and isAllowSinTanhSqrtRoundoffEtc at once, is it deterministic. todo reverse order aka call it !isDirty instead of isClean? FIXME theres about 5 isclean bits on stack, see mask_ .',{langs:{}});
		vm.addOp('MaskByte',null,false,1,'returns a cbt8 whose bits are a mask of the 8 vm.mask_*, in params header. This means those wont be able to be reordered without breaking calls of MaskByte.',{ty:'cbt8', langs:{}});


		//vm.o8OfMutLam = vm.addOp('MutLam',null,true,2,'Same as Lambda op except for use during opmut/streamwhile/streamif/streamfor/etc, and takes an extra param of a [(ObVal ...) (ObKeyVal ...) ...variable size...]. FIXME number of params depends on list size at param 7 but cant exceed around 250 (whats the exact number?).',{langs:{}});
		//Maybe its better to focus on optimizing Lambda and MutLam, which have named params. vm.addOp('Vararg',null,true,2,'(Vararg [a b c d] e) -> (a [a b c d e]), maybe viewed as (<a b c d> e) -> (a <a b c d e>)? So (Vararg [a b c d]) is displayed as <a b c d>? Used for deriving syntaxes like <M keyA valA keyB valB>.',{langs:{}});
		vm.o8OfP = vm.addOp('P',null,false,2,'FIXME P should be merged with Da? (Da x) is x%. The new way 2023-4+ is to use LamNs, Ns, Treemap, and EmptyTreemap as namespace. (P LambdaOrMutLamOrListOfObvalObkeyvalEtc ParamName) -> value of ParamName in (Lambda ...) etc, usually in [(Lambda ... all params except last) LastParam] since thats what FuncBody inside that Lambda call is called on [...] and FuncBody normally calls P to get specific params.',
			{ty:'key', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					if(vm.isS2(fn)){
						throw 'TODO <P GetVarname GetNamespace>, fn='+fn;
					}else{
						/*
						//if(ty ==  'key'){
						return tr.key(fn); //(P x ns) -> value of key (P x)/x%. This is unlike ops.Get and ops.Put which use the x/varname directly. This is like (D x)/x$ and (Getcbt x)/x@
						*/
						switch(ty){
							case 'key':
								return tr.key(fn)
								//throw 'FIXME_key_'+fn+'_shouldProbablyHaveDotPAndGetMutOfThat';
								//TODO? return tr.root+'['+tr.key(fn)+'.p]';
							case 'num':
								return tr.key(fn)+'.p.n.d()'; //FIXME?
						}
						
					}
				},
			}});
		vm.o8OfPGo = vm.addOp('PGo',null,false,2,'(PGo varGetter ns) returns (P (varGetter ns) ns). Syntax: x/y/z% is (PGo (GoO (OO x y) z)).',
			{ty:'key', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					// a/b/c% means (PGo (GoO (OO a b) c)) and next param is normally a ns, but the (GoO (OO a b) c) part could be any x that gets called (x ns).
					let jsList = tr.fnToJsList(fn);
					if(vm.isS2(fn)){
						throw 'TODO S2 <PGo GetKeyA GetNs> which waits for another ns, fn='+fn;
					}else{
						if(ty == 'key'){
							//FIXME??? Or was this just a problem in addOp('P'?
							//x$ should be the .d of (D x) not of x, but since that will be fixed separately and change everywhere globally i dont want to mark a bunch of these as broken.
							let getKeyA = jsList[1];
							return tr.gKey(getKeyA)+'.pAsMut()';
						}
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
			}});

		/*Getcbt is duplicate of Bl. GetcbtGo is duplicate of BlGo. Keep Bl and BlGo only.
		vm.o8OfGetcbt = vm.addOp('Getcbt',null,false,2,'Like P/% and $/D but is @/Getcbt Wraps typed arrays such as TypevalB of \'D\' and bytes of double[]',
			{ty:'key', langs:{
				js: (tr,fn,ty)=>{
					if(vm.isS2(fn)){
						throw 'TODO <Getcbt GetVarname GetNamespace>, fn='+fn;
					}else{
						//if(ty ==  'key'){
						return tr.key(fn); //(Getcbt x ns) -> value of key (Getcbt x)/x@. This is unlike ops.Get and ops.Put which use the x/varname directly. This is like (P x)/x% and (D x)/x$
					}
				},
			}});
		vm.o8OfGetcbtGo = vm.addOp('GetcbtGo',null,false,2,'Like PGo/% and $/DGo but is @/GetcbtGo. Wraps typed arrays such as TypevalB of \'D\' and bytes of double[]',{ty:'key', langs:{}});
		*/
		
		
		
		
		
		/*
		https://twitter.com/honeykjoule/status/1694724169194414544
		honey

		@honeykjoule
		·
		26m
		what's eacc going to do about heat death except get there faster?
		Lambda Rick /acc
		@benrayfield
		·
		21m
		Hypercomputing, thats what. If the mathematical universe hypothesis is true, then hypercomputing physically exists, and there is some way to make a finite measurement that does an infinite amount of compute to give a finite answer. Time does not exist.
		github.com
		GitHub - benrayfield/hyperquasicrystal: (TODO) actually callable javascript lambdas of infinitely...
		(TODO) actually callable javascript lambdas of infinitely threadable (potentially massively-multiplayer) godel-like-numbering-secure low latency neuralnet approximation of hypercomputation of the i...
		honey

		@honeykjoule
		stop stalling
		10:51 AM · Aug 24, 2023
		·
		1
		View
		1
		Like

		Lambda Rick /acc
		@benrayfield
		·
		3m
		Experiments like that would hook into wikibinator at Plug opcode using vm.mask_allowOther and vm.Node.pushEvaler. Its AGI level puzzle to grow directed-graph from partial pattern (from statements like (S I I (S I I)) infinite loops). Attract swarm of researchers with games first.

		@honeykjoule
		·
		28m
		sounds like 21e8
		Pi
		@bynd0infinity
		So it's like a real thing with sincere intent and not a grift?
		12:09 PM · Aug 24, 2023
		·
		2
		Views
		1
		Like
		Replying to @bynd0infinity and @honeykjoule

		No file chosen
		Lambda Rick /acc
		@benrayfield
		·
		Now
		Its as real as I have a few incomplete versions I tried to code and got close to definining an energy function for (on an infinite number of nodes with DAG ids) but its harder than I thought, so I pushed it out of core wikibinator and into plugin area for possible future research
		
		...

		See https://github.com/benrayfield/jsutils/blob/master/src/ConvfieldDemo3.html for a simpler form that converges to rule110
		and you can paint it with 2 mouse buttons, but this isnt very useful since lambdas and randomAccess have sparse dimensions.
		*/
		//
		//vm.addOp('ReservedForFutureExpansionASDFAWERFGSDF',null,false,1,'FIXME',{ty:'unknown', langs:{}});
		vm.addOp('Plug',null,false,2,'(Plug nameOfPlug paramOfPlug) -> anything or (S I I (S I I)) depending on mask_allowOther. (TODO rewrite this long and disorganized text)... License says "* Classpath/linking exception. Hook it to whatever you want, but within the space (no proprietary lambdas) is AGPL.", and such plugins are "within the space" since they are forks of the VM that change the behaviors of the universal combinator U (a fork of U), so "GNU AGPL 3 license, plus these extra permissions" applies. You owe source code of such plugins to anyone using it through the network, as usual in GNU AGPL 3. The classpath/linking exception, where GNU AGPL 3 doesnt apply, is lower on the stack than any wikibinator lambda call, such as a proprietary AI that calls lambdas on lambdas to find/create lambdas. As long as its sharing the lambdas by GNU AGPL 3 with anyone using them through the network, and each lambda is recursively a derivative-work of its 2 child lambdas, the lambdas dont depend on that proprietary AI (or whatever external system calling the lambdas) so is not interfering with (as the license says) the "turing-complete and hypercomputing space derived from this universal combinator/lambda or forks of it". Another way to hook in external system is by the Solve* opcodes, and MutableWrapperLambda which is a way of using Solve*, since those, such as digital-signatures or other proof based data structures, dont require the external system which generated them, to verify the proof. Its self contained. (Plug nameOfPlug paramOfPlug) -> anything (if mask_allowOther enabled) else (S I I (S I I)) aka infinite loops. Its only 1 param after nameOfPlug, but u can give it more params like this (λ[varA varB varC (Plug nameOfExamplePlugin)] valA valB valC) or true vararg (checks if each param is the last param by a turing-complete pattern at runtime) using VarargAx, the same as you can do for any other fn/lambda used as a funcBody. (Plug nameOfPlug) is used as a funcBody, and normally pushEvaler is used to optimize (Plug nameOfPlug) andOr optimize λ[varA varB varC (Plug nameOfExamplePlugin)]. The way you put in a Plug is vm.eval("(Plug nameOfPlug)").n.pushEvaler((vm,func,param)=>{...func is (Plug nameOfPlug) and param is paramOfPlug, so return whatever that should return..}); BUT you have to check mask_allowOther and return null if its 0, so the prev evaler (pushEvaler(evaler)) will be used instead, OR you can vm.infloop() or call (if you have the constants S F and U) S(F(U))(F(U))(S(F(U))(F(U))) directly, either way will run out of compute resources and throw. For example, if you get tired of having to vm.eval to get to eval, you could add a plugin to call that from (Plug vmDotEval), BUT that syntax may change as its vm internals, and Im planning to derive an eval from the opcodes instead of make it a plugin. Still, it might help to give access to some of the VM internals through Plug before that long research path.',{ty:'unknown', langs:{}});
		
		if(!(vm.o8OfLambdo&1)) throw 'o8 of Lambdo must be odd.';
		//vm.addOp('GetVarFn',null,false,2,'OLD, see ObKeyVal ObVal ObCbt etc. theres 4 things in stream [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val ...], 3 of which are vals. FIXME choose 3 prefix chars such as ?x _x /x. Rewrite this comment... so, ddee? would be a syntax for (getnamedparam "ddee").',{ty:'key', langs:{}});
		//vm.addOp('GetVarDouble',null,false,2,'OLD, see ObKeyVal ObVal ObCbt etc.theres 4 things in stream [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val ...], 3 of which are vals. FIXME choose 3 prefix chars such as ?x _x /x. Rewrite this comment... so, ddee? would be a syntax for (getnamedparam "ddee").',{ty:'num', langs:{}});
		//vm.addOp('GetVarDoubles',null,false,2,'OLD, see ObKeyVal ObVal ObCbt etc.theres 4 things in stream [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val ...], 3 of which are vals. FIXME choose 3 prefix chars such as ?x _x /x. Rewrite this comment... so, ddee? would be a syntax for (getnamedparam "ddee").',{ty:'typedBlob', langs:{}});
		
		/* Since hypercomputing (which was not finished but design doc is in hyperquasicrystal software) is being moved into ops.Plug,
		and more opcode space is needed, these opcodes are being removed. Use ops.Plug('hyperRed') Plug('hyperGreen') etc instead,
		or maybe vm.eval('(Plug [hypercomputeExperiment543454 hyperRed])') etc. Theres alot of ways to do hypercomputing, and many can be explored later.
		To use ops.Plug, vm.mask_allowOther must be on (which like all the masks, can be turned off lower on the stack,
		constraints can be tightened higher on stack but not loosened until return to same point on the stack).
		....
		//addOp(name,prefix,isStrange,curriesLeft,description)
		vm.o8OfHypercombinator = vm.addOp('Hyperleaf',null,true,1,'(Hyperleaf. The "hypercompute leaf combinator", just a binary forest data structure that prevents anything but combos of itself from being its params, and limits it to 7 stored params, and in abstract math it has 8 params but its always lazy-eval so the 8th param always infloops. You call it by looking along HypercomputeRedA and HypercomputeRedB edges. Its opcodes include the hypercomputing kinds of: S T F L R ISLEAF PAIR LAZYTHREEWAYCALL_CARDINALITYA_FUNC_PARAM SEMANTICFORDOESNOTHALT SEMANTICFORCALLERDOESNOTHAVEENOUGHCARDINALITYTOLOOKALONGTHATEDGE SEMANTICFORRETURNEDWHATSALONGREDAORBEDGE GETCALLERSCARDINALITYASLINKEDLISTOFTTTTASUNARY and maybe a few other operators, and one very important operator that branches at the first (of 7 or 8 params) param, which is a lambda of 6 params (if first param is the leaf hypercombinator, else first param is anything else).',{ty:'key', langs:{}});
		//TODO vm.lazyEvalOfDoesPEqualNP = ...; //Call this on Hypercombinator (the hyper leaf) to get hyper_T or hyper_F,
		//but it will cost infinite time and memory so dont expect an answer unless some advanced proofs and optimizations
		//are added later.
		vm.o8OfHypercomputeGreen = vm.addOp('HyperGreen',null,false,1,'This would be the L/GREEN hypercompute edge, which is same as the L op in wikibinator203 except if param is the "leaf hypercompute combinator" then "closes the quine loop" a different way by wrapping around to the "variant of identityFunc made of hypercompute combinator called on itself various ways"',{ty:'key', langs:{}});
		vm.o8OfHypercomputeBlue = vm.addOp('HyperBlue',null,false,1,'This would be the R/BLUE hypercompute edge, which is same as the R op in wikibinator203 except if param is the "leaf hypercompute combinator" then "closes the quine loop" a different way by wrapping around to itself, returns the "leaf hypercompute combinator" (as its hyper_R child) in that one case.',{ty:'key', langs:{}});
		vm.o8OfHypercomputeRedA = vm.addOp('HyperRed',null,true,2,'(HyperRed CardinalityComparator SomeComboOfHyperleafToGetRedEdge). TODO implement this https://raw.githubusercontent.com/benrayfield/hyperquasicrystal/main/hyperquasicrystalRedesign2022-8-10%2B.txt .This would give the RED (doesItHaltAtLowerCardinalityThanCaller) edge in... See https://github.com/benrayfield/hyperquasicrystal for an incomplete similar set of opcodes for hypercomputing. TODO design this wikibinator203 opcode. This is deterministic but in some cases costs pow(infinity,pow(infinity,infinity))... (im not sure how deep of exponents and infinities it will go) time and memory ONCE but after, in abstract math, thats cached, everything costs 1 compute step, so its more like a digital-signature of infinite size, or converges by disproof-by-contradiction, various ways it could be implemented. For example, you could have 2 competing networks, one with the claim that P!=NP and the other with the claim that P=NP, which would both be VarargAx ops of Hypercompute ops, so there will be a wikibinator203 node that claims P=NP and one that claims P!=NP but exactly 1 of those would ever (in abstract math, after infinities) halt.',{ty:'key', langs:{}});
		//vm.o8OfHypercomputeRedB = vm.addOp('HypercomputeRedB',null,true,1,'(TODO rename redA and redB to orange and red? or pick all colors of edges together however looks easiest to understand) Similar to HypercomputeRedA except this is one cardinality above infinite cardinality. For example, Collatz Conjecture (that 3*n+1 with dropping the low 0s in base2 thing) takes infinite time and memory to prove is true or to prove is false, by brute-force, so that can be defined (but not necessarily solved) with the most basic use of HypercomputeRedA, one HypercomputeRedA cardinality deep. The question P=?NP asks about all possible lambdas as NP solvers on all possible NP inputs (such as a specific set of 3SAT constraints) and for all possible constant exponents to check does that lambda solve it that fast. So that would be a few (maybe 3? TODO get the exact number) HypercomputeRedA cardinalities deep. If Collatz is 1 deep and P=?NP is around 3 deep, then what if you wrote a loop for cardinalityA from 0 to infinity (never reaches infinity, just keeps going forever), and wanted to know do ANY of those cardinalities contain a certain pattern of thing (call a lambda on each of them, and if that lambda halts it matches, and if that lambda does not halt, it does not match)... You could write such a loop using HypercomputeRedB. HypercomputeRedB does the same thing as HypercomputeRedA except it can see ALL the HypercomputeRedA edges, unlike a specific HypercomputeRedA edge can only see the HypercomputeRedA edges below its own cardinality. All this is still just made of the 2-way-forest of wikibinator203 nodes where all paths lead to U/TheUniversalCombinator, and will infiniteLoop from the hypercompute ops unless vm.stackStuff.isAllowHypercompute (similar to vm.stackStuff.isAllowSinTanhSqrtRoundoffEtc), cuz despite that it is deterministic and ALWAYS halts (its chaitins constant is 1), its still often infinitely expensive to compute exactly so impractical to share across internet cuz they wouldnt be able to verify it in all cases. Think of it more as a data structure that mathematicians can use to claim things, a way to make many parts of existing math books machine-readable, and a way to disprove-by-contradiction P=NP vs P!=NP (disprove either of those) maybe. Theres alot of cardinalities above this, or maybe theres some way to not have "turtles all the way down" and to "close the loop" somehow, but this is all I (Ben F Rayfield) know how to code consistently for now (as of 2022-8).',{langs:{}});
		*/
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		//throw 'FIXMEFIXME todo implement these opcodes including EmptyTreemap, Treemap, IdThenGodelLessThan, TreemapHas, etc, then use them to implement Fo, For, IfElse, If, =D aka set part of a cbt to a double value, etc, using vm.Mut datastruct to optimize it, then port AugmentedBalls to that code and verify its fast enough.';
		//
		//ty of 'ns' means namespace, one of: Ns, LamNs, Treemap, EmptyTreemap, Lambda, MutLambda.
		//
		vm.o8OfEmptyTreemap = vm.addOp('EmptyTreemap',null,false,2,'(EmptyTreemap (IdThenGodelLessThan IdMaker) key)->U. Avl treemap.',{ty:'ns', langs:{}});
		vm.o8OfTreemap = vm.addOp('Treemap',null,false,6,'(Treemap (IdThenGodelLessThan IdMaker) leftChild key val rightChild key)->val. Avl treemap. leftChild andOr rightChild can be (EmptyTreemap (IdThenGodelLessThan IdMaker)). (IdThenGodelLessThan IdMaker) returns T or F for < vs >=. Check equals func, or call that twice, to know if equal.',
			{ty:'ns', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					throw 'TODO namespaces in transpile. Theyre normally only used with S/{}/<>, as namespace is last param of fns like Fo IfElse etc.';
				},
			}});
		//Ns, LamNs, PushNs, and PopNs are for optimizing generated javascript code and generated gpujs code and generated glsl code,
		//that has local variables inside {...} blocks of code. The optimization is it doesnt have to get a vm.Mut object and generates code that uses js variables directly,
		//but in other cases still uses vm.Mut etc.
		vm.o8OfNs = vm.addOp('Ns',null,false,3,'FIXME should this order of inner_then_outer be flipped to match the outer_then_inner_gradually order of [a valA b valB a secondValA]? Should it also handle ops.Rucfni list which is the opposite display order of ops.Infcur/[] list, like -a secondValA b valB a valA=? Uses 2 namespaces as 1. In left-to-right reading order, the first key that matches the one you want is used, even if that key exists in multiple namespaces. (TODO rewrite this comment smaller) (Ns namespaceA/inner namespaceB/outer key) -> val from namespaceA/innerNamespace if exists else from namespaceB/outerNamespace if exists else U if not exist in either. TODO update Put opcode to deal with Ns, LamNs, and Treemap the same way. Namespace with 2 childs, a local and other namespace. Either may be another such Ns, but the leafs of it are eventually Treemap or (LamNs (λ [a b c] comment funcBody valA valB) valC). Where (LamNs (λ [a b c funcBody] valA valB) valC a%) -> valA, call it on b% (aka (P b), or call b% on it, either direction) and get valB, call it on c% (aka (P c)) and get valC, call it on anything else and get U. Put and Has ops will need to be updated to deal with Ns, LamNs, and Treemap all the same way.',{ty:'ns', langs:{}});
		vm.o8OfLamNs = vm.addOp('LamNs',null,false,3,'See Ns. TODO change from [] to LamNs in how funcBody in λ sees its own params.',{ty:'ns', langs:{}});
		vm.addOp('PushNs',null,false,2,'(PushNs funcBody map) -> (PopNs (funcBody (Ns (EmptyTreemap (getCompatatorFrom map)) map))). (Fo ,x (PushNs theFuncBody) map) would use (Ns (EmptyTreemap sameComparator) map) instead of map directly, in calling (theFuncBody theNamespace), where theNamespace can be a Treemap, EmptyTreemap, Ns, or LamNs (technically can be any fn but those are the useful kinds).',{ty:'ns', langs:{}});
		vm.addOp('PopNs',null,false,1,'(PopNs (Ns x y)) -> y, but if its param is not a Ns, then returns its param directly (or FIXME should it infloop?). See PushNs. Called automatically by PushNs. You use PushNs like a {...} block of code in javascript. You dont normally call PopNs directly.',{ty:'ns', langs:{}});
		vm.addOp('DoAvlBal',null,false,1,'(DoAvlBal (Treemap ...)) -> forkEdited treemap with max difference of AvlHeight between any 2 avl childs (of same Treemap parent) being 1. Avl balance is supposed to be -1, 0, or 1 at each node. Each node is a Treemap or EmptyTreemap. An EmptyTreemap is always balanced.',{ty:'ns', langs:{}});
		vm.addOp('AvlHeightD',null,false,1,'(AvlHeightD (Treemap_or_EmptyTreemap ...)) -> a double, such as (TypevalC d 0x0000000000000000) aka 0. Since double only does integers up to pow(2,53), this must infinite loop ({I I}{I I}) if avlHeight >= pow(2,53).',{ty:'num', langs:{}});
		vm.addOp('PutNoBal',null,false,3,'TreemapPutNoBal renamed to PutNoBal. (PutNoBal key val map) -> forkEdited map which has that mapping but may be unbalanced. Caller should DoAvlBal on returned map to get a balanced one, or keep putting and balance after multiple puts. Could TreemapNorm instead of DoAvlBal. Both return balanced treemap (if was valid map to start with). TreemapNorm returns same map regardless of order of puts and balances which created it, aka returns a near-complete-binary-tree with only the deepest row potentially not filled.',{ty:'ns', langs:{}});

		vm.addOp('Get',null,false,2,'(Get key ns) -> value of key in the ns, such as from a Treemap or Lambda or Ns or LamNs. Most ns can just do (ns key) -> val, but Lambda and Mutlambda dont cuz theyre waiting for a param before using their funcBody.',{ty:'unknown', langs:{}});
		vm.addOp('GetGo',null,false,2,'(Get GetKey ns) -> (Get (Get ns) ns)',{ty:'unknown', langs:{}});
		//renaming TreemapPut to Put. Also (TODO verify) generalizing it to ns. Treemap is a kind of ns.
		vm.addOp('Put',null,false,3,'(Put key val ns_such_as_treemap) -> forkEdited map which has that mapping and is avl balanced as if by DoAvlBal (but may be optimized to do the put and balance together to avoid funcallCaching in those middle steps, as long as it returns the exact same thing aka what it returns must have same globalId (for all possible IdMaker) as if done by DoAvlBal.)',{ty:'ns', langs:{}});
		vm.addOp('PutGo',null,false,3,'(Put GetKey GetVal ns) -> (Put (GetKey ns) (GetVal ns) ns)',{ty:'ns', langs:{}});

		vm.addOp('Keys',null,false,2,'(Keys ns) -> [keyA keyB keyC...] in whatever order the keys already are in the ns. In a Treemap its depth-first. In Lambda or Mutlambda, its the order in the params list, excluding the last n keys if doesnt have values for those.',{ty:'unknown', langs:{}});
		
		vm.addOp('Del',null,false,2,'(Del Key (Treemap ...)) -> forkEdited treemap/emptytreemap with that key/val gone, balanced as if by DoAvlBal after removing it, even if as an optimization thats done at the same time.',{ty:'ns', langs:{}});
		//replaced by op Has: vm.addOp('TreemapHas',null,false,2,'(TreemapHas key map) -> T or F depending if that key is in the avl treemap.',{ty:'bit', langs:{}});
		vm.addOp('GodelLessThan', null, false, 2, 'The godel-like-number of a wikibinator203 lambda is 1 for U, 2 for (U U), 3 for (U (U U)), 4 for ((U U) U), 5 for ((U U)(U U)), 6 for (U ((U U)(U U))), (todo verify those numbers), and so on in order of height first, then recursively compare left child (skip this if the 2 left childs equal), then break ties by recursively the right child, which has bigO of max height of its 2 params. (GodelLessThan x y) -> T or F, by forest shape recursively. Optimized to worst case of max height of x and y, other than that triggers generating ids for all things compared. A trueOrFalseComparator. Returns T or F. Compares 2 fns by their godel-like-number. There are 1, 2, 5, 26, 677... fns atOrBelow each height. But in practice this will be implemented as comparing first by height, and to break ties compare recursively in left child, and to break ties compare recursively in right child, which has a bigO of max height of the 2 fns to compare by optimizing for equality and checking equality before recursing. (GodelLessThan U (U U))->T. (GodelLessThan 2.34 5.67)->T cuz nonnegative float64s compare the same way as int64s, but the sign bit puts all the negatives after all the positives. (GodelLessThan GodelLessThan (T GodelLessThan))->T. (GodelLessThan (U (U U)) (U U))->F. Equals could be implemented using 2 calls of this.',{ty:'bit', langs:{}});
		//vm.addOp('ChainLessThan', null, false, 4, 'This is used in Treemap and EmptyTreemap. Used for comparing first by a (normally) 256 or 512 bit id of each of 2 params, and breaks ties using second comparator which is normally GodelLessThan. (ChainLessThan FirstComparator SecondComparator x y) -> T or F. FIXME maybe comparators should be redesigned to have 3 possible return vals: F, IdentityFunc#(F U), and T? or -1 0 or 1 as doubles or ints or bytes?',{ty:'bit', langs:{}});
		vm.addOp('IdThenGodelLessThan', null, false, 4, 'This is used in Treemap and EmptyTreemap. Used for comparing first by a (normally) 256 or 512 bit id of each of 2 params, and breaks ties using GodelLessThan. comparator which is normally GodelLessThan. (IdThenGodelLessThan IdMaker x y) -> T or F. FIXME maybe comparators should be redesigned to have 3 possible return vals: F, IdentityFunc#(F U), and T? or -1 0 or 1 as doubles or ints or bytes?',{ty:'bit', langs:{}});
		//vm.addOp('?', null, false, 3, 'TODO use Bl, P PE D DE instead of the ?* ops. (? x val map) -> map forkEdited to map key (? x) to val.',{ty:'unknown', langs:{}});
		//vm.addOp('?C',null,false,3,'TODO use Bl, P PE D DE instead of the ?* ops. (?C x valAsArray map) -> map forkEdited to map key (?C x) to valAsArray. Im unsure if valAsArray should be a TypevalB, TypevalC, or raw Cbt. Or maybe allow all 3? Technically val can be anything, but this is a semantic to suggest viewing it that way.',{ty:'unknown', langs:{}});
		//vm.addOp('??', null, false, 4, 'TODO use Bl, P PE D DE instead of the ?* ops. (?? x y val map) -> map forkEdited to map key (?? x y) to val.',{ty:'unknown', langs:{}});
		vm.addOp('TreemapNorm',null,false,1,'(TreemapNorm map) -> map forkEdited to be nearly completeBinaryTree (still an avl tree).',{ty:'ns', langs:{}});
		vm.addOp('TreemapVerify',null,false,1,'(TreemapVerify map) -> T or F depending if map is a valid Treemap datastruct. Its always a valid fn, but an example of invalid is if it contains more than 1 unique comparator or is in a wrong sorted order by that comparator. Does NOT verify comparator always halts or sorts consistently (TODO only optimize if comparator is known consistent, which can be proven by it being a forest of nands or forest of ops on int32s or on int16s etc, basically anything that could go in an opencl ndrange kernel or webgl shaders (GLSL) (excluding roundoff, use less bits to handle that) can be proven to halt for all possible pair of params, and ...',{ty:'bit', langs:{}});
		

		vm.addOp('Sandbox',null,false,1,'(Sandbox LimitsMap Func Param) -> (Func Param) but with vm.stackTime vm.stackMem vm.stackStuff set to the contents of LimitsMap which has keys like time$ mem$ ax$ solve$ etc, which includes all 8 vm.mask_* bits whose values can be either 0 or 1, and time$ and mem$ etc can be any positive integer up to 2**53-1 (or maybe set a lower limit so they can be added easier, maybe 2**48-1 so can add up to 32 of them without overflow. You dont have to include any of those (in LimitsMap) that you dont want to reduce. All VMs must allow all such vars/mapkeys here, but different VMs can ignore some and use others, since its already only used in nondeterministic space (which is defined by vm.mask_stackIsAllowstackTimestackMem). TODO since the 8 mask bits and 128 bits of salt in StackStuff are required by all VMs, choose small names for those, something i wont want to change ever cuz some op (todo make one, call it what?) will get the current LimitsMap, and another op will get just the contents of StackStuff (which is used for dedup of evaling calls (see 3way datastruct that hashes differently than vm.Node hashes)). If caller asks for more than is available, TODO should that vm.infloop() which throws or should it just ignore it? Lets go with vm.infloop() for now.',{ty:'ns', langs:{}});

		vm.addOp('GetSandboxDirt',null,false,1,'(GetSandboxDirt salt) -> a LimitsMap like the one you can give as param in ops.Sandbox, but only the dirty/nondeterministic parts such as stackTime and stackMem, not the clean/deterministic parts like the vm.mask_* bits and current salt128 (which may differ from the salt param here. theres a separate opcode to get salt cuz u need a salt to get this and cuz it will be used so often for nondeterminstic branching). ignores salt (thats just to avoid reusing cache from an earlier call, can be anything)',{ty:'ns', langs:{}});
		vm.addOp('GetSandboxClean',null,false,1,'(GetSandboxDirt ignore) -> a LimitsMap like the one you can give as param in ops.Sandbox, but only the clean/deterministic parts, not the dirty/nondeterministic parts. See description of GetSandboxDirt, this is the opposite.',{ty:'ns', langs:{}});
		vm.addOp('GetSandbox',null,false,1,'(GetSandbox salt) -> a LimitsMap containing both the key/vals in GetSandboxDirt and GetSandboxClean. Maybe should return (Ns (GetSandboxClean salt) (GetSandboxDirt salt)). TODO should the order of (Ns innerNs outerNs) be swapped in Ns in general (change the Ns opcode) so innerNs takes 1 hop instead of 2 hops to reach as in (Ns a b) means ((Ns a) b)? Or do I want to keep it as the order vars are searched in it is the order its read left to right in text? I want the GetSandboxDirt to be replaced more often but i also want it to be the innerNs, and its not matching that way.',{ty:'ns', langs:{}});
		
		
		/* Need the opcode space back. These "tape" opcodes can be derived at runtime, and optimized with pushEvaler (TODO automatic optimization of many things).
		They're still useful functions, but dont need to be at the core.
		//
		//
		//vm.addOp = (name,prefix,isStrange,curriesLeft,description)
		//
		//
		//TODO derive S, Pair, FuncOf6Params, etc from tape* ops from these, but keep S as separate opcode too. Just as testcases to make sure its flexible enuf...
		//TODO??? The datastruct of tape is [...left side of tape... register -tapeCenter ...right side of tape...=]
		//aka (Infcur ...left side of tape... register (Rucfni ...tape of side right...)).
		vm.addOp('TapeSlideL',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeSlideL Tape) -> forkEdited lambda-sparse-turing-tape slid to left.',{langs:{}});
		vm.addOp('TapeSlideR',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeSlideR Tape) -> forkEdited lambda-sparse-turing-tape slid to right.',{langs:{}});
		vm.addOp('TapeCopy',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeCopy Tape) -> forkEdited lambda-sparse-turing-tape with center of tape copied to register.',{langs:{}});
		vm.addOp('TapePaste',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapePaste Tape) -> forkEdited lambda-sparse-turing-tape with register copied to center of tape.',{langs:{}});
		vm.addOp('TapeCall',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeCall Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (TapeGetRegister Tape (TapeGetCenter Tape)) aka by the fn in register called on the fn in center of tape.',{langs:{}});
		//vm.addOp('TapePair',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapePair Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (Pair (TapeGetRegister Tape) (TapeGetCenter Tape))',{langs:{}});
		vm.addOp('TapeInfcur',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeInfcur Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by [(TapeGetRegister Tape) (TapeGetCenter Tape)]',{langs:{}});
		vm.addOp('TapeRucfni',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeInfcur Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by -(TapeGetRegister Tape) (TapeGetCenter Tape)=',{langs:{}});
		vm.addOp('TapeGetL',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeGetL Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (L register).',{langs:{}});
		vm.addOp('TapeGetRegister',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeGetRegister Tape) -> gets the register in [...left side of tape... register -tapeCenter ...right side of tape...=].',{langs:{}});
		vm.addOp('TapeGetCenter',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeGetCenter Tape) -> gets the tapeCenter in [...left side of tape... register -tapeCenter ...right side of tape...=].',{langs:{}});
		vm.addOp('TapeGetLR',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeGetLR Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (TapeGetR (TapeGetL register)). Useful for getting x in [x y] aka (Infcur x y), or y in -x y= aka (Rucfni y x), especially such []s created by TapeInfcur and -=s created by TapeRucfni.',{langs:{}});
		//vm.addOp('TapeGetRL',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeGetRL Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (TapeGetL (TapeGetR (TapeGetRegister Tape)). Useful for getting y in -x y= aka (Rucfni y x) such as created by TapeRucfni. No thats wrong, you use TapeGetLR for that too.',{langs:{}});
		vm.addOp('TapeGetR',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. (TapeGetR Tape) -> forkEdited lambda-sparse-turing-tape with register replaced by (R register).',{langs:{}});
		*/


		//TODO vm.addOp('TapeDoTape',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. ',{langs:{}});
		//TODO vm.addOp('TapeImport',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. 2 params, copies one param to the register in the tape, and returns forkEdited tape.',{langs:{}});
		//TODO vm.addOp('TapeExport',null,false,1,'See fntape in occamsfuncer docs for dovetailing etc. 1 param, the tape, and gets whats in its register. TODO rename this to tapeReturn? or should there be both separate opcodes?',{langs:{}});
		//
		//
		
		//vm.addOp('MatmulInt16',null,false,5,'(MatmulInt16 SizeA SizeB SizeC CbtAB CbtBC) -> AC of size (* SizeA SizeC). Sizes are in units of int16s. Returns a cbt. This is a place to hook in GPU optimization.',{langs:{}});
		
		/*
		vm.addOp('MatmulF',null,false,5,'(MatmulF SizeA SizeB SizeC CbtAB CbtBC) -> AC of size (* SizeA SizeC). Sizes are in units of float32s. Returns a cbt. This is a place to hook in GPU optimization, though its not general enough for everything GPU does. Check isAllowSinTanhSqrtRoundoffEtc.',{langs:{}});
		
		vm.addOp('MatmulFAsD',null,false,5,'Same as MatmulF except uses D/Float64 calculations in the middle',{langs:{}});
		
		vm.addOp('MatmulFAsDIn32x32x32',null,false,5,'TODO...',{langs:{}});
		
		vm.addOp('MatmulD',null,false,5,'(MatmulD SizeA SizeB SizeC CbtAB CbtBC) -> AC of size (* SizeA SizeC). Sizes are in units of float64s. Returns a cbt. This is a place to hook in GPU optimization or might have to do it in CPU or do it as int math etc if for example in WebGL it only supports float32 but not float64 or maybe supports float64 during the multiply of 2 float32s then stores it as float64. Check isAllowSinTanhSqrtRoundoffEtc.',{langs:{}});
		*/
		
		
		//excluding VarargAx and Hyper* opcodes (which may take infinity cycles to verify),
		//would the given 2 params f p, called on eachother (f p), halt/returnSomething 
		//WouldBeInstantlyHalted
		//nevermind, just use Cur to get number of curries until it evals next.
		
		
		
		
		
		
		
		
		
		/*
		SOLUTION?
		(Treemap CompareFirstByIdThenByGodelLikeNumber)#Tm
		(EmptyTreemap CompareFirstByIdThenByGodelLikeNumber)#Em
		(Tm (Tm ...) key val (Tm ...) key)->val.
		(Tm Em key val (Tm ...) key)->val.
		(Tm (Tm ...) key val Em key)->val.
		(Tm Em key val Em key)->val.
		(Em key)->U.
		(Has key Em)->F
		(Has key (Tm (Tm ...) key val (Tm ...))->T.
		(Put key val map) -> map forkEdited to map key to val WHILE avlBalancing the tree.
		Use funcallcaching to get minKey, maxKey, and balanceBeingNegOneOrZeroOrOne,
			and maybe add some cache fields to vm.Node for those to do even faster caching?
		(Tm (Tm U keyA valA U) keyB valB (Tm U keyC valC U) key)->val.
		(EmptyTreemap CompareFirstByIdThenByGodelLikeNumber key)->U, would give type safety.
		(? x val map) -> map forkEdited to map key (? x) to val.
		(?? x y val map) -> map forkEdited to map key (?? x y) to val.
		(?C x valAsArray map) -> map forkEdited to map key (?C x) to valAsArray.
		(TreemapNorm map) -> map forkEdited to be nearly completeBinaryTree (still an avl tree).
		(TreemapVerify map) -> T or F depending if map is a valid Treemap datastruct.
			Its always a valid fn, but an example of invalid is if it contains more than 1 unique comparator
			or is in a wrong sorted order by that comparator.
			Does NOT verify comparator always halts or sorts consistently (TODO only optimize if comparator is known consistent, which can be proven by it being a forest of nands or forest of ops on int32s or on int16s etc,
			basically anything that could go in
			an opencl ndrange kernel or webgl shaders (GLSL) (excluding roundoff, use less bits to handle that)
			can be proven to halt for all possible pair of params, and 
		
		
		
		SOLUTION?
		(Treemap CompareFirstByIdThenByGodelLikeNumber)#Tm
		(Tm (Tm ...) key val (Tm ...) key)->val.
		//(T U key)->U, could be used as empty map. Should it be used that way? No, its missing comparator.
		//(Tm U U U U key)->U, is similar, except it could be mistaken for a map of U to U,
		//	which it literally is.
		(EmptyTreemap CompareFirstByIdThenByGodelLikeNumber key)->U, would give type safety.
		
		
		
		
		SOLUTION?: Just do lazy-normed avl trees, and norm them as needed. Maps are avl treemaps.
		(Treemap CompareFirstByIdThenByGodelLikeNumber)#Tm 
		(Tm (Tm ...) (key val) (Tm ...))
		(Tm (Tm ...) (key val) (Tm ...) key)->val.
		(Tm (Tm ...) (? hello world) (Tm ...) (? hello))->world.
		(Tm (Tm ...) (?? a b c) (Tm ...) (?? a b))->c.
		//(Tm (Tm ...) (??? a b c d) (Tm ...) (??? a b c))->d.
		//(??? a b c d map) -> forkEdited map containing (??? a b c d).
		(? hello world map) -> forkEdited map containing (? hello world).
		//Make this up to how many ?????... deep? I just need ? and ?? for sure.
		..
		How to use that to make a plain map of key to val?
			Use (? key val) but wrap it in a func that gets the key out instead of using (? key) as a key,
			and do that for get and put etc.
		..
		
		
		
		
		
		
		///OLD, cuz this can be done simpler by having just 1 key type that can be done by KE and KKE and KEC.
		Keys must have .cur of at least 2, cuz val is their next param.
		(KE key val map)->forkEditedMap. Key is (KE key).
		(KEC key valAsCbtOrMaybeTypevalOfCbt map)->forkEditedMap. Key is (KEC key). For storing double[] int[] etc.
		(KKE keyA keyB val map)->forkEditedMap. Key is (KKE keyA keyB).
		(NormMap map)->forkEditedMap. Makes a nearly completeBinaryTree with at most the last row being incomplete.
		(K? key map) -> val from map, or U if not exist.
		(KK? keyA keyB map) -> val from map, or U if not exist.
		
		HOW I DECIDED ON THAT SOLUTION...
		
		
		Make avl and trie_with_avl, using a single design that varies in params
		(like has a different balance func, same comparator, etc),
		and use that to decide if the extra complexity is worth it vs should i go avl only
		and norm the avl to a completeBinaryTreeExceptDeepestRow as needed.
		...
		Which funcs do I need to implement? (some many be the same both ways, and others need to be params of avl):
		* (Norm map) //returns the same map contents but invariant of the order of inserts/deletes/etc. May be expensive.
		* (Put key val map) or (put (key val) map) where key.n.cur()>1, unsure which of these I'll do.
		* (PutAll mapFrom mapTo) //copy mapFrom's contents into a forkEdit of mapTo, so mapFrom wins if overlap.
		* (Prei key map) //prefix subtree, Inclusive.
		* (Prex key map) //prefix subtree, eXclusive.
		* (Sufs key map) //suffix subtree, Inclusive.
		* (Sufx key map) //suffix subtree, eXclusive.
		* (Has key map) //-> T or F. Can tell the difference between mapped to U and U meaning doesnt contain
			//BUT should the treemap allow keys of U vs remove keys mapped to U since it returns U to mean either way?
				* 
		* (Del key map) //is this the same as 
		* 
		* 
		* 
		//* (ForAll LoopBody map) //where does it accumulate them? map/reduce?
		* 
		* 
		* 
		
		Should there be these few kinds of treemap nodes?...
		* TrieWithExactSortedListAtBottom //is always exactly sorted. if hash func is good enuf, wont be any collisions, but for math correctness, by pigeonhole, must handle possible collisions anyways.
		* Empty_TrieWithExactSortedListAtBottom.
		* AvlLazyNorm
		* EmptyAvlLazyNorm.
		???
		..
		Also, not a node type (since it could reuse some of the other types) but...
			TrieWithNonNormedAvlAtBottom
				This one is probably not useful.
				The 2 useful kinds are TrieWithExactSortedListAtBottom and AvlLazyNorm.
		..
		Maybe Prei Prex Sufs Sufx and Del, should be generalized to a Filter func that
			chooses which keys to keep, and have an optimization for each of those so it does the same thing.
		..
		The 2 useful kinds are TrieWithExactSortedListAtBottom and AvlLazyNorm.
		Theres 3 nonEmpty datastructs in that: trie, list, and avl,
			and all 3 could be done by (Treemap ...fewParams... left (key val) right getKey)->val.
			All 3 are a tree sorted by a given comparator.
		Maybe the "...fewParams..." should contain a comparator but NOT a normer or putter or any other funcs,
			and put those kind of things in the getters setters normers etc funcs???
		((Treemap CompareFirstByIdThenByGodelLikeNumber)#Tm (Tm ...) (KKE a b c) (Tm ...))
			but how would putter (Put (key val) map)->forkEditedMap or (key val map)->forkEditedMap...
				How would putter know which datastruct?
		A nearlyCompleteBinaryTree is a valid avl tree since balance at every node is between -1 and 1.
		
		
		
		
		Start writing wikib user level code for how I want to use the avltreemaps with Fo IfElse Mut etc.
			Where does comparator go?
			
		(Treemap comparator putter left keyval right getkey).
		Do I need putter to be a param of Treemap?
		Do I want a more complex comparator that combines
		max depth n of trie (skipping levels where those bits in id of key are the same in all keys deeper)
		with avl below that, and optionally keeps the avl sorted andOr sorted as a [] list
		so it always stays normed instead of having to be normed after n forks?
		..
		Is there a better way to balance than avl, such as each branch knows its weight in keyvals
		and treerotates when one side is too much heavier than the other?
		AVL is probably close enough to optimal.
		...
		Should there be a max avl height of 255? That would be a very big avl tree,
		maybe holding around 2^128 keyvals (just guessing, havent thought about bigO of avl height vs size much)?
		https://www.geeksforgeeks.org/practice-questions-height-balancedavl-tree/ says "1.44*log2(n) If there are n nodes in AVL tree, maximum height can't exceed 1.44*log2(n)"
		but Im not sure if thats true (TODO).
		...
		Should it be limited to max (around) 2^50 keyvals in each tree, so that float64 can hold its size exactly?
		How about max 2^48-1 or 2^32-1 or 2^31 or something?
		..
		What fn would be an empty Treemap? (Tm U U U), (where I havent decided what params go in Tm yet)?
		If U is a keyval, then key is (F U) and val is U, cuz (L U)->(F U) aka identityFunc, and (R U)->U.
		If you wanted identityFunc as key, you'd instead write it as (KE identityFunc val),
		so in that case the Treemap key would be (KE identityFunc).
		If its instead identityFunc directly, aka the keyval is U,
		could use that similar to null, meaning its not there.
		In general, Treemap will use keyval as (key val), so key must take at least 2 more params,
		since (key val) must be halted. key is also a func to forkEdit a Treemap, to PUT that val at that key,
		so in Fo/While/IfElse/Mut/etc, _[(KKE ballA x 5) (KKE ballA y 2.3)] can be used as a func to
		forkEdit the state (that those loops/ifelse/etc are using) to,
		as you'd write it in javascript for example, ballA.x = 5; ballA.y = 2.3; then return forkEdited state.
		Those (KKE ballA x 5) and (KKE ballA y 2.3) etc are inside Treemap.
		Treemap is sorted by (SomeComparator (KKE ballA x 5) (KKE ballA y 2.3)) -> T or F (or maybe -1 0 or 1?).
		..
		or, instead of Treemap opcode, how about just [] lists inside eachother, that are in sorted order
		by some comparator (as a param somewhere), so [a b c d e] could be [[a b][c [d e]]] or [[a b c d]e] etc.
		Do that???
		Would need some way to know the difference between content in the list/tree vs internal tree nodes.
		Could prefix such content with T which is in some syntaxes written as , aka (T x) is ,x.
		[[,a ,b][,c [,d ,e]]]
		and if d happens to be [hello world] then its... [[,a ,b][,c [,[hello world] ,e]]].
		I like that its more human readable than having specific opcodes for it.
		Also it can be variable branching factor as its displayed, though is still 2 childs per fn.
		...
		Function call caching can handle minKey maxKey contains getHeight etc, recursively and efficiently enough,
		so dont need to store those in the tree itself.
		This could in general do any sorted stuff, not just treemaps.
		..
		(Get comparator key [[,a ,b][,c [,[hello world] ,e]]])
		(Put comparator key val [[,a ,b][,c [,[hello world] ,e]]])
		(ContainsKey comparator key [[,a ,b][,c [,[hello world] ,e]]])
		etcs
		This would even use screen space half-efficiently in the drag and drop tree UI (a html file).
		But if comparator is to be stored with the treemap, then a different order?...
		(Get comparator [[,a ,b][,c [,[hello world] ,e]]] key)?
		Cant do that cuz Fo/While/IfElse/etc take a treemap as the state to forkEdit
		(which they will optimize by using Mut).
		The optimizing process could check that (Get comparatorX) (Put comparatorX) etc are used,
		all with same comparator, and that comparator is (if it can be proven, else dont optimize it) consistent in how it orders all possible fns and always halts... then the comparator doesnt have to be stored with the [...] tree.
		...
		But constant avl branch size might be more efficient.
		
		
		
			
		(Tm#(Treemap comparator balancer) left keyval right getkey).
		(Tm U (KKE x y z) U (KKE x y)) -> z.
		This is general enuf to do avl and trie.
		(KKE x y 5 (Tm U (KKE x y z) U)) ->
			 (Tm U (KKE x y 5) U).
		comparator ruturms T or F (maybe 2 kinds of F, differing in prefix, to say equal or not?) depending if lessthan... Example: GodelLessThan op is a comparator.
		Or do i want to specialize in avl for fewer objects created by balancing while forkediting? How about the Put fn goes where balancer is now? Put can also remove, by val being U?
			
		((Avl Cmp343)#Av left here right getValOfThisKey)
		(Av (Av U (KEC y ACbt) U) (KKE x y z) (Av ...) (KKE x y)) -> z
		(AvlPut map (KKE x y z)) -> map forkedited to have key (KKE x y) -> val z.
		
		The avltreemap will be similar to https://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html
		
		Different comparators could compare different ways.
		Some could just compare by idElseGodellikenumber of (KKE a b) in (KKE a b c),
		and others could compare first by a, then by b, if it happens to be a KKE,
		since that would allow searching for fields of an object,
		as KKE is designed for object oriented programming in Mut/IfElse/Fo/etc opcodes.
		
		Use this SOLUTION: avltreemapWithComparatorParam and use fn.n.id()
			(which is small for small strings and at most 32 bytes so maybe size 65 chars as text)
			to compare first, and break ties (hashCollisions) by sorting by GodelLessThan.
			Replace btflGet and btflPut with avlGet and avlPut. Also avlNormTo_completeBinaryTreeExceptForDeepest.
			Rebuild the avl, either by starting empty and inserting all again in same order,
				or by making it a completeBinaryTreeExceptForDeepest kind of norm (which is still a valid avl).
			I'm doing this instead of trie, cuz it normally has less height and is faster to reshape.
			The main use of it will be copying between the Mut/MutLam/Fo/IfElse/etc optimizations and avl state.
			Such a state (an avl tree) can be used with IfElse Fo etc with or without the Mut optimization,
			which I guess will happen without optimization when doing small things,
			and with optimization (Mut.m = {id to Mut} etc) for number crunching, graphics, sound, etc.
			Copy avl code from wavetree on my github.
			Be careful to only optimize if know the comparator always halts and compares consistently,
			cuz if it wouldnt have halted in middle calculations that were done as Mut instead,
			then thats an error to halt. If its the main id function with GodelLessThan breaking ties, thats true.
			In this treemap, have (KE comparator k val) (KEC comparator k cbt) and (KKE comparator a b val).
			The L of all of those is the avl key.
			Maybe also fn, double, and few other types that are in Mut.
		/*...
		OLD... SOLUTION: use avltreemap as the stream datastruct, with GET, PUT, and NORM funcs,
			and it takes param of comparator, and only allow optimizing it with MutLam/IfElse/Fo/etc
			if the VM (not necessarily user level) knows the comparator is consistent.
			GodelLessThan can be such a comparator, which returns T or F for any lambda.
			I could use VarargAx to prove an avltreemap is correct, or i could use funcallcaching to
			check it every time. The latter is simpler.
			A derived (by λ opcode) avltreemap would look something like this...
			(Avl GodelLessThan_orOtherComparator TheHeight LeftAvlOrLeaf RightAvlOrLeaf)
			But since a keyVal can be anything, such as [KKE a b c] or (Avl GodelLessThan ...) etc,
			need a way to specify that a LeftAvlOrLeaf is a leaf vs nonleaf.
			Could do it as 2 (instead of 1) of TheHeight.
			(Avl GodelLessThan_orOtherComparator LeftHeight RightHeight LeftAvlOrLeaf RightAvlOrLeaf)
			For most pairs of heights with a comparator, (Avl GodelLessThan_orOtherComparator LeftHeight RightHeight) will be reused many times, so its still efficient to store this way.
			Could instead use [GodelLessThan_orOtherComparator LeftHeight RightHeight LeftAvlOrLeaf RightAvlOrLeaf]
			but then would need a separate GET function. K? and K?C and KK? are separate get funcs anyways.
			[Comparator LeftHeight LeftAvlOrLeaf RightHeight RightAvlOrLeaf]
			is less efficient but easier for humans to read.
			[Cmp343 LeftHeight [Cmp343 ...] Right [Cmp343 ...]].
			Why put heights in the avl datastruct if not going to put minkey and maxkey?
			Could just do it as [Comp343 [Comp343 ...] [Cmp343 ...]] and use funcallcaching for that.
			Need height there cuz if its 0 then view that child as a keyval instead of another avl,
			OR could put an isAvlLeaf param in (T or F), or have 2 opcodes for it...
			(AvlLeaf Cmp343 AKeyVal) or (AvlLeaf Cmp343 AKey AVal).
			(AvlBranch Cmp343 (AvlLeaf Cmp343 AKey AVal) (AvlBranch Cmp343 ... ...)).
			Comparator/Cmp343 might do a hash to int32 at first, and break ties with GodelLessThan.
			Considering that VarargAx can intheory be verified as it streams in, but requiring recomputing
			every part of it, I could potentially make avl trees that claim they are correct avl trees,
			OR i could just have an AvlVerify func.
			Even if VarargAx does verify the data observed so far in the avl tree,
			that doesnt prove a given comparator (Cmp343 its named here) is consistent or always halts.
			I could accept a limit on comparators to have to be some kind of nand forest
			(even if not stored or optimized that way) that reads nands at each of 2 childs
			to compute some bits (by nands) at self. Can GodelLessThan be defined that way,
			starting with the IsLeaf op? Might also need a HeightLessThan op to do it efficiently.
			But then how does it call itself recursively?
			λ opcode is designed for that but is more complicated than I want to deal with for this simple thing,
			cus it does a linear search and compares lambdas for equality.
		*/
		
		
		//vm.addOp('D',null,false,2,'Get double value from map. (D key Map) -> val of (DE key) in that map',{langs:{}});
		vm.o8OfD = vm.addOp('D',null,false,2,'(D x ns_such_as_treemap) -> (map (D x)). Get (whats normally a) double value from map. (D key Map) -> val of (D key) in that map. The $ in a/b/sum$.',
			//TODO use tyFunc to have a defaultTy that varies? Depending on what? Should this be key sometimes and num other times?
			//{ty:'key', langs:{
			{ty:'num', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					if(vm.isS2(fn)){
						throw 'TODO <D GetVarname GetNamespace>, fn='+fn;
					}else{
						if(ty == 'key'){
							return tr.key(fn); //(D x ns) -> value of key (D x)/x$. This is unlike ops.Get and ops.Put which use the x/varname directly. This is like (P x)/x% and (Getcbt x)/x@
						}else if(ty == 'num'){
							//FIXME x$ should be the .d of (D x) not of x, but since that will be fixed separately and change everywhere globally i dont want to mark a bunch of these as broken.
							//return tr.key(fn.n.R())+'.d';
							
							//remove the $/D cuz should be Ω.λx.d (just the string x).d instead of Ω.x$.d (D x).d:
							//return tr.key(fn)+'.d'; //keep (D x)
							
							return tr.key(fn.n.R())+'.d'; //if fn is x$ aka (D x) aka fn.n.R() then its like Ω.λx.d
						}else{
							throwTrFnTy(tr,fn,ty,optionalPrefix);
						}
					}
				},
			}});
		//vm.o8OfDu = vm.addOp('Du',null,false,2,'(Du x map) -> (map (Du x)). Get general fn (often not deduped) from map. (Du key Map) -> val of (Du key) in that map. The ^ in a/b/fnVar^.',{langs:{}});
		//vm.o8OfDuE = vm.addOp('DuE',null,false,3,'(DuE GetObKey GetVal map) -> map forkEdited to have key (Du (GetObKey map)) mapped to (GetVal map). To put literal key x and literal value y, use (DuE ,x ,y TheMap) which maps (Du x) to y.',{langs:{}});
		//(DGo x map) -> (map (D (x map))). Example: a/b/sum$ is (DGo a/b/sum) is (DGo (GoO (OO a b) sum)).
						//Call that on a Treemap and it recurses a/b/sum$ in it to get a val.
		vm.o8OfDE = vm.addOp('DE',null,false,3,'(DE GetObKey GetVal map) -> map forkEdited to have key (D (GetObKey map)) mapped to (GetVal map). To put literal key x and literal value y, use (DE ,x ,y TheMap) which maps (D x) to y. ... OLD: Put double value into map. (DE key val Map) -> forkEdited map, that maps (DE key) to val.',
			{ty:'ns', langs:{
				/*(DE ,x ,0)
				(DE ,ret ,1)
				(DE ,x <+ x$ ,1>)
				(DE ,ret <+ <* ret$ ret$> ,1>)
				(DE a/b/c ,5)
				*/
				js: (tr,fn,ty,optionalPrefix)=>{
					let jsList = tr.fnToJsList(fn);
					let keyGetter = jsList[1]; // a/b/c or ,x etc.
					let valGetter = jsList[2]; // ,5 or <+ <* ret$ ret$> ,1> or <+ x$ ,1> etc.
					let nsOrUndefined = jsList[3];
					if(nsOrUndefined!==undefined){
						throw 'TODO sList/{}/<>, nsOrUndefined is the extra param.';
					}
					//throw 'FIXME, keyGetter should be dynamic, not use keyGetter literally. (DE ,x) should use x as key, not ,x. Also if vm.isS2(fn) then jsList will get the sLIst contents, so theres another level to deal with. If nsOrUndefined!==undefined then it is an sList and has that 1 extra param, so 2 namespaces, one read from the other at runtime.';
					//FIXME you can technically put things other than a double in there, but if so then this optimization shouldnt happen.
					//return tr.key(keyGetter)+'.d = '+tr.num(valGetter)+';';
					//return tr.transpileOrLocalVar(keyGetter)+'.d = '+tr.transpile(valGetter)+';';
					//return tr.transpile(keyGetter)+'.d = '+tr.transpile(valGetter)+';';
					//return tr.transpile(ops.D(keyGetter))+'.d = '+tr.transpile(valGetter)+';';
					//return tr.transpile(keyGetter,null,ops.D)+'.d = '+tr.transpile(valGetter)+';';
					return tr.transpile(keyGetter)+'.d = '+tr.transpile(valGetter)+';';
				},
				/*js: (tr,fn,ty)=>{
					
					//is it a <...>? If its a {} this wouldnt be called by Transpiler.transpile cuz would have thrown.
					//FIXME Also the number of params in the <...> should have been checked by that and throw if its not the expected number.
					//let ptr = vm.isS2();
					let keyGetter; // a/b/c or ,x etc.
					let valGetter; // ,5 or <+ <* ret$ ret$> ,1> or <+ x$ ,1> etc.
					if(vm.isS2()){
						let sList = vm.sListToJsList(fn);
						keyGetter = sList[1];
						valGetter = sList[2];
					}else{
						keyGetter = fn.n.L().n.R(); // a/b/c or ,x etc.
						valGetter = fn.n.R(); // ,5 or <+ <* ret$ ret$> ,1> or <+ x$ ,1> etc.
					}
					
					//throw 'Use tr.transpile(keyGetter,WHATTYPE?) and tr.transpile(valGetter,WHATOTHERTYPE?). Use tr.gBit tr.gStatement etc, which calls those. FIXME that code has to use vm.Mut.';
					//return tr.gKey(keyGetter)+'.d = '+tr.gNum(valGetter)+';'; //FIXME you can technically put things other than a double in there, but if so then this optimization shouldnt happen.
					
					
					//FIXME?? a func can be a getter without being an S2. Example: (T 5). Example: (λ [a b ignore <+ a% b%>] 3 4) returns 7 when called on any param.
					//so maybe just checking vm.isS2(fn) and that its a <...> might not be enough???
					return tr.key(keyGetter)+'.d = '+tr.num(valGetter)+';'; //FIXME you can technically put things other than a double in there, but if so then this optimization shouldnt happen.


					//throw 'DE. TODO how to call transpile recursively? And give what type such as num or bit or maybe gStatement or maybe statement etc? Do so on keyGetter='+keyGetter+' and valGetter='+valGetter;
				},*/
				/*js: (tr,fns,ty,slev)=>{
					if(fns.length != 1){
						throw 'fns.length='+fns.length;
					}
					let fn = fns[0];
					let keyGetter = fn.n.L().n.R(); // a/b/c or ,x etc.
					var valGetter = fn.n.R(); // ,5 or <+ <* ret$ ret$> ,1> or <+ x$ ,1> etc.
					//throw 'Use tr.transpile(keyGetter,WHATTYPE?) and tr.transpile(valGetter,WHATOTHERTYPE?). Use tr.gBit tr.gStatement etc, which calls those. FIXME that code has to use vm.Mut.';
					return tr.gKey(keyGetter)+'.d = '+tr.gNum(valGetter)+';'; //FIXME you can technically put things other than a double in there, but if so then this optimization shouldnt happen.
					//throw 'DE. TODO how to call transpile recursively? And give what type such as num or bit or maybe gStatement or maybe statement etc? Do so on keyGetter='+keyGetter+' and valGetter='+valGetter;
				},*/
			}});
		
		vm.o8OfDGo = vm.addOp('DGo',null,false,2,'Like D except with pointer jumping for first param. (DGo x map) -> (map (D (x map))). Example: a/b/sum$ is (DGo a/b/sum) is (DGo (GoO (OO a b) sum)). Call that on a Treemap and it recurses a/b/sum$ in it to get a val.',
			{ty:'num', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					// a/b/c$ means (DGo (GoO (OO a b) c) ns), but the (GoO (OO a b) c) part could be any x that gets called (x ns).
					let jsList = tr.fnToJsList(fn);
					if(vm.isS2(fn)){
						throw 'TODO S2 <DGo GetKeyA GetNs> which waits for another ns, fn='+fn;
					}else{
						if(ty == 'num'){
							//FIXME??? Or was this just a problem in addOp('D'?
							//x$ should be the .d of (D x) not of x, but since that will be fixed separately and change everywhere globally i dont want to mark a bunch of these as broken.
							let getKeyA = jsList[1];
							return tr.gKey(getKeyA)+'.d';
						}
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
			}});

		vm.o8OfBlGo = vm.addOp('BlGo',null,false,2,'(BlGo a SomeMap) -> (SomeMap (Bl (SomeMap a))) or should it be (Bl (a SomeMap) SomeMap)',
			{ty:'bl', langs:{}});

		vm.o8OfDE = vm.addOp('PE',null,false,3,'PE is a setter. P is a getter. Similar to DE vs D. (PE GetObKey GetVal map) -> map forkEdited to have key (P (GetObKey map)) mapped to (GetVal map). To put literal key x and literal value y, use (PE ,x ,y TheMap) which maps (P x) to y.',{ty:'ns', langs:{}});
		
		//vm.o8OfDuGo = vm.addOp('DuGo',null,false,2,'Like Du except with pointer jumping for first param. (DuGo x map) -> (map (Du (x map))). Example: a/b/sum^ is (DuGo a/b/fnVar) is (DGo (GoO (OO a b) fnVar)). Call that on a Treemap and it recurses a/b/sum^ in it to get a val.',{langs:{}});

		/*(Da x) was replaced by (P x) aka x%, BUT 2023-5-25 theres still "mm:wikibChooseDesign_(P x) aka x%, in Treemap vs Lambdo/Mutlambdo" to solve, cuz might bring Da back depending on what way its solved.
		//vm.xt("Redesigning lambdas 2023-4+ parse a%", Evv('a%'), Evv('(Da a)')); //Du/^ D/$ Da/% a/b/sum$ a/b/possiblyNotDedupedFuncVar^
		vm.o8OfDa = vm.addOp('Da',null,false,2,'(Da varName namespace), where namespace can be a LamNs (most direct way), Treemap, EmptyTreemap, or Ns (recursive namespace), gets that var value from readOnly lambda/mutlambda params, or U if not found. Theres no DaGo, like DuGo and DGo, cuz that only happens for object-oriented/cycles in Treemap (or Treemap in Ns), not in LamNs. Its only 1 var name deep in LamNs, but outside the Da (TODO?) you might still use recursion, like maybe varName%/x/y/sum$ (TODO fix parser/tostring/treeUI to allow that). The varName% syntax. Get a readonly lambda/mutlambda param. Du/^ D/$ Da/% a/b/sum$ a/b/possiblyNotDedupedFuncVar^',{langs:{}});
		*/
		
		
		/*
		FIXME choose to change order of params here, such as <KE (F U) GetKey GetVal> where (F U) gets the Treemap,
		or choose not to reorder. I was about ready to reorder it that way but then what should it put as key in the treemap,
		since (KE Key) would no longer be a prefix of it? Maybe do it both ways,
		but put (KE Key) and (KKE KeyA KeyB) in the map nomatter which one did it?
		Do I want an op that does the same as <KE (F U)> aka {,KE (F U)} aka (S (T KE) (F U))?
		That being the kind of KE (choose 1, drop the other from VM, TODO) where map is first param not last param.
		Do I want an op that calls (KE key val) on 2 params when its given 1 param? and the
		same param is used twice? (PP (KE key val) map) -> (KE key val map map). That way i could keep map as third param,
		but need <...> instead of (...). (PP <KE GetKey GetVal>)??? That still has the problem of what goes in the map as key,
		is it (KE key) or does it include that theoretical PP op too?
		The best solution so far seems to be the KE op does (KE map key val) -> forkedited map, and to use (<<KE I> GetKey GetVal> map),
		and make some opcodes or just use [...], for what that puts as key in the map. ???
		TODO list out all the depths of recursion that go in the map, and primitive types,
		and solve them all at once here...
		It needs to know bit size of 8 16 32 or 64 bits, but maybe not if 32 is a float vs int, and if 64 is double vs long, etc.
		It needs up to 2 keys, but not 3, cuz (object key value) is enough to recurse things like .a.b.c.def.ghi,
		and in that case it first gets the 'a' key from map, then what that returns gets 'b' key from map, and so on. Thats just a getter.
		vm.Mut will be flat for deduped fn keys (that joined with whichMutCallGroup) are primaryKey of a Mut so Mut as a mutable map of Mut to Mut,
		and nonflat in having an extra depth of Float64Array or Int32Array etc at some js field,
		and having a .dupFn js field, etc (might name these differently), and having a field thats a single mutable float64/double, etc.
		The purpose of these ops is to be a snapshot, in a treemap, of that vm.Mut optimization, and to run it slowly in interpreted mode
		when not using that optimization. Need opcode for each of those things, including such fields in Mut and to modify just a part of an array in Mut
		such as (DE key val Map) should instead be (DE Map key val).
		Need to know if there will be a different js field in Mut for Float64Array vs Int32Array etc, vs will that be a Buffer (js object)
		which those can share and overlap. And is a Mut allowed to have more than 1 such array? The array can be replaced by another array of var size
		at runtime, but probably best not to allow copying ptr to it to have multiple incoming ptrs to it from multiple Muts.
		It should stay as being the array value of that Mut. Size and primType of it must be chooseable at runtimee.
		..
		*/
		
		
		
		
		
		/*SOLUTION: key is the getter, something like (but choose shorter names) (MutMut keya keyb) (MutD keya) (MutDupFn keya) (MutTypedBlob keya).
		The "change order of params here, such as <KE (F U) GetKey GetVal>" problem exists in alot of the loop/if/read/write ops im still coding,
		including Fo, If (or was it IfElse or Ife?), DE (set the (MutD keya) double val equal to a val), KKE, etc. Should rename some of those.
		Setter for (MutTypedBlob keya) would replace the whole blob at once, but also need setters with an extra int param for which index in the blob
		in units of uint8 int32 float32 float64 (and maybe a few other prim types?), like... (DE map player5sBallX 3.45) or <DEi ,player5sBallX ,3.45>
		where DEi#<DE I#(F U)>. Or something like that. Thats the single number val in a mut (and snapshot of it in treemap).
		The one with extra param might be (DDE map 7 3.45), where D means double/float64, or (todo find better name) if I means int then (DIE map 7.3.45).
		E in these names means set EQUAL to.
		These would usually be viewed, in text form, more like <DE .players.bob.x ,3.45> or maybe even .players.bob.x=,3.45
		where .players.bob.x= is a lambda that takes a map param and a value and returns a forkEdited map,
		but I probably got the number of params or <> vs {} vs () (s-curry-level etc) wrong and need to think about it more.
		.players in vm.Mut optimizations would be js code like "rootMut.idOfTheStringPlayers",
		and .players.bob.x would be js code like "rootMut.idOfTheStringPlayers.idOfTheStringBob.idOfTheStringX",
		but only for keys that wont ever overlap existing keys in the vm.Mut type such as .toString so add a prefix.
		It might end up generating js code like "m.λplayer.λbob.λx = (m.λplayer.λalice.λx*3);" where λalice might be returned by vm.eval('alice').n.id();
		Just tested it, vm.eval('alice').n.id() does return 'λalice'.
		Lambdas that arent short strings without whitespace etc, just give the full 256 bit id prefixed by 'λ'.
		So just use the .id() of the lambda, whatever it is. So variable names can be lambdas in general, not just strings.
		TODO before doing vm.Mut optimization, verify theres no keys that start with λ in vm.Mut,
		and verify that no lambda in the call to be optimized can get the call to be optimized during forkEditing of it (as Treemap states)
		and if it can then run it in slow intepreted mode instead.
		*/


		//(MutMut keya keyb) (MutD keya) (MutDupFn keya) (MutTypedBlob keya).
		//Call it O instead of mut, for Object. Leave M for Map.
		//vm.addOp('OGetO',null,false,2,'(OGetO key map)->(map key). (OGetO key) as datastruct meaning Mut, not Mut[Mut] like in OOGetO. They are all called on some root vm.Mut (Treemap normally). This gets directly from the Treemap just one level deep, instead of 2 levels deep like in OOGetO. That root treemap is the param.',{langs:{}});
		//vm.addOp('OOGetO',null,false,3,'(OOGetO keyA keyB) as datastruct meaning Mut[Mut]. Maps to (if this is a key in a Treemap) a fn, and in the vm.Mut optimization its Mut[Mut]->Mut. Next param is normally Treemap and get value of (OOGetO keyA keyB) from it. (TheTreemap x) gets value of x.',{langs:{}}); //(MutMut keya keyb)
		//FIXME where do i write the value type? Its Double/D but if i dont write the value in OO (its value type is O)
		//then its inconsistent to name it that way here.
		//vm.addOp('OGetD',null,false,2,' maps to (if this is a key in a Treemap) a float64/Double. Next param is normally Treemap and get value of (OGetD keyA) from it.  (TheTreemap x) gets value of x.',{langs:{}}); //(MutD keya)
		//vm.addOp('OGetDupO',null,false,2,'(OGetDupO keyA) maps to (if this is a key in a Treemap) a fn/lambda/O that in vm.Mut optimization tends to not be deduped for speed, like you can wrap big arrays and call GPU or CPU on combos of them without deduping them yet.. Next param is normally Treemap and get value of (OGetDupO keyA) from it.  (TheTreemap x) gets value of x.',{langs:{}}); //(MutD keya) //(MutDupFn keya)
		//vm.addOp('OGetBlob',null,false,2,'(OGetBlob keyA) maps to (if this is a key in a Treemap) a typed blob (though that isnt enforced) such as (TypevalC "application/x-IEEE-754-doubles" ...bits of 1024 doubles...). Next param is normally Treemap and get value of (OGetDupO keyA) from it.  (TheTreemap x) gets value of x.',{langs:{}}); //(MutTypedBlob keya).
		//rename them later to something shorter. just use those names for now.
		//vm.addOp('OOPutO',null,false,4,' (OOPutO map keyA keyB val) -> forkEdited map with (OOGetO keyA keyB) mapped to val. Most often used in {<OOPutO I#(F U)> GetKeyA GetKeyB GetVal}.',{langs:{}});
		//vm.addOp('OPutD',null,false,3,' (OPutD map key 2.34) -> forkEdited map with (OGetD key) mapped to 2.34. Most often used in {<OPutD I#(F U)> GetKey GetVal}.',{langs:{}});
		//vm.addOp('OPutDupO',null,false,3,' (OPutDupO map key val) -> forkEdited map with (OGetDupO key) mapped to val. Most often used in {<OPutD I#(F U)> GetKey GetVal}.',{langs:{}});
		//vm.addOp('OPutBlob',null,false,3,' (OPutBlob map key val) -> forkEdited map with (OGetBlob key) mapped to val. Most often used in {<OPutD I#(F U)> GetKey GetVal}.',{langs:{}});
		//TODO get and put doubles, floats, ints, bytes, etc (and is it signed or unsigned bytes>), and whole typedblobs, and maybe cbts by themself?
		//Also length funcs of such blobs, (Do these parts later...) and maybe concat, subrange, newemptyblob, etc.
		//Or... a single typed put, that takes int param and where it puts it depends on sizeof(type).
		vm.addOp('PrimSize',null,false,1,'(PrimSize (TypevalC ...)) -> 8..64 etc. (PrimSize of a TypevalB or TypevalC of doubles ints floats uint8s etc) in bits, such as 64 for a double array, 32 for an int array or float array, etc. TODO shorten and decide on which contentTypes will be used for such arrays, such as d for double or d* for doubles... OLD: application/x-IEEE754-doubles for double array. TODO what type should this return? double? cbt8? cbt16? cbt32? (TypevalC d the64bitsofdouble), in which case ty should be num?',{ty:'num', langs:{}});
		
		//vm.addOp('TGet',null,false,2,'TODO replace with Blie and Bli. Typed primitive array gET. (TGet array index) -> val at that index in the array.',{ty:'unknown', langs:{}});
		//vm.addOp('TPut',null,false,3,'TODO replace with Blie and Bli. Typed primitive array pUT. (TPut array index val) -> forkEdited array. Check (PrimSize array) for the size put in it. If its not a typed array, returns it as is. This will work with vm.Mut optimization without checking which size of array it is.',{ty:'typedBlob', langs:{}});
		
		/*
		vm.addOp('ZGet',null,false,2,'(ZGet cbtArray cbt32Index) -> Bit1 or Bit0, at that bit index in the array.',{langs:{}});
		vm.addOp('ZPut',null,false,3,'(ZPut cbtArray cbt32Index cbt1) -> forkEdited cbtArray with that Bit1 or Bit0 put at the index.',{langs:{}});
		*/
		
		//vm.addOp('BGet',null,false,2,'(BGet cbtArray cbt32Index) -> raw byte at that index',{ty:'unknown', langs:{}});
		//vm.addOp('BPut',null,false,3,'(BPut cbtArray cbt32Index cbt8Val) -> forkEdited cbtArray with that raw byte put at the index.',{ty:'typedBlob', langs:{}});
		
		/*
		vm.addOp('CPut',null,false,2,'(CGet cbtArray cbt32Index) -> raw short/int16/char at that index.',{langs:{}});
		vm.addOp('CPut',null,false,3,'(CPut cbtArray cbt32Index cbt16Val) -> forkEdited cbtArray with that raw short/char put at the index.',{langs:{}});
		
		vm.addOp('IGet',null,false,2,'(IGet cbtArray cbt32Index) -> raw int/float at the index.',{langs:{}});
		vm.addOp('IPut',null,false,3,'(IPut cbtArray cbt32Index cbt32Val) -> forkEdited cbtArray with that raw int/float put at the index.',{langs:{}});
		
		vm.addOp('JGet',null,false,2,'(JGet cbtArray cbt32Index) -> raw long/double put at the index.',{langs:{}});
		vm.addOp('JPut',null,false,3,'(JPut cbtArray cbt32Index cbt64Val) -> forkEdited cbtArray with that raw long/double put at the index.',{langs:{}});
		*/
		
		
		
		/*
		TODO choose syntax .abc.def is O/Mut, but if in that Mut want to get one of the fields
		(double, dupFn, typedBlob, or something inside the typedBlob, what syntax for that?) And should there be syntax for TGet BGet IGet etc?
		
		Heres some symbols on keyboard I maybe havent used yet, that might be available for these new syntaxs...
		~ ! @ $ % ^ &
		.abc.def
		.abc.def$
		.abc.def@
		.abc.def!
		
		$abc.def
		@abc.def
		!abc.def
		.abc.def.d
		.abc.def.f
		.abc.def.c
		
		Something like those should work. Next, And should there be syntax for TGet BGet IGet etc?...
		
		What smaller syntax for <TGet .abc.def ,20>, which in javascript would be abc.def[20] ?
		
		I dont like having to prefix things with "." like .abc means to GET abc from a param map: (OGetO abc).
		(OGetO abc map) is how its called on state.
		But ive been using anything that starts with lowercase as a string literal,
		and anything that starts with uppercase or certain chars as a Name#.
		*/
		
		
		

		
		//vm.addOp('KE',null,false,3,'TODO replace KE and KKE etc with Du Bl D O OO GoO etc which are being added 2023-3+. (KE Key Val Map) -> forkEdited map with (KE Key) mapped to Val.',{ty:'ns', langs:{}});
		//vm.addOp('KE',null,false,3,'(KE Map Key Val) -> forkEdited map with (KE Key) mapped to Val.',{langs:{}});
		//vm.addOp('KKE',null,false,4,'TODO replace KE and KKE etc with Du Bl D O OO GoO etc which are being added 2023-3+.  (KE KeyA KeyB Val Map) -> forkEdited map with (KKE KeyA KeyB) mapped to Val.',{ty:'ns', langs:{}});
		//vm.addOp('KKE',null,false,4,'(KKE Map KeyA KeyB Val) -> forkEdited map with (KKE KeyA KeyB) mapped to Val.',{langs:{}});

		vm.o8OfBl = vm.addOp('NewBl',null,false,2,'(NewBl contentType bize) -> (TypevalB contentType cbtOfAll0sThenPaddedWithA1Then0sTilNextPowOf2). Does not verify the bize is a multiple of contentTypes primitive type such as if its d* thats a double array so should be a multiple of 64 0s before the padding.',{ty:'bl', langs:{}});

		vm.o8OfBl = vm.addOp('BlE',null,false,3,'(BlE NameGetter ValGetter ns) -> forkEdited ns to map (Bl (NameGetter ns)) to (ValGetter ns). In javascript its similar to: x = new Float64Array(55), for example, if NameGetter is ,x and ValGetter makes such a (TypevalB d* bytesofdoublearray). TODO rename this to BlEGo? Or have both?',
			{ty:'ns', langs:{}});
		
		
		/* TODO replace KE and KKE etc with Du Bl D O OO GoO etc which are being added 2023-3+.
		Opcode: (Du a SomeMap) -> (SomeMap (Du a)) //get dup fn
		Opcode: (Bl a SomeMap) -> (SomeMap (Bl a)) //get typed blob
		Opcode: (D a SomeMap) -> (SomeMap (D a))
		Opcode: (O a SomeMap) -> (SomeMap (O a))
		Opcode: (OO a b SomeMap) -> (SomeMap (OO a b))
		Opcode: (GoO go c SomeMap) -> (SomeMap (OO (go SomeMap) c))
		*/
		//vm.o8OfDu = vm.addOp('Du',null,false,2,'(Du a SomeMap) -> (SomeMap (Du a)). Get potentially dup (not yet deduped) fn, especially in a vm.Mut optimization but also works in interpreted mode using Treemap all the way through.',{langs:{}});
		vm.o8OfBl = vm.addOp('Bl',null,false,2,'(Bl a SomeMap) -> (SomeMap (Bl a)). Get potentially dup typed blob such a TypevalB or TypevalC of a uint8 short int float32 or float64 etc primitive array, especially in a vm.Mut optimization but also works in interpreted mode using Treemap all the way through.',
			//FIXME ty should be typedBlob or key?
			//{ty:'typedBlob', langs:{
			{ty:'key', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					if(vm.isS2(fn)){
						throw 'TODO <Bl GetVarname GetNamespace>, fn='+fn;
					}else{
						//if(ty ==  'key'){
						return tr.key(fn); //(Bl x ns) -> value of key (Bl x)/x@. This is unlike ops.Get and ops.Put which use the x/varname directly. This is like (P x)/x% and (D x)/x$
					}
				},
			}});
		vm.o8OfRawBli = vm.addOp('RawBli',null,false,2,'(RawBli (TypevalB d* thedoublebits) 3) -> double at index 3 (in units of 64 bits, or in units of 8 bits if b* instead of d*, for byte array, etc. Also see RawBlie, and the nonraw forms Bli and Blie.',{ty:'num', langs:{}});
		vm.o8OfRawBlie = vm.addOp('RawBlie',null,false,3,'(RawBlie (TypevalB d* thedoublebits) 3 4.56) -> forkEdited typedBlob to have that double val at that index, and if the blobs type is not double then its cast. TODO can this change the size of it? what if its just past the end of the array?',{ty:'num', langs:{}});
		vm.o8OfBli = vm.addOp('Bli',null,false,3,'Blob index, of any primitive blob type. (Bli GetBlob GetIndexInBlob ns) -> double/num in that typedBlob in that ns, such as a specific double from a double[447] or a specific double from a byte[32] (TODO is it unsigned in case of byte? Uint8Array? Uint8ClampedArray?). These arrays are for example (TypevalB d bytesOfDoubleArray) for double or (TypevalB b bytesOfByteArray) etc. TypevalC lacks the padding that TypevalB has, in the bytes.',
			{ty:'num', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					let jsList = tr.fnToJsList(fn);
					if(vm.isS2(fn)){
						throw 'TODO Bli, fn='+fn;
					}else{
						let GetBlob = jsList[1];
						let GetIndexInBlob = jsList[2];
						//return tr.gKey(GetBlob,'key')+'.arr['+tr.transpile(GetIndexInBlob,'num')+']';
						return tr.gKey(GetBlob)+'.arr['+tr.transpile(GetIndexInBlob,'num')+']';
					}
				},
			}});
		//(Bli ,(TypevalB b* (0xff00ffffffffffff 0x00ffffffffff00ff (0x8000000000000000 0x0000000000000000))) ,0 U)
		vm.o8OfBlie = vm.addOp('Blie',null,false,4,'Blob index equals, of any primitive blob type. (Blie GetBlob GetIndexInBlob GetNewVal ns) -> forkEdited ns with the typedBlob (such as a double[447] or byte[32]) forkEdited to have that index in that blob mapped to (GetNewVal ns).',
			{ty:'ns', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					let jsList = tr.fnToJsList(fn);
					if(vm.isS2(fn)){
						throw 'TODO Blie, fn='+fn;
					}else{
						let GetBlob = jsList[1];
						let GetIndexInBlob = jsList[2];
						let GetNewVal = jsList[3];
						//return tr.gKey(GetBlob)+'.arr['+tr.transpile(GetIndexInBlob,'num')+'] = '+tr.gNum(GetNewVal)+';'; //FIXME should this be wrapped in a (...) or {...} in js?
						return tr.gKey(GetBlob)+'.arr['+tr.transpile(GetIndexInBlob,'num')+'] = '+tr.num(GetNewVal)+';'; //FIXME should this be wrapped in a (...) or {...} in js?
					}
				},
			}});
		vm.o8OfTylen = vm.addOp('Tylen',null,false,1,'(Tylen someTypedBlob) -> someTypedBlobs size in units of doubles, floats, ints, bytes, etc, whatever type its an array of. FIXME what should it do if its not such an array? infloop? return 0?',
			{ty:'num', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					throw 'TODO if its <...> or somehow using ns (not raw, like RawBli doesnt use ns vs Bli uses ns), then it will be something like stuff.arr.length';
				},
			}});

		vm.o8OfG = vm.addOp('G',null,false,3,'(G ob field ns) -> (map (G ob field)). Get (whats normally a) double value from map. The ^ in a/b^c which would be (GoG (OO a b) c) which gets value of (OO a b ns) and uses (G (OO a b ns) field) as key in ns and gets the (normally a double) val and returns it.',
			{ty:'num', langs:{}});

		//FIXME should it be (GoG GetOb GetField ns) or keep it as (GoG GetOb field ns)?
		vm.o8OfGGo = vm.addOp('GGo',null,false,3,'(GoG GetOb field ns) -> (G (GetOb ns) field ns). GoG is to G as GoO is to OO.',
			{ty:'num', langs:{}});

		vm.o8OfGE = vm.addOp('GE',null,false,4,'(GE GetOb GetField GetVal ns) -> TODO. G and GGo are to read as GE is to write (by forkEdit of course). GE is to [G and GGo] as DE is to [D and DGo]. FIXME should there be GGoE and GE, where (GE ob field ns) and (GGoE GetOb GetField ns)? Or just (GE GetOb GetField ns)? Maybe call it RawGE vs GE?',
			{ty:'ns', langs:{}});

		//vm.o8OfD = vm.addOp('D',null,false,2,'(D a SomeMap) -> (SomeMap (D a)). Normally used with typed double/float64 and often vm.Mut optimization.',{ty:'num', langs:{}});
		//Remove ops.O. Use OO or DGo or D or DuGo or Du etc, but if its just 1 param then its a literal, not Go/pointer: vm.o8OfO = vm.addOp('O',null,false,2,'(O a SomeMap) -> (SomeMap (O a)). /varName 1 level deep. Normally used with vm.Mut optimization.',{langs:{}});
		vm.o8OfOO = vm.addOp('OO',null,false,3,'(O varName secondVarName SomeMap) -> (SomeMap (O a)). /varName/secondVarName 2 levels deep. Normally used with vm.Mut optimization.',
			{ty:'key', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					//(OO a b)
					//let jsList = tr.fnToJsList(fn);
					if(ty == 'key'){
						//let keyA = jsList[1];
						//let keyB = jsList[2];
						//return tr.key(keyA)+'.'+tr.idOf(keyB);
						return tr.key(fn);
					}
					/*if(ty == 'gKey'){
						let keyA = fn.n.L().n.R();
						let keyB = fn.n.R();
						return tr.key(keyA)+'.'+tr.idOf(keyB);
					}*/
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
			}});
		vm.o8OfGoO = vm.addOp('GoO',null,false,3,'(O getVarName secondVarName SomeMap) -> (SomeMap (OO (getVarName SomeMap) secondVarName)). /varName/secondVarName 2 levels deep but used when its deeper than 2 such as /varName/secondVarName/thirdVarName. Normally used with vm.Mut optimization.',
			{ty:'key', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					//(GoO (OO a b) c)
					let jsList = tr.fnToJsList(fn);
					//if(ty == 'gKey'){
					if(ty == 'key'){
						let getKeyA = jsList[1];
						let literalKeyB = jsList[2];
						//let getKeyA = fn.n.L().n.R();
						//let literalKeyB = fn.n.R();
						//return tr.gKey(getKeyA)+'.'+tr.idOf(literalKeyB);
						
						/*
						return tr.key(getKeyA)+'.'+tr.idOf(literalKeyB);
						Problem:
						getKeyA+''
						'a/b/c'
						tr.key(getKeyA)+''
						Wrong: 'λ.λ0001cbf5fdffffff60246a435a6f2a1541f096900fee8b8cede1e72529da8e3e'
						*/
						return tr.gKey(getKeyA)+'.'+tr.idOf(literalKeyB);



						//FIXME idOf wont work if fn is an S2 cuz fnToJsList got contents of <...> (or {...} but that would have thrown cuz this optimization doesnt do that (yet? 2023-6-14))
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
			}});
		
		
		
		/*
		newsyntaxfixmefixme
		TODO syntax for /a/b/sum$ meaning (D (OOToO (OOToO a b) sum)) or maybe it means (D (OOToO (OToO a) b) sum))?
		UPDATE: Since the outer OOToO in (OOToO (OOToO a b) sum) has to work, the inner one has to be (OOToO (OToO a) b),
			cuz it should be (OOToO Getter literal Map) -> (Getter Map)... FIXME continue that. what is it missing?
		..
		Or maybe it should be writable as Os[a b sum]$ ?
		FIXMEFIXME
		/a mut directly, its primaryKey, what it gets from the Treemap from key (OToO a).
		/a$ mut double
		/a^ mut dupFn
		/a~ mut typedBlob.
		/a/b/sum$
		(Dget /a/b/sum *[/a/somethingXYZ$ <* /a/c$ ,2>])
		TODO write testcases. put them in the "extraTests" for now, while they're not passing yet.
		Start very simple, small code.
		TODO also use ZGet SPut IGet OOPutO etc.
		TODO make extraTests have a string to display on the button in the html, that when u click the button it runs the test.
		TODO AugmentedBalls.wikib file has some wikib code that I want to use with webcam and canvas, but those opcodes dont exist yet.
		TODO start using evilbit in first byte, if havent already, and get the vm.mask_* bits into the id, and finish the ids asap.
		
		
		
		TODO figure out how the rects will display recursively in /a/b/sum$ etc or should it be $/a/b/sum or $/sum/b/a or what order?
		(nevermind: Just here, use [] to mean such rects, instead of Infcur list... (nevermind, use (...) in (...) for that, cuz thats how it actually occurs.)
		Which of these "(D (OOToO (OOToO a b) sum)) or maybe it means (D (OOToO (OToO a) b) sum))"?
		cuz it should be (OOToO Getter literal Map) -> (Getter Map)... FIXME continue that. what is it missing?
		...
		All 4 of these could be keys in Treemap in the vm.Mut optimizations[
			(OToO a)
			(OOToO (OToO a) b)
			(OOToO (OOToO (OToO a) b) sum)
			(Dget (OOToO (OOToO (OToO a) b) sum))
		]
		The fns have to be in this order:
		(Dget (OOToO (OOToO (OToO a) b) sum))
		so choose how it should display:
		/a/b/sum$
		Now merge them...
		(Dget (OOToO (OOToO (OToO "/" a) "/" b) "/" sum) "$")
		And similar to isFoldL, hide the parts other than / a / b / sum $.
		That would further complicate the UI by requiring "/" be displayed in middle of 2 childs, and complicates the logic of when that happens.
		"$" being at the end, instead of middle, is simpler.
		Could make a syty for OOToO0 OOToO1 OOToO2 etc.
		Its doable, but is there a simpler way?
		
		Add testcase for (Dget (OOToO (OOToO (OToO a) b) sum)) displaying as /a/b/sum$
		
		Theres already isUnary syntax, but things going in middle and end, instead of the start/left, complicates parsing.
		Maybe should do the parsing as "/a/b/sum$" comes in and is parsed all at once.
		/a comes in. (OToO a)
		Next is /b. (OOToO (OToO a) b).
		Next is /sum (OOToO (OOToO (OToO a) b) sum).
		Next is $. (Dget (OOToO (OOToO (OToO a) b) sum)).
		
		"cuz it should be (OOToO Getter literal Map) -> (Getter Map)... FIXME continue that. what is it missing?"
		(OToO a SomeMap) -> (SomeMap (OToO a)).
		//(OOToO (OToO a) b SomeMap) -> (SomeMap (SomeMap (OToO a))) FIXME wheres the b?
		(OOToO (OToO a) b SomeMap) -> (SomeMap (OOToO (OToO a) b)) Is that right? Probably not. It needs to get the value of key (OToO a) from SomeMap.
		It might be ok to have it 2 levels deep that way, as (OOToO (OToO a) b), but NOT 3 levels deep, cuz OOToO is as deep as it goes, not OOOToO,
		and ur supposed to use multiple OOToO to do anything deeper than 2 levels such as /a/b/c/a/a is 5 levels deep.
		(OOToO (OOToO (OToO a) b) sum SomeMap) -> what???
		Basically theres supposed to be a pair of fns [(OOToO x y) or (OOToO (OToO x) y) ???] as key
		and anything as val, as a way of using Treemap in vm.Mut optimization,
		AND there can be single key (OToO x) and its val.
		But thats not fitting together. Something needs adjusting in this design.
		..
		Maybe the keys should be (OToO a) and (OOToO a b) for levels 1 and 2 BUT for level 3 it uses an op other than OOToO, thats similar to OOToO...
		(OtherKindOf_OOToO (OOToO a b) sum)
		(OtherKindOf_OOToO (OOToO a b) sum SomeMap) -> (SomeMap (OOToO (SomeMap (OOToO a b)) sum)) ??? Is that right? I dont like its so many fns.
		It looks probably right. TODO verify. And even if so, can it be redesigned to use less fns?
		Also, need to verify it at depth 4, not just depth 3, before moving on to redesigning it...
		(OtherKindOf_OOToO (OOToO a b) sum SomeMap) -> (SomeMap (OOToO (SomeMap (OOToO a b)) sum)) //depth 3
		(OtherKindOf_OOToO (OtherKindOf_OOToO (OOToO a b) sum) fourth SomeMap) -> what??? //depth 4. IS THIS RIGHT???
		something seems wrong. Calling the first param of OtherKindOf_OOToO or not, calling the first param of OOToO or not.
		
		Focus on the bigger depths of OOToO-related stuff, where its first param has to be called on SomeMap.
		(OtherKindOf_OOToO CallMeOnSomeMap nextKey SomeMap) -> what?
		thinking, some parts... (CallMeOnSomeMap SomeMap)
		(Something (CallMeOnSomeMap SomeMap) nextKey)
		(SomeMap (Something (CallMeOnSomeMap SomeMap) nextKey))
		(Something (CallMeOnSomeMap SomeMap) nextKey SomeMap) -> (SomeMap (Something (CallMeOnSomeMap SomeMap) nextKey))
		..
		Can I merge DoOOToO with OOToO (to be just 1 opcode), or must it be 2 opcodes?
		(DoOOToO (DoOOToO ...) nextKey SomeMap) -> what?
		(DoOOToO (DoOOToO ...) nextKey SomeMap) -> (SomeMap (OOToO (DoOOToO ... SomeMap) nextKey))
		That would work, though maybe not the most efficient way (TODO), but what would (OOToO a b SomeMap) do?
		(OOToO a b SomeMap) would do (SomeMap (OOToO a b)).
		(DoOOToO  (OOToO a b) sum SomeMap) -> (SomeMap (OOToO (OOToO a b SomeMap) sum)).
		Appears could merge DoOOToO into OOToO, and use (OOToO ,a b) when dont want to recurse into a,
		but the ,a aka (T a) might be a problem in the key of Treemap.
		..
		???
		(OOToO (OOToO ,a b) sum SomeMap) -> (OOToO (OOToO ,a b SomeMap) sum SomeMap) ???
		(OOToO (OOToO ,a b SomeMap) sum SomeMap) -> ??
		First do (OOToO ,a b SomeMap).
		(OOToO ,a b SomeMap) -> (SomeMap (OOToO (,a SomeMap) b))
		(SomeMap (OOToO (,a SomeMap) b)) -> (SomeMap (OOToO a b)) No thats wrong, cuz (OOToO ,a b SomeMap) just dropped the , in ,a.
		I could define OOToO to have a base case if its first param starts with , aka (OOToO ,a b SomeMap) -> (SomeMap (OOToO ,a b))
		else does (OOToO x y SomeMap) -> (SomeMap (OOToO (x SomeMap) y)).
		I dont like that cuz its complex. I therfore choose not to merge DoOOToO with OOToO.
		Rename DoOOToO to GoOToO.
		So its now GoOToO and OOToO.
		Rename GoOToO to GoO. Rename OOToO to OO.
		..
		Opcode: (OO a b SomeMap) -> (SomeMap (OO a b))
		Opcode: (GoO go c SomeMap) -> (SomeMap (OO (go SomeMap) c))
		..
		(OO a b SomeMap) -> (SomeMap (OO a b))
		(GoO (OO a b) c SomeMap) -> (SomeMap (OO (SomeMap (OO a b)) c))
		(GoO (GoO (OO a b) c) d SomeMap) -> (SomeMap (OO (SomeMap (OO (SomeMap (OO a b)) c)) d))
		Ok these OO and GoO opcodes look right.
		..
		Next, add the opcode O (rename OToO to O).
		(O a SomeMap) -> (SomeMap (O a))
		..
		Theres now a nonnormed form of (OO a b): (GoO (O a) b).
		Problem is if SomeMap had (OO a b) as key but you called (SomeMap (GoO (O a) b)) looking for it.
		(GoO (O a) b SomeMap) and (OO a b SomeMap) both return (SomeMap (OO a b)),
		so its ok as long as in vm.Mut optimization it doesnt use calls of GoO as keys in the main state.
		..
		Opcode: (O a SomeMap) -> (SomeMap (O a))
		Opcode: (OO a b SomeMap) -> (SomeMap (OO a b))
		Opcode: (GoO go c SomeMap) -> (SomeMap (OO (go SomeMap) c))
		..
		These opcodes (that havent been implemented in vm.rootEvaler as of 2023-3-8) need to be redesigned[[
		Renamed to O: vm.addOp('OGetO',null,false,2,'(OGetO key map)->(map key). (OGetO key) as datastruct meaning Mut, not Mut[Mut] like in OOGetO. They are all called on some root vm.Mut (Treemap normally). This gets directly from the Treemap just one level deep, instead of 2 levels deep like in OOGetO. That root treemap is the param.',{langs:{}});
		Renamed to OO: vm.addOp('OOGetO',null,false,3,'(OOGetO keyA keyB) as datastruct meaning Mut[Mut]. Maps to (if this is a key in a Treemap) a fn, and in the vm.Mut optimization its Mut[Mut]->Mut. Next param is normally Treemap and get value of (OOGetO keyA keyB) from it. (TheTreemap x) gets value of x.',{langs:{}}); //(MutMut keya keyb)
		Add GoO.
		//FIXME where do i write the value type? Its Double/D but if i dont write the value in OO (its value type is O)
		//then its inconsistent to name it that way here.
		vm.addOp('OGetD',null,false,2,' maps to (if this is a key in a Treemap) a float64/Double. Next param is normally Treemap and get value of (OGetD keyA) from it.  (TheTreemap x) gets value of x.',{langs:{}}); //(MutD keya)
		vm.addOp('OGetDupO',null,false,2,'(OGetDupO keyA) maps to (if this is a key in a Treemap) a fn/lambda/O that in vm.Mut optimization tends to not be deduped for speed, like you can wrap big arrays and call GPU or CPU on combos of them without deduping them yet.. Next param is normally Treemap and get value of (OGetDupO keyA) from it.  (TheTreemap x) gets value of x.',{langs:{}}); //(MutD keya) //(MutDupFn keya)
		vm.addOp('OGetBlob',null,false,2,'(OGetBlob keyA) maps to (if this is a key in a Treemap) a typed blob (though that isnt enforced) such as (TypevalC "application/x-IEEE-754-doubles" ...bits of 1024 doubles...). Next param is normally Treemap and get value of (OGetDupO keyA) from it.  (TheTreemap x) gets value of x.',{langs:{}}); //(MutTypedBlob keya).
		//rename them later to something shorter. just use those names for now.
		vm.addOp('OOPutO',null,false,4,' (OOPutO map keyA keyB val) -> forkEdited map with (OOGetO keyA keyB) mapped to val. Most often used in {<OOPutO I#(F U)> GetKeyA GetKeyB GetVal}.',{langs:{}});
		vm.addOp('OPutD',null,false,3,' (OPutD map key 2.34) -> forkEdited map with (OGetD key) mapped to 2.34. Most often used in {<OPutD I#(F U)> GetKey GetVal}.',{langs:{}});
		vm.addOp('OPutDupO',null,false,3,' (OPutDupO map key val) -> forkEdited map with (OGetDupO key) mapped to val. Most often used in {<OPutD I#(F U)> GetKey GetVal}.',{langs:{}});
		vm.addOp('OPutBlob',null,false,3,' (OPutBlob map key val) -> forkEdited map with (OGetBlob key) mapped to val. Most often used in {<OPutD I#(F U)> GetKey GetVal}.',{langs:{}});
		]]
		..
		Or maybe theyre ok as they are, but write them out anyways, and do some examples with O OO GoO...
		Opcode: (Du a SomeMap) -> (SomeMap (Du a)) //get dup fn
		Opcode: (Bl a SomeMap) -> (SomeMap (Bl a)) //get typed blob
		Opcode: (D a SomeMap) -> (SomeMap (D a))
		Opcode: (O a SomeMap) -> (SomeMap (O a))
		Opcode: (OO a b SomeMap) -> (SomeMap (OO a b))
		Opcode: (GoO go c SomeMap) -> (SomeMap (OO (go SomeMap) c))
		..
		/a/b/sum$ is (D (GoO (OO a b) sum)) and might compile to javascript M.λa.λb.λsum.λD
		/a/b/c/a/a^ is (Du (GoO (GoO (GoO (OO a b) c) a) a)) and might compile to javascript M.λa.λb.λc.λa.λa.λsum.λDu
		a^ is (Du a) and might compile to javascript M.λa.λDu
		These examples and code it should generate looks right.
		Next, some opcodes for stuff inside cbts (which might be outside the scope of this /a/b/sum$ etc stuff?) but write it below and try to work it out,
		and either way, right after that, make these opcodes, test them, then upgrade vm.eval and the tree UI html to do the new syntax...
		..
		[[[
		TODO get and put doubles, floats, ints, bytes, etc (and is it signed or unsigned bytes>), and whole typedblobs, and maybe cbts by themself?
		Also length funcs of such blobs, (Do these parts later...) and maybe concat, subrange, newemptyblob, etc.
		Or... a single typed put, that takes int param and where it puts it depends on sizeof(type).
		vm.addOp('PrimSize',null,false,1,'(PrimSize (TypevalC ...)) -> 8..64 etc. (PrimSize of a TypevalB or TypevalC of doubles ints floats uint8s etc) in bits, such as 64 for a double array, 32 for an int array or float array, etc. TODO shorten and decide on which contentTypes will be used for such arrays, such as application/x-IEEE754-doubles for double array.',{langs:{}});
		
		vm.addOp('TGet',null,false,2,'Typed primitive array gET. (TGet array index) -> val at that index in the array.',{langs:{}});
		vm.addOp('TPut',null,false,3,'Typed primitive array pUT. (TPut array index val) -> forkEdited array. Check (PrimSize array) for the size put in it. If its not a typed array, returns it as is. This will work with vm.Mut optimization without checking which size of array it is.',{langs:{}});
		
		vm.addOp('ZGet',null,false,2,'(ZGet cbtArray cbt32Index) -> Bit1 or Bit0, at that bit index in the array.',{langs:{}});
		vm.addOp('ZPut',null,false,3,'(ZPut cbtArray cbt32Index cbt1) -> forkEdited cbtArray with that Bit1 or Bit0 put at the index.',{langs:{}});
		
		vm.addOp('BGet',null,false,2,'(BGet cbtArray cbt32Index) -> raw byte at that index',{langs:{}});
		vm.addOp('BPut',null,false,3,'(BPut cbtArray cbt32Index cbt8Val) -> forkEdited cbtArray with that raw byte put at the index.',{langs:{}});
		
		vm.addOp('CPut',null,false,2,'(CGet cbtArray cbt32Index) -> raw short/int16/char at that index.',{langs:{}});
		vm.addOp('CPut',null,false,3,'(CPut cbtArray cbt32Index cbt16Val) -> forkEdited cbtArray with that raw short/char put at the index.',{langs:{}});
		
		vm.addOp('IGet',null,false,2,'(IGet cbtArray cbt32Index) -> raw int/float at the index.',{langs:{}});
		vm.addOp('IPut',null,false,3,'(IPut cbtArray cbt32Index cbt32Val) -> forkEdited cbtArray with that raw int/float put at the index.',{langs:{}});
		
		vm.addOp('JGet',null,false,2,'(JGet cbtArray cbt32Index) -> raw long/double put at the index.',{langs:{}});
		vm.addOp('JPut',null,false,3,'(JPut cbtArray cbt32Index cbt64Val) -> forkEdited cbtArray with that raw long/double put at the index.',{langs:{}});
		]]]
		..
		The syntax will only be for GET, not PUT. TGet (or some variant of it) will be used with key (Bl someDoubles) and val (TypevalB application/x-IEEE754-doubles BytesOfDoubleArray).
		TGet
		"(TGet array index) -> val at that index in the array".
		Should it just be <TGet /a/b/theDoubleArray +[*[/a/offset$ ,4] ,2]> and not have a syntax just for it? Probably so.
		Ok, now is 2023-3-8 and Im about to code these opcodes: Du Bl D O OO GoO.
		But first, write testcases into vm.extraTests, and upgrade the extraTests system to have a string name of each test.
		*/
		
		
		
		
		//TODO remove 'K?' and 'KK?' ops.
		/*vm.addOp('K?',null,false,2,'TODO replace this with P and PE and OO and GoO. TODO rename K? to K, and rename KK? to KK. (K? Key Map) -> val of (KE Key) in that map, or U if not found. Since treemap called on key returns val, this just returns (Map (KE Key)).',{ty:'unknown', langs:{}});
		vm.addOp('KK?',null,false,3,'TODO replace this with P and PE and OO and GoO.TODO rename K? to K, and rename KK? to KK. (K? KeyA KeyB Map) -> val of (KE KeyA KeyB) in that map, or U if not found. Since treemap called on key returns val, this just returns (Map (KKE KeyA KeyB)).',{ty:'unknown', langs:{}});
		*/
		//vm.addOp('=',null,false,3,'(=[KeyA KeyB KeyC... Val] map) -> forkEdited map with that key/val changed recursively by what other keys are in the map',{langs:{}});
		/*
		//
		//fixmefixme make these opcodes work with (Fo x 5 [func body] []) and vm.btfl*.
		//	Test it in Wikibinator203DirectedGraphUI.html cuz it has working code
		//editor (drag and drop still experimental), though its code editor when
		//tostringing doesnt output working code every time.
		//
		//vm.addOp('ObVal',null,false,2,'(ObVal ob val) -> Val, whichever is the last ObVal of that Key',{langs:{}});
		vm.addOp('BtflGet',null,false,2,'Bring To Front List Get. (BtflGet X [... (X Y) ...]) -> Y. This is the GET that K? and KK? and K?C use internally. Use this with BtflPut.',{langs:{}});
		vm.addOp('BtflPut',null,false,2,'Bring To Front List Put. (BtflPut (X Y) [... (X Z) ...]) -> [... (X Y)], or [...] without (X Y) if Y is U cuz all missing vals are viewed as U. This is the GET that K? and KK? and K?C use internally. Use this with BtflGet.',{langs:{}});
		vm.addOp('K?',null,false,2,'(K? Key [... (KE Key Val) ...]) -> Val, whichever is the last ObVal of that Key',{langs:{}});
		vm.addOp('KE',null,false,3,'(KE Key Val [...]) -> [... (KE Key Val)], just appends a key/val pair to the end of the list',{langs:{}});
		vm.addOp('K?C',null,false,2,'(K?C Key [... (KEC Key Cbt)]) -> Cbt, whichever is the last Cbt of that Key',{langs:{}});
		vm.addOp('KEC',null,false,3,'(KEC Key Cbt [...]) -> [... (KEC Key Cbt)], just appends a key and its val as cbt (C) to the end of the list, separately from KE and K? vals',{langs:{}});
		vm.addOp('KK?',null,false,3,'(KK? Ob Key [... (OKE Ob Key Val) ...]) -> Val, whichever is the last ObVal of that Ob and Key',{langs:{}});
		vm.addOp('KKE',null,false,4,'(KKE Ob Key Val [...]) -> [... (KKE Ob Key Val)], just appends an ob/key/val triple to the end of the list',{langs:{}});
		*/
		
		
		//TODO opcodes for read and write cbt, similar to K? and KE (which are for fn in general) but specific to cbt as an optimization,
		//and opcodes for reading and writing inside a cbt at a size 1, 8, 16, 32, or 64 in it, such as reading or writing a double,
		//especiall in a vm.Mut (which is an optimization of a [...] stateless state). A Mut has a js map/{} of string to Mut and a Float64Array, Uint8Array, etc, that share the same buffer,
		//but those are details to work out... TODO.
		//Replace this with KE: vm.addOp('ObVal',null,false,2,'used with opmut and _[...] etc.',{langs:{}});
		//Replace this with OKE: vm.addOp('ObKeyVal',null,false,3,'used with opmut and _[...] etc.',{langs:{}});
		//Replace this with C=: vm.addOp('ObCbt',null,false,2,'used with opmut and _[...] etc.',{langs:{}});

		//vm.addOp('Mut',null,false,6,'Used with opmut* and lambdaParams*. This is a snapshot of a key/fourVals, normally used in a [...] stream/Infcur. (Mut cbtNotNecessarilyDeduped doubleThatIsOrWillBeDeduped fnThatIsOrWillBeDeduped fnNotNecessarilyDeduped fnAsKeyThatIsOrWillBeDeduped) is halted, and add 1 more param and it infloops). FIXME should Mut be a little varargAx-like as it could verify its params are those types (but unlike varargAx, guarantees it verifies fast)?',{langs:{}});
		//vm.addOp('OpmutOuter',null,false,2,'FIXME get rid of Opmut* opcodes, since StreamWhile StreamIfElse etc is fn to fn and is just optimized by evaler. (opmutOuter treeOfJavascriptlikeCode param), and treeOfJavascriptlikeCode can call opmutInner which is like opmutOuter except it doesnt restart the mutable state, and each opmutInner may be compiled (to evaler) separately so you can reuse different combos of them without recompiling each, just recompiling (or not) the opmutOuter andOr multiple levels of opmutInner in opmutInner. A usecase for this is puredata-like pieces of musical instruments that can be combined and shared in realtime across internet.',{langs:{}});
		//vm.addOp('OpmutInner',null,false,2,'FIXME get rid of Opmut* opcodes, since StreamWhile StreamIfElse etc is fn to fn and is just optimized by evaler.  See opmutOuter. Starts at a Mut inside the one opmutOuter can reach, so its up to the outer opmuts if that Mut contains pointers to Muts it otherwise wouldnt be able to access.',{langs:{}});
		
		
		/* TODO merge these with MaskByte op? Or have both? These are the 8 bits, though some have been renamed.
		vm.addOp('StackIsAllowstackTimestackMem',null,false,1,'reads a certain bit (stackIsAllowstackTimestackMem) from top of stack, part of the recursively-tightenable-higher-on-stack permissions system',{langs:{}});
		vm.addOp('StackIsAllowNondetRoundoff',null,false,1,'reads a certain bit (stackIsAllowNondetRoundoff) from top of stack, part of the recursively-tightenable-higher-on-stack permissions system',{langs:{}});
		vm.addOp('StackIsAllowMutableWrapperLambdaAndSolve',null,false,1,'reads a certain bit (stackIsAllowMutableWrapperLambdaAndSolve) from top of stack, part of the recursively-tightenable-higher-on-stack permissions system',{langs:{}});
		vm.addOp('StackIsAllowAx',null,false,1,'reads a certain bit (stackIsAllowAx) from top of stack, part of the recursively-tightenable-higher-on-stack permissions system',{langs:{}});
		vm.addOp('IsAllowHypercompute',null,false,1,'reads a certain bit (allowHypercompute) from top of stack. See the few "hyper" opcodes',{langs:{}});
		vm.addOp('stackAllowReadLocalIds ',null,false,1,'reads a certain bit (stackAllowReadLocalIds) from top of stack, part of the recursively-tightenable-higher-on-stack permissions system. This is a kind of nondeterminism where multiple cbts (such as always cbt128 or always cbt256 etc... not sure how much can standardize the size this early in design of the ops)... can be used as localId... multiple localIds for same binaryForestShape (of fn calls) but for each localId within same run of VM, theres at most 1 binaryForestShape. For example, localId128 in the prototype VM, would be Node.idA .idB .blobFrom and .blobTo, 4 ints.',{langs:{}});
		*/
		vm.addOp('IsCbt',null,false,1,'returns T or F, is the param a cbt aka complete binary tree of bit0 and bit1',{langs:{}});
		vm.addOp('ContainsAxConstraint',null,false,1,'returns t or f, does the param contain anything that implies any lambda call has halted aka may require infinite time and memory (the simplest way, though sometimes it can be done as finite) to verify',{langs:{}});
		
		//vm.xt('TODO add ops Iadd Imul Isub Idiv Imod, that take 2 doubles and give a double, but the returned double happens to be (todo choose one) an int32 or uint32 stored 
		vm.addOp('I+',null,false,2,'(I+ 2.34 10) -> 12. twos-complement int32 add, of float64s', {ty:'num',langs:{}});
		vm.addOp('I*',null,false,2,'(I* 2.34 10) -> 20. twos-complement int32 multiply, of float64s. In js this is normally implemented using Math.imul', {ty:'num',langs:{}});
		vm.addOp('Isub',null,false,2,'(I* 2.34 10) -> -8. twos-complement int32 subtract, of float64s', {ty:'num',langs:{}});
		vm.addOp('Idiv',null,false,2,'(Idiv 32.34 10) -> 3. twos-complement int32 divide, of float64s', {ty:'num',langs:{}});
		vm.addOp('Imod',null,false,2,'(Imod 32.34 10) -> 2. twos-complement int32 divide, of float64s', {ty:'num',langs:{}});
		
		vm.addOp('+',null,false,2,'TODO split + and * each into 2 ops, one thats direct and one whose params are [] of vararg to Scall and the next param is a ns, cuz its easier to prove things about it. (+ 2 3)->5. (+n[I I *n[,5 I]] ,10) -> 70. OLD... (3+2, reverse order to match the reverse in (...) if vararg), of 2 doubles, or +(X Y Z)State -> + of {Z State} {Y State} then {X State} (reverse order cuz thats the order they happen in (...)), for vararg in (...)/infcurList. + of doubles, either their raw bits or the R child (in case its a typeval, but doesnt verify its a typeval, just takes the R if its not a cbt)',
		{ty:'num', langs:{
			js: (tr,fn,ty,optionalPrefix)=>{
				//TODO make Vararg opcode and + * & | etc can be used as (Vararg + [a% b% c%] namespace). So use +n#(Vararg +) so +n[a% b% c%],
				//which would simplify transpiling???
				//
				//+ takes 2 params. If its first param is a [...] (Infcur list) then its a vararg list to call second param on each of then plus them all together.
				//If its first param is anything else, then it just adds the 2 params. In the vm.Mut optimization, this would occur like <+ GetX GetY> aka (S (S ,+ GetX) GetY).
				//Im starting to dislike that extra complexity of + and *. Maybe that should be separate opcodes. There might be a few other vararg opcodes to deal with.

				let jsList = tr.fnToJsList(fn);

				let paramA = jsList[1];
				let paramB = jsList[2];
				
				//+[GetX GetY GetZ] aka (+ (Infcur GetX GetY GetZ)). Not the (+ 2 3) kind, where in that case its a 2 instead of a [...].
				//its not llr. its just lr, cuz the last param isnt given in transpiling. let lastParam = fn.n.llr(0); But thats what the 0 is for.
				//Unless its a <> or {}, in which case jsList.length is 3 and does have last param, cuz the {} or <> delays evaling it until get another param such as a namespace.
				//let lastParam = fn.n.llr(0);
				if(paramA.n.isInfcur()){
					let jsCode = '(';
					let first = true;
					let list = paramA;
					while(list.n.hasMoreThan7Params()){ //returns 'M.λx.λD+(3*M.λy.λD)+M.λz.λD' etc. TODO optimize by also including loop vars on js stack?
						//TODO for determinism, make it add in a specific order? Forward list or reversed list? Match it between generated code and rootEvaler (o.Plus or what is it?).
						//I think its gonna have to be forward (which is the more expensive calculation) in rootEvaler
						//unless i want generated code that uses const keyword to choose the order, which is much longer code.
						if(!first) jsCode += '+';
						first = false;
						let listItem = list.n.R();
						jsCode += tr.num(listItem); //The Num (2.34) or GNum (,2.34 or a bigger math expr) should both return js code, so only need 1 func here "v.num".
						list = list.n.L();
					}
					jsCode += ')';
					return jsCode;
				}else{
					if(vm.isS2(fn)){
						if(jsList.length != 3){
							throw 'list.length != 3, it is '+jsList.length+' and should be + and 2 things to dynamic add, fn='+fn;
						}
						return '('+tr.num(paramA)+'+'+tr.num(paramB)+')'; //FIXME do dynamic. that appears to be literal.
						//throw 'paramA is not an Infcur/[] list. paramA='+paramA;
					}else{
						throw 'TODO handle this case too? paramA is not an Infcur/[] list, and its not an S list size 3. fn='+fn;
					}
				}
			}
			/*js: (v,fn)=>{
				//+ takes 2 params. If its first param is a [...] (Infcur list) then its a vararg list to call second param on each of then plus them all together.
				//If its first param is anything else, then it just adds the 2 params. In the vm.Mut optimization, this would occur like <+ GetX GetY> aka (S (S ,+ GetX) GetY).
				//Im starting to dislike that extra complexity of + and *. Maybe that should be separate opcodes. There might be a few other vararg opcodes to deal with.
				
				//+[GetX GetY GetZ] aka (+ (Infcur GetX GetY GetZ)). Not the (+ 2 3) kind, where in that case its a 2 instead of a [...].
				let lastParam = fn.n.llr(0);
				if(lastParam.n.isInfcur()){
					let jsCode = '';
					let list = lastParam;
					while(list.n.hasMoreThan7Params()){ //returns 'M.λx.λD+(3*M.λy.λD)+M.λz.λD' etc. TODO optimize by also including loop vars on js stack?
						if(jsCode.length) jsCode += '+';
						let listItem = list.n.R();
						jsCode += v.num(listItem); //The Num (2.34) or GNum (,2.34 or a bigger math expr) should both return js code, so only need 1 func here "v.num".
						list = list.n.L();
					}
					return jsCode;
				}else{
					throw 'Last param is not an Infcur/[] list';
				}
				
				//let firstParam = fn.n.llr(1);
				//let secondParam = 
				
				/*let condition = fn.n.llr(2);
				let loopBody = fn.n.llr(1);
				//let map = fn.n.llr(0)
				return 'while('+v.gBit(condition)+')'+v.gStatement(loopBody);
				*
			}*/
		}});
		vm.addOp('*',null,false,2,'TODO split + and * each into 2 ops, one thats direct and one whose params are [] of vararg to Scall and the next param is a ns, cuz its easier to prove things about it. (* 2 3)->6 (3*2, reverse order to match the reverse in (...) if vararg), of 2 doubles, or *[X Y Z]State -> * of {Z State}, {Y State}, and {X State}, for vararg in (...)/infcurList. See + for details on doubles in general. (((new syntax: {} call. () infcur. [] sCurryListButTOfFirst. <> sCurryList)))',
		{ty:'num', langs:{
			js: (tr,fn,ty,optionalPrefix)=>{
				//TODO other than + and *, generalize opcodes that work on 2 doubles, so dont have to duplicate transpiler code. Only + and * have a +[...] vararg,
				//or should there be an ops.Vararg prefix (Vararg + [...])?

				//See op + which parts of this were copied from 2023-6-18
				let jsList = tr.fnToJsList(fn);
				let paramA = jsList[1];
				let paramB = jsList[2];
				
				//but its * not +...
				//+[GetX GetY GetZ] aka (+ (Infcur GetX GetY GetZ)). Not the (+ 2 3) kind, where in that case its a 2 instead of a [...].
				if(paramA.n.isInfcur()){
					let jsCode = '';
					let list = paramA;
					while(list.n.hasMoreThan7Params()){ //returns 'M.λx.λD+(3*M.λy.λD)+M.λz.λD' etc. TODO optimize by also including loop vars on js stack?
						//but its * not +...
						//TODO for determinism, make it add in a specific order? Forward list or reversed list? Match it between generated code and rootEvaler (o.Plus or what is it?).
						//I think its gonna have to be forward (which is the more expensive calculation) in rootEvaler
						//unless i want generated code that uses const keyword to choose the order, which is much longer code.
						//if(jsCode.length) jsCode += '+';
						if(jsCode.length) jsCode += '*';
						let listItem = list.n.R();
						jsCode += tr.num(listItem); //The Num (2.34) or GNum (,2.34 or a bigger math expr) should both return js code, so only need 1 func here "v.num".
						list = list.n.L();
					}
					return jsCode;
				}else{
					if(vm.isS2(fn)){
						if(jsList.length != 3){
							throw 'list.length != 3, it is '+jsList.length+' and should be * and 2 things to dynamic add, fn='+fn;
						}
						return '('+tr.num(paramA)+'*'+tr.num(paramB)+')'; //FIXME do dynamic. that appears to be literal.
						//throw 'paramA is not an Infcur/[] list. paramA='+paramA;
					}else{
						throw 'TODO handle this case too? paramA is not an Infcur/[] list, and its not an S list size 3. fn='+fn;
					}
				}
			},
		}});
		vm.addOp('+n',null,false,2,'(+n[I I *n[,5 I]] ,10) -> 70. The [...] is used like <...> except is vararg. Calls each thing in [...] on the second param of +n, and whatever those return, adds it all. TODO choose order to be consistent between transpile and rootEvaler.',
		{ty:'num', langs:{
			js: (tr,fn,ty,optionalPrefix)=>{
				let jsList = tr.fnToJsList(fn);
				if(vm.isS2(fn)){
					throw 'TODO S2 of +n';
				}
				let list = jsList[1];
				let ns = jsList[2];
				let jsCode = '(';
				jsCode += list.n.params().map(x=>tr.num(x)).join('+');
				jsCode += ')';
				return jsCode;
			},
		}});
		vm.addOp('*n',null,false,2,'(*n[I I +n[,5 I]] ,10) -> 1500. The [...] is used like <...> except is vararg. Calls each thing in [...] on the second param of *n, and whatever those return, multiplies it all. TODO choose order to be consistent between transpile and rootEvaler.',
		{ty:'num', langs:{
			js: (tr,fn,ty,optionalPrefix)=>{
				let jsList = tr.fnToJsList(fn);
				if(vm.isS2(fn)){
					throw 'TODO S2 of *n';
				}
				let list = jsList[1];
				let ns = jsList[2];
				let jsCode = '(';
				jsCode += list.n.params().map(x=>tr.num(x)).join('*');
				jsCode += ')';
				return jsCode;
			},
		}});
		//vm.addOp('-',null,false,2,'double minus double. See + for details on doubles in general.',{langs:{}});
		vm.addOp('Mi',null,false,2,'double minus double. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Mod',null,false,2,'double mod double. See + for details on doubles in general.',{ty:'num', langs:{}});
		//vm.addOp('/',null,false,2,'double divide double. See + for details on doubles in general.',{langs:{}});
		vm.addOp('Div',null,false,2,'double divide double. See + for details on doubles in general.',{ty:'num', langs:{}});
		
		//commentingout ++ and Mii cuz... TODO derive an opEquals func so can call it like (FuncEquals + 1 varname ns), or something like that,
		//so it can be done for any of the double->double ops, and another for (double,double)->double ops.
		//vm.addOp('++',null,false,2,'++(a getB getC)State -> next State with value of ?(a getB getC) incremented. ++(a)State -> State with val of a incremented. See + for details on doubles in general.',{ty:'ns', langs:{}});
		//vm.addOp('Mii',null,false,2,'Minus minus. Mii(a getB getC)State -> next State with value of ?(a getB getC) decremented. --(a)State -> State with val of a decremented. See + for details on doubles in general.',{ty:'ns', langs:{}});

		vm.addOp('**',null,false,2,'[** 2 10]->1024. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('&',null,false,2,'double & double (cast both to int32 first, &, then back to double). See + for details on doubles in general.',
			{ty:'num', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					//TODO merge duplicate code between & | and various other (double,double)->double opcodes,
					//and similar for the double->double opcodes including sine, exp, etc.
					let jsList = tr.fnToJsList(fn);
					if(vm.isS2(fn)){
						let paramA = jsList[1];
						let paramB = jsList[2];
						return '('+tr.transpile(paramA,'num')+'&'+tr.transpile(paramB,'num')+')';
					}else{
						throw 'TODO &';
					}
				}
			}});
			
		vm.addOp('|',null,false,2,'double | double (cast both to int32 first, |, then back to double). See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Xor',null,false,2,'double xor double (cast both to int32 first, ^, then back to double). See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('~',null,false,1,'~double (cast to int32 first, ~, then back to double). See + for details on doubles in general.',{langs:{}});
		vm.addOp('Shll',null,false,2,'double << double (cast both to int32 first, <<, then back to double). See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Shrr',null,false,2,'double >> double (cast both to int32 first, >>, then back to double). See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Shrrr',null,false,2,'double >>> double (cast both to int32 first, >>>, then back to double). See + for details on doubles in general.',{ty:'num', langs:{}});
		
		vm.addOp('Floor',null,false,1,'round down of double. Sqrt of double. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Min',null,false,2,'minimum of 2 doubles. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Max',null,false,2,'minimum of 2 doubles. See + for details on doubles in general.',{ty:'num', langs:{}});

		vm.addOp('Neg',null,false,1,'negate double, unary. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Sine',null,false,1,'Sine of double. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Asine',null,false,1,'Arcsine of double. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Log1p',null,false,1,'log(1+x) of double. TODO get deterministic implementation from that code i wrote with the loop up to about 53 cycles, but reverse of that, or something like that. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Expm1',null,false,1,'exp(x)-1 of double. TODO get deterministic implementation from that code i wrote with the loop up to about 53 cycles. See + for details on doubles in general.',{ty:'num', langs:{}});
		vm.addOp('Sqrt',null,false,1,'TODO replace this with (** x .5). Sqrt of double. See + for details on doubles in general.',{ty:'num', langs:{}});


		//vm.addOp('Dplusraw',null,false,2,'raw means just the bits, not wrapped in a typeval. add to doubles/float64s to get a float64, or if in that op that allows reduced precision to float32 (such as in gpu.js) then that, but the result is still abstractly a double, just has less precision, and in gpujs would still be float32s during middle calculations.',{langs:{}});
		//vm.addOp('StreamGet',null,false,2,'FIXME theres 3 vals per key, not just 1. Merge this with GetVarFn GetVarDouble and GetVarDoubles. OLD... Reads a streaming map. Uses an infcur/[...] as a map, thats a stream-appendable (by forkEdit, still immutable) list of key val key val. It does linear search in the simplest implementation but opmut is being replaced by streamGet and streamPut etc which will have a Node.evaler optimization to compile combos of streamGet and streamPut and For While + * / Math.sin Math.exp etc... compile that to javascript code (still cant escape sandbox or cause infinite loops outside the stackTime stackMem etd (gas*) system, and in some cases compile it to GPU (such as using GPU.js or Lazycl). (streamGet keyB [keyB otherVal keyA valA keyB valB keyC valC])->valB, or ->u if there is no valB. [...] means (infcur ...). From the right end, looks left until finds the given key, and returns the val for it, or if reaches infcur before finding the key, then returns u. [...] is variable size. ([...] x)->[... x], so do that twice to append a key and val. Same key can be updated multiple times, statelessly. Equality of keys is by content/forestShape (see equals op). Vals arent checked for equality so you can use lazyDedup such as wrapping a large Float64Array or Float32Array or Int32Array (maybe only of powOf2 size or maybe bize and blobFrom and blobTo var can handle non-powOf2?) in a Node.',{langs:{}});
		//vm.addOp('StreamPut',null,false,2,'Writes a streaming map. See streamGet. (streamPut keyB someVal [keyA valA keyB valB keyA anotherVal])->[keyA valA keyB valB keyA anotherVal keyB someVal]',{langs:{}});
		//vm.addOp('StreamPack',null,false,1,'ForkEdits a [...] to only have the last val for each key. You would do this after writing a bunch of key/vals to it, each key written 1 to many times. For example, just a simple loop of a var from 0 to a million would create a [] of size 2 million, but streamPack it during that or at the end and its just size 2. When Evaler optimized it wont even create the [...] in the middle steps. (streamPack [keyA valA keyB valB keyA anotherVal])->[keyB valB keyA anotherVal].',{langs:{}});
		
		vm.addOp('GetByteInCbt',null,false,2,'(GetByteInCbt cbtOf32BitBlocks cbt32Index)->cbt8Val',{ty:'cbt8', langs:{}});
		vm.addOp('PutByteInCbt',null,false,2,'(PutByteInCbt cbtOf8BitBlocks cbt32Index cbt8Val)->cbt8Val',{ty:'cbt', langs:{}});
		
		vm.addOp('Get32BitsInCbt',null,false,2,'(Get32BitsInCbt cbtOf32BitBlocks cbt32Index)->cbt32Val',{ty:'cbt32', langs:{}});
		vm.addOp('Put32BitsInCbt',null,false,3,'(Put32BitsInCbt cbtOf32BitBlocks cbt32Index cbt32Val)->forkEdited_cbtOf32BitBlocks',{ty:'cbt', langs:{}});

		//vm.addOp('put32BitsInBitstring',false,3,'(put32BitsInBitstring cbt32Index cbt32Val bitstringOf32BitBlocks)->forkEdited_bitstringOf32BitBlocks',{langs:{}});
		vm.addOp('Eq',null,false,2,'Do 2 fns equal by content/forestShape of 2 params. This op could be derived using s, t, l, r, and isLeaf. implementationDetailOfThePrototypeVM(((If a node doesnt contain a blob such as Int32Array (which is just an optimization of bit0 and bit1 ops) then its id64 (Node.idA and Node.idB, together are id64, and blobFrom and blobTo would both be 0 in that case, which is normally id128) is its unique id in that VM. Maybe there will be a range in that id64 to mean blobFrom and blobTo are both 0 aka does not contain a blob.))).',{ty:'bit', langs:{}});

		vm.addOp('Jit','!',false,2,'(Jit func param)->(func param) but tries to optimize it by JIT compiling (see vm.evalers). Example: (Jit (Fo x 100000000 (DE ,y <+ y$ 1>))) waits to jit compile it until it gets next param (normally a ns), and stores the compiled evaler (fn.n.pushEvaler) stuff in that (Jit func) so it works on other params too. Technically you could put the evaler in the (Fo x 100000000 (DE ,y <+ y$ 1>)) itself, but then small fast combos of loops and if/else etc would get compiled, and the compiling itself takes longer than just running it in interpreted mode. By using Jit opcode, user level code can say to optimize it or not, but the VM will still do whatever it wants, as long as it returns the exact same fn. Its an optimization hint.',{ty:'fn', langs:{}});

		vm.addOp('While',null,false,3,'stream: (While condition loopBody stream) (rename stream to state).s is like, if you wrote it in javascript: while(condition(stream).n.z()) stream = loopBody(stream); return stream;',
			{
				ty:'ns', 
				//params: ['Condition', 'LoopBody', 'State'],
				
				/*FIXME need syntax to replace State = LoopBody(State); And i want Condition(State).n.z() replaced by the js form of Condition.
				Everything in vm.Mut optimization takes a State/Treemap param, but the generated code shouldnt contain State. Generated code should take a State param.
				Theres a few things it can convert exprs to:
				* bit (such as a<b or a+2==b)
				* double (such as 2.34 or a+2*(b-a*a)
				* statement (such as "x = 2*y+3;" or { ... multiple statements ... }).
				* are there NEW exprs like returns a new Float32Array(5*a+6)?
				* fn (such as returned by a/b/theFn^)
				
				Write some examples of the few things to return:
				Num[
					//literal double (TypevalC d 0x0000000000000000)
					2.34
				]
				GNum[
					//Any fn of Treemap to double (TypevalC d 0x0000000000000000)
					a/b/sum$
					,2.34
					<+ ,Num ,Num>
				]
				GBit[
					//Any fn of Treemap to T or F
					<Lt ,Num ,Num>
					,T
					,F
					<GodelLessThan a^ b^>
					(...any function that returns T or F)
				]
				GStatement[
					//any fn of Treemap to Treemap.
					_[Statement Statement...]
					(Fo GFn GBit GStatement) //loops
				]
				GFn[
					//any fn of Treemap to fn (can return anything). Normally used to call fn on fn to find/create fn, inside a vm.Mut optimization.
					a^
					,hello
					<NewDoubles GetSizeX> WARNING: Mut.valArr is not a Mut. Its a Float32Array Uint8Array etc. Its something you read and write in a Mut, not the Mut itself.
				]
				Only 1d arrays are supported, not 2d 3d etc.
				Should Mut have a different field for each possible kind of primitivearray (Uint8Array Float64Array etc), or should it all go in the same field?
				Eventually ill need to check ranges of Float32Array, sizes of loops, etc, so the generated code does the exact same thing as interpreted mode
				even if the fn its generated from goes out of Float32Array range. If it does, just run it in interpreted mode and let that happen the deterministic way.
				Ill need to consider that loop vars, such as i in For i i<j i++, are in interpreted mode written into the Treemap during that calculation,
				but after the calculation, whatever value was in the Treemap is put back in the Treemap,
				AND check for loopbody overwriting that loop var.
				Theres some vars in Treemap that no code must overwrite in a vm.Mut optimization, that thing which does NewId etc (allocates fns as keys for a/b/sum etc).
				Maybe should define Fo and For loops in terms of While loop since While is simpler since it doesnt have any loop var.
				I could define new loop types using λ opcode to call While opcode.
				What about remembering a var's value before the loop and putting it back after the loop?
				All var values start as U until changed if ever.
				How to prove the array size and loop size etc dont go out of range? Should I use VarargAx to prove that?
				I could just check at the time if the index is in range, especially fast if its a powOf2 size.
				Maybe should only do powOf2 size arrays of TypevalC (not TypevalB), and store the mask in the Mut?
				Maybe vm.Node.blobFrom and .blobTo should be blobFrom and blobMask? Can derive it either way.
				It being bytes in node, could be a problem for it being doubles floats ints bytes etc in Mut.
				...
				...
				...
				...
				...
				SOLUTION: js array objects (such as Float32Array) check their own bounds and return undefined when outside those (use ||0 or something like that),
				and do that js eval vm.Mut optimization SEPARATELY than GLSL or gpujs optimization. jseval wont prove array indexs are correct. It will simply
				allow all possible indexs. glsl and gpujs will be simpler (no a/b/sum$ pointer jumping etc) and be proven.
				Both ways will be exactly deterministic (depending on vm.mask_* options, can do it either way).
				Do it asap and do augballs and audivolv etc asap.
				...
				XType = Num, GNum, GBit, GStatement, GFn, etc.
				Each fn can be viewed as set<XType> that it can be used as, and set<XType> that it can return.
				For example, a Fo is a GStatement cuz it takes Treemap param and returns Treemap
					(though they all can technically take any param, this is the only case im optimizing it for).
				Theres also something like that for if its used to generate code vs is used as a fn at runtime.
				...
				No compile time bounds checking on arrays in vm.Mut optimization (but will still do that in glsl and gpujs which are less flexible).
				Just use the normal bounds checking built into Float32Array Uint8Array etc in browser javascript. It returns undefined outside of that range.
				Use x-0 or x||0 etc as needed.
				...
				vm.Mut has a different field for each type (though might use same field for Float32Array Uint8Array etc),
					including primitiveArray, dupFn, and Mut being a map of Mut to Mut (just the tostring of Mut as key so need to store the val of it somewhere else),
					and that tostring is from fn.n.id(). In the root Mut (of a call of this optimization) you can get a Mut in that using any fn as key.
					First key is just a literal fn, like x in x$. Second key uses (OO x y) aka x/y or (DGo (OO x y)) aka x/y$. Or DuGo uses $ instead of ^ syntax.
					Those, at most 2 hops deep, are in Treemap in this optimizatoin, such as (OO x y) is in the treemap but not (DGo (OO x y))
					cuz if u wany (DGo (OO x y)) u would first get the value of (OO x y) then whatever vv that returns get value of key (D vv) in map.
					Thats how vm.Mut are navigated in the Treemap state. The optimization is it wont use Treemap during a big block of such calculations,
					but copies from Treemap into vm.Mut's, does a bunch of calculations, then copies back to Treemap, then norms the Treemap.
				...
				While you can literally, if you have Muts b c d, do b[c]=d, it will be more efficient in many cases to generate the code using c.n.id() (lets say thats λhello),
				then the generated code might be "M[b].λhello = d;", where M is the js var name of that root Mut (which there can be 1 of per call of this optimizatoin,
				and they can call eachother indirectly by calling fn on fn to find/create fn and some such calls have an evaler (pushEvaler) which does this optimization (TODO),
				but the 2 root Muts cant see eachother or interact with eachother except thru fns, so its like theres only 1 root Mut at a time (though thats not literally true).
				.id() will give a string like this λ000701f5ffffffff5f4d61726b6c61723230336247656e65736973426c6f636b if its not a small string literal or float64 etc,
				so it can literally be any fn. Some of them have smaller ids. That 65 char id is the biggest they get in the 256 bit ids, though 512 bit ids will likely be
				available later for higher security uses.
				So in that case it might generate the code "M[b].λ000701f5ffffffff5f4d61726b6c61723230336247656e65736973426c6f636b = d;"
				...
				GFn is expensive (about 400k of them per second per computer) compared to GNum which can likely do around 100million or a billion per second in CPU
				and in some cases up to a trillion per second in GPU.
				...
				Its ambiguous what XType to use things as in some cases, including that a GNum could take 1-2 GNums as input
				OR 1 or both of those could be GFn and the fn it returns is used as a float64. To use aFn as float64 its aFn.n.d().
				That works for every possible fn, not just float64s. It will return 0 otherwise.
				So if the child of a GNum is another GNum, keep using + * / Math.sin (if floatroundoff options allow it) etc in generated code.
				If the child is a GFn (or a literal Fn?) then use .n.d().
				If the child is a Num (a literal float64) then put that literal into code directly.
				GNum<Num> uses string of Num.
				GNum<GNum> uses recursive string of the inner GNum.
				GNum<GFn> uses recursive string of the GFn with .n.d().
				...
				Include indentLevel in the code generator and default it to tabs. Also maybe a bit for is it starting at current position.
				*/
				
				langs:{
					//js:'while(Condition(State).n.z()) State = LoopBody(State);'
					//js:'while(Condition(State).n.z()) State = LoopBody(State);'
					//Is a Statement. while(GBit)Statement.
					/*js: (tr,fn,ty)=>{ //transpiler tr. lambda fn. ty type ('unknown' if not given)
						if(ty == 'gStatement' || ty == 'unknown'){
							let condition = fn.n.llr(1);
							let loopBody = fn.n.llr(0);
							//there should be no namespace/map param yet. waiting on 1 more param. thats how the transpiling is normally done, waiting on last param.

							//let map = fn.n.llr(0) //kinds of namespaces: Ns or LamNs or Treemap or EmptyTreemap.
							//return 'while('+tr.gBit(condition)+')'+tr.gStatement(loopBody);
							return 'while('+tr.transpile(condition,'gBit')+')'+tr.transpile(loopBody,'gStatement');
						}else{
							throw 'Dont know what to do with type='+ty;
						}
					}*/
				}
			}
		);
		//{langs:{js:'while(A(C).n.z()) C = C(B);'}});
		vm.addOp('DoWhile',null,false,3,'stream: (DoWhile loopBody condition stream) is like, if you wrote it in javascript: do{ stream = loopBody(stream); }while(condition(stream)); return stream; ',{ty:'ns', langs:{}});
		vm.addOp('For',null,false,5,'(For start condition afterLoopBody loopBody stream) is like, if you wrote it in javascript: for(stream = start(stream); condition(stream); stream = afterLoopBody(stream)) stream = loopBody(stream); return stream;',
			{ty:'ns', langs:{}});
		vm.addOp('Fo',null,false,4,'(Fo varName GetUpTo loopBody map), is like For except starts with varName being 0 and counts up to whatever (UpTo map) returns.',
			{ty:'ns', langs:{
				//2023-6-14-5pEST I saw this:
				//(Fo y ,5 (DE ,x ,5))
				//transpiled to: for(let λy=0; λy<0; λy++)λM.λ000181f5ffffffffbbec4ae6e31cce698bcd187416741fb53099b731ac90922b.d = 5;
				//FIXME if it was (PE ,y something...) then would have a problem between λM.λy vs just λy,
				//but its an important optimization, and the main reason I made ops.Ns for recursive namespaces,
				//to use loop vars etc on js stack instead of them all having to be in the root vm.Mut instance (λM in this case).

				//v is some object making a string of code, that this func is doing some part of. n is aLambda.n.
				//js:(v,n)=>`for(let A=0; A<B.n.d(); A++)C`}}
				js: (tr,fn,ty,optionalPrefix)=>{ //transpiler tr. lambda fn. ty type such as 'bit' or 'num' or maybe 'gStatement' or maybe 'unknown' if not given???s
					//(Fo varName GetUpTo loopBody map)
					let jsList = tr.fnToJsList(fn);
					//if(ty == 'statement'){ //replacing 'statement' with 'ns' cuz it means returns a namespace.
					if(ty == 'ns'){
						let varName = jsList[1]; //fn
						varName = ops.D(varName); //cuz "let varName_asKey = ops.D(varName); //Example: (D i) if (Fo i ,4 ...)" in rootEvaler. The D/$ is implied.
						let getUpTo = jsList[2]; //fn
						let loopBody = jsList[3]; //fn
						
						//will be undefined unless vm.isS2(fn) cuz that adds an extra param, a second namespace that the call of F is done inside,
						//including Fo's namespace param. Thats the kind of thing <> and {} are for.
						let namespaceOrUndefined = jsList[4];
						if(namespaceOrUndefined != undefined){
							throw 'TODO Fo in <>/{}, fn='+fn;
						}
						//let varNameStr = tr.idOf(varName); //FIXME can it ever be more dynamic than this?
						let varNameStr = tr.localVarNameOf(varName); //example: y$ in (Fo y ,4 [loop body goes here])
						//let upToNum = getUpTo.n.d();
						//FIXME hardcode the upToNum once its measured, so the loop is of constant size. Thats what the opcode says to do, TODO verify.
						try{
							tr.pushLocalVar(varNameStr);
							//return 'for(let '+varNameStr+'=0; '+varNameStr+'<'+upToNum+'; '+varNameStr+'++)'+tr.statement(loopBody);
							return 'for(let '+varNameStr+'=0; '+varNameStr+'<'+tr.num(getUpTo)+'; '+varNameStr+'++)'+tr.statement(loopBody);
						}finally{
							tr.popLocalVar(varNameStr);
						}
						//FIXME how does tr.statement(loopBody) read varNameStr as a var? Does it just use that same string in js? In Ns it goes in the inner namespace pushed/popped by Fo/While/etc.
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
					//return `for(let A=0; A<B.n.d(); A++)CTODOTODO55334`;
				},
			}}
		);
		//TODO {langs:{js:'',gpujs:'',glsl:'',java:'',python:}});
		vm.addOp('Foo',null,false,2,'[update: renaming this from Fo To Foo cuz its vararg and harder to optimize with multiple loopbodyparts]. A simple kind of loop that starts by computing its number of cycles (doesnt check it again after each call of loopBody). (Fo [varName_orShouldThisBeGetVarName getUpTo ...loopBodyParts...] map) -> forkEdits map to have varName_orShouldThisBeGetVarName->0 ->1 ->2 up to (getUpTo whatMapStartsAs)-1 then map becomes loopBody(map) where loopBody is _[...loopBodyParts...] aka chain them. See example code in lambda/AugmentedBalls.wikib that uses Fo... Fo[,y .height Fo[,x .width =[,pix +[.i .red] &[,255 +[.x *[.age ,35]]]] =[,pix +[.i .green] &[,255 +[.x *[.y .age]]]] =[,pix +[.i .blue] &[,255 *[,333 /[.x .y]]]] +=[,i ,4] ]]',{ty:'ns', langs:{}});

		//vm.addOp('Foch',null,false,2,'For each key and val in a ns (such as in a Treemap, Ns, LamNs, Lambda, Mutlambda, etc). (Foch ns listener) -> (listener keyA valA keyB valB keyC valC...). Its whatever order the keys are in the ns.',
		//	{ty:'ns', langs:{}});
		vm.addOp('Foch',null,false,2,'For each key and val in a ns (such as in a Treemap, Ns, LamNs, Lambda, Mutlambda, etc). (Foch listener ns) -> (listener keyA valA keyB valB keyC valC...). Its whatever order the keys are in the ns. TODO pushEvaler optimizations for (Foch listenerToGetKeys) and (Foch listenerToGetVals) and (Foch []) and maybe (Foch SomeFuncThatFillsATreemap) etc. Thats why listener is before ns.',
			{ty:'ns', langs:{}});

		vm.addOp('Recur',null,false,2,'This is how Lambda (and maybe Mutlambda? TODO) call themself recursively. (Recur 0 ns) -> this func with no params. (Recur 3 ns) -> this func with its first 3 params. Called from a funcbody thats called from a LamNs.',
			{ty:'ns', langs:{}});

		/* TODO another opcode that will be optimized by gpujs combineKernels, like this example from https://github.com/gpujs/gpu.js readme.
		It will be a call of ops.Lambda and funcBody will be simple combos of <> in <> recursively.
		The 'superkernel' in this example might look something like this:
		λ[a b c <λ[w x FuncBodyOfMul] <λ[y z FuncBodyOfAdd] a% b%> c%>]
		BUT need to add calls of ops.Fork. Those go in the 2 inner λs. Might put λ[a b c ignore <...>] so it waits on 1 more param so is easier to optimize using ops.Jit?
		Do these things in vm.evalers and ops.Jit.n.pushEvaler((vm,func,param)=>{...}).
		Should ops.Jit take just 1 param, call it on U, maybe using (Jit (LazyEval func param)). Or (Jit func param) directly?
		Where does the threadIndex go? Last param in some of the λs? Or am I missing some levels of λ inside λ?
		Gpujs optimization (and maybe GLSL directly, as in https://github.com/benrayfield/jsutils/blob/master/src/TinyGLSLGraphicsEditor.html )
		will likely use the same transpile('js') except evaler returns null (meaning lambdize should use evaler.prev instead) if it uses vm.Mut at all,
		and instead should use only local vars (tr.countLocalVars() and tr.localVarNameOf(varName) and tr.pushLocalVar(varName) and tr.popLocalVar(varName) etc,
		todo verify those are the real func names in Transpiler).

		const add = gpu.createKernel(function(a, b) {
			return a[this.thread.x] + b[this.thread.x];
		}).setOutput([20]);

		const multiply = gpu.createKernel(function(a, b) {
			return a[this.thread.x] * b[this.thread.x];
		}).setOutput([20]);

		const superKernel = gpu.combineKernels(add, multiply, function(a, b, c) {
			return multiply(add(a, b), c);
		});

		*/
		vm.addOp('Fork',null,false,5,'TODO change this to have a range fromInclusive toExclusive and just call the return values on eachother in pairs, so its simpler.... (Fork parallelLoopBody fromIncl toExcl) OLD: (Fork threads returnSizeEach parallelLoopBody) -> cbt/blob of threads*returnSizeEach bits, by calling (parallelLoopBody eachInt) to get returnSizeEach bits, where eachInt is from 0 to threads-1. returnSizeEach is normally a powOf2. This is where to hook in GPU.js andOr directly GLSL (see that 7kB TinyGLSLGraphicsEditor.html) optimizations or other GPU APIs, though it doesnt have to be done by GPU.',
			{ty:'cbt', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{ //transpiler tr. lambda fn. ty type such as 'bit' or 'num' or maybe 'gStatement' or maybe 'unknown' if not given???s
					//(Fo varName GetUpTo loopBody map)
					let jsList = tr.fnToJsList(fn);
				}
			}});
		


		vm.addOp('IfElse',null,false,4,'(ifElse condition ifTrue ifFalse state) is like, if you wrote it in javascript: ((condition(state) ? ifTrue : ifFalse)(state)).',{ty:'ns', langs:{}});
		vm.addOp('If',null,false,3,'(if condition ifTrue state) is like, if you wrote it in javascript: (condition(state) ? ifTrue(state) : state).',{ty:'ns', langs:{}});
		
		vm.addOp('Lt',null,false,2,'less than. (Lt 2 3) -> T, else F',{ty:'bit', langs:{}});
		/*TODO how to make <Lt a$ b$> which is (S (S Lt a$) b$)... How to hook that in? It doesnt wait on another param. All (Lt (a$ map) (b$ map)) are there already,
		but need to get the a$ and b$ params from the S-list, cuz cant get them from here cuz it would have already evaled if did.
		/*
		{langs:{js:(tr,fn,ty)=>{
			if(ty == 'gBit' || ty == 'unknown'){
				let a = fn.n.llr(1)
			}else{
				throw 'Dont know what to do with type='+ty;
			}
		}});
		*/


		vm.addOp('Lte',null,false,2,'less than or equal. (Lte 2 3) -> T, else F',{ty:'bit', langs:{}});
		vm.addOp('Gt',null,false,2,'greater than. (Gt 3 2) -> T, else F',{ty:'bit', langs:{}});
		vm.addOp('Gte',null,false,2,'greater than or equal. (Gte 3 2) -> T, else F',{ty:'bit', langs:{}});

		/*SolveRecog goes for lower compute resources (time, memory, etc). Anything that solves it is allowed. SolveFloat64 is for goal functions,
		scoring higher or lower (must be > 0 so can do hard constraints too). But it would have vagueness balancing between score and compute resources.
		On the other hand, SolveRecog could be called multiple times to emulate any specific case of SolveFloat64. since it does function call caching,
		that wouldnt even slow it down much.
		*/
		vm.addOp('SolveRecog',null,false,1,'(solveRecog x) -> any y where (x y) halts, preferring those that use less compute resources (stackTime stackMem etc) but THIS IS NONDETERMINISTIC so can only be used while stackIsAllowMutableWrapperLambdaAndSolve is true on stack. This is for bit what solveFloat64 is for double/float64. Default implementation will dovetail (even at deterministic level), but thats impractically slow for most things.',{ty:'key', langs:{}});
		vm.addOp('SolveFloat64',null,false,1,'(solveFloat64 x) -> any y where (x y)->float64 (todo is the float64 the raw 64 bits or is it wrapped in a typeval or a typevalDouble etc?), where the float64 is positive, and the higher the better. Requiring positive makes it able to emulate solveRecog. The higher the better, makes it a goal function. Like solveRecog, THIS IS NONDETERMINISTIC so can only be used while stackIsAllowMutableWrapperLambdaAndSolve is true on stack. Default implementation will dovetail (even at deterministic level), but thats impractically slow for most things.',{ty:'key', langs:{}});

		vm.addOp('Bize31',null,false,1,'FIXME this should return a double, not a cbt32. (bize31 x) -> cbt32, the low 31 bits of the index of the last (op) bit1, if its a cbt, else 0 if its not a cbt or does not contain any bit1. Bize means bitstring size (in bits). Max bitstring size is around 2^247-1 bits (todo find exact number... its in vm.maxBits TODO use that here and merge duplicate code in what generates these descriptions of bize* opcodes). 2**31 bits is 256mB. TODO return double? .... If its less than 0, then its 1 of the constants vm.BIZE_OF_NOT_A_CBT or vm.BIZE_OF_IS_ALL_ZEROS_CBT or TODO there might be 1 more constant added in case its all 0s and is bigger than fits in a 31 bit size number (see vm.maxBits).',{ty:'unknown', langs:{}});
		//vm.addOp('Bize53',null,false,1,'FIXME this should return a double, not a cbt64. TODO use 1 of those bits for if its all 0s? (bize53 x) -> cbt64, the low 53 (so it can be stored in a double) bits of bize. See bize32 comment for what is bize in general. Even though only 31 bits of bize are normally stored in ids, cbtHeight (in 8 bits of cur minus some constant) is completely stored so know how big of a cbt it is just from id256. TODO return double?',{ty:'unknown', langs:{}});
		//vm.addOp('Bize256',null,false,1,'FIXME this should return a (TypevalC int256), not a cbt256? (bize256 x) -> cbt256. See bize31 comment for what is bize in general. This always fits in a 256 bit literal that is its own id. Max cbt size is 2**'+vm.log2OfMaxBits+'='+vm.maxBits+' and max bitstring size is 1 bit less (which is a number that wont fit in double, but maxBits itself fits in double cuz its a small enuf powOf2). Even though only 31 bits of bize are normally stored in ids, cbtHeight (in 8 bits of cur minus some constant) is completely stored so know how big of a cbt it is just from id256. Bize256 always fits in a 256 bit id of literal 256 bits.',{ty:'unknown', langs:{}});

		//vm.addOp('LambdaParamsList',null,false,1,'From any number of curries (such as waiting on 3 more params in this: (Lambda FuncBody [w x y z] 100), or from the (LazyEval (Lambda... allParamsExceptLast) lastParam) if it has all its params which FuncBody is called on), gets the whole [w x y z], or gets [] if its not 1 of those datastructs. [...] is infcur syntax.',{langs:{}});
		//vm.addOp('LambdaParamsStream',null,false,1,'FIXME this should return a [(Mut...) (Mut...) (Mut...)]. FIXME see comments at top of this js file, about [...] of "[cbtNotNecessarilyDeduped doubleThatIsOrWillBeDeduped fnThatIsOrWillBeDeduped fnNotNecessarilyDeduped fnAsKeyThatIsOrWillBeDeduped]" as snapshot of Mut. Used with (Lambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (opLambda FuncBody [x y z] valX valY) valZ)). Returns [x valXLambda valXDoubleRaw valXDoubleArrayRaw y val val val z val val val], in blocks of those 4 things, which is used with Opmut/For/While/etc.',{langs:{}});
		/*vm.addOp('lambdaParams',null,false,1,'Same as LambdaParamsReverse except is the same order they occur in the Lambda call, and is less efficient cuz has to reverse it. This is normally implemented by calling LambdaParamsReverse then reversing that []/stream.',{langs:{}});
		vm.addOp('lambdaParamsReverse',null,false,1,'Used with (opLambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (opLambda FuncBody [x y z] valX valY) valZ)). (LambdaParamsReverse (LazyEval (opLambda FuncBody [x y z] valX valY) valZ)) -> [x valX y valY z valZ], but it can be a different number of params. Lambda takes up to (TODO find exact number) around 240-something or 250-something params.',{langs:{}});
		*/
		vm.addOp('Seq','_',false,2,'The _ in (_[a b c] x) means ((Seq [a b c]) x) which does (c (b (a x))), for any vararg in the [].',
			{ty:'ns', langs:{
				js: (tr,fn,ty,optionalPrefix)=>{
					if(ty == 'ns'){
						let list = fn.n.R();
						if(!list.n.isInfcur()){
							throw 'Param of _/Seq is not an Infcur/[] list. Its supposed to be like _[(DE ,red ,0) (DE ,green ,0)] etc but is fn='+fn;
						}
						let code = '{';
						for(let listItem of list.n.params()){
							code += tr.transpile(listItem,'ns');
						}
						code += '}';
						return code;
					}
					throwTrFnTy(tr,fn,ty,optionalPrefix);
				},
			}});
		vm.addOp('Has',null,false,2,'(Has key namespace) -> T or F',{ty:'bit', langs:{}});
		//vm.addOp('HasMoreThan7Params',null,false,1,'op is known at 7 params, so thats sometimes used as end of a list, especially in an infcur list.',{ty:'bit', langs:{}});

		vm.addOp('EmulateUsingInt32s',null,false,1,'There are some float32 and float64/double opcodes. These are well defined across multiple languages, at least what is most common for rounding behaviors etc (see IEEE754 but thats still a little vague), like a*b or a+b or 1/b or a/b or Math.sin(a) or Math.exp(a))... Use (EmulateUsingInt32s SomeOpcode) to get a definition of it (callable as a lambda the same way) that is always deterministic, made of int AND int, int XOR int, int shiftleft int, int multiply int, etc... the kinds of ops that are found in most hardware, though GPU.js compiling to GLSL shaders can only handle i think int16 or (nondeterministicly) float32, or it might be int24. EmulateUsingInt32s will be how to operate the strictest mode of wikibinator203, which must be completely deterministic so it syncs at the "cellular automata speed of light" in the real world. Even the int32 ops would be derived from S T Pair and other simple lambdas, but TODO should that be returned somewhere (could just derive it at runtime instead of making opcodes for it, since its mostly a math abstraction rarely used literally.',{ty:'key', langs:{}});
		//vm.addOp('EmulateUsingInt16s',null,false,1,'like EmulateUsingInt32s but using int16 ops, in case youre in a glsl optimization (see pushEvaler func) made by GPU.js that can only handle up to int16 or nondeterministicly float32.',{ty:'key', langs:{}});
		//vm.addOp('EmulateUsingInt8s',null,false,1,'like EmulateUsingInt32s and EmulateUsingInt16s but using byte ops, in case youre in a glsl optimization (see pushEvaler func) made by GPU.js that can only handle up to int16 or nondeterministicly float32, AND if you want those 16 (or it might go up to int24) bits to multiply or add 2 int8s in etc, or maybe that would work in int16s.',{ty:'key', langs:{}});

		//vm.addOp('Car',null,false,2,'(LisplikeEval -,Car ,-,Cons .x .y== TreemapAsState). Should the inner -...= be prefixed by , ? OLD... -Car -Cons .x .y= TreemapAsState= returns (.x TreemapAsState) aka (TreemapAsState x). FIXME im not sure which should be dynamic and which should be quoted, such as should it be -.car -.cons .x .y= TreemapAsState= ? Or -car -cons x y= TreemapAsState= ? And should it need a separate LisplikeEval func (derive it using lambda opcode?)? FIXME the TreemapAsState must be called by (...). All lisplike funcs will take exactly 2 params: their params as a -...= linkedlist AND TreemapAsState. Could do it as everything is dynamic, so put T/, prefix to quote. (LisplikeEval -,Car -,Cons .x .y== TreemapAsState)',{langs:{}});
		//vm.addOp('Cdr',null,false,2,'See Car.',{langs:{}});
		

		
		//vm.addOp('SomeOpcode3425345',null,false,2,'FIXME',{langs:{}});
		
		
		//removed, replaced by the Lambda op and MutLam op: vm.addOp('OpCommentedFuncOfOneParam',false,3,'(OpCommentedFuncOfOneParam commentXYZ FuncOfOneParam Param)->(FuncOfOneParam Param), and it can (but is not required, as with any syntax) be used like FuncOfOneParam##CommentXYZ, which means commentXYZ (notice lowercase c/C) is the first param aka \'commentXYZ\' AND happens to be the #LocalName (capital), as a way to display it, but if the comment differs from that then it would be displayed as expanded (...). #LocalNames might default to that name unless its already in use or if its too big a name. Its only for display either way, so doesnt affect ids. This will be optimized for, to ignore it when generating javascript or gpu.js code etc (neither of which are part of the Wikibinator203 spec) IF it can be proven that the (...) itself is not used and just the (FuncOfOneParam Param) is used. Example: {,& (>> 4) ,15}##VoxGreen4 means(OpCommentedFuncOfOneParam voxGreen4 {,& (>> 4) ,15})#VoxGreen4. Or, FIXME, maybe swap the first 2 params? UPDATE: that syntax puts the #Name on the left instead of the right, but no syntax is part of the spec, and all possible syntaxes can be made from the universal lambda.',{langs:{}});
		//(name,prefix,isStrange,curriesLeft,description)
		//vm.addOp('AvlTree',null,false,?,'(AvlTree KeyComparator)',{langs:{}});
		//TODO just use [ [a b c d e] f [g h] i] (Infcur is []) instead? Or maybe a max branching factor of 2 (or some small constant) is better? vm.addOp('Sortree',null,false,?,'A sortable tree, that can be ordered a variety of ways. (Sortree Comparator ) (((A sortable tree, though it doesnt (like ax could) enforce being sorted. Ax could enforce being sorted, but ax constraints may take infinite time and memory to disprove a false claim, while taking finite time to prove a true claim.)))',{langs:{}});
		//vm.addOp('DDToD',null,false,?,'any (double,double)->double op, such as * + / pow etc.',{langs:{}});
		//vm.addOp('Cbt128To64',null,false,?,'(Cbt128To64 Func ) . Any 128 bits to 64 bits, such as (double,double)->double op or (double,long)->long etc, such as * + / pow etc. It takes an extra param that defines the logic, and this is more of a casting wrapper, that truncates its inputs and outputs to that, to make proofs easier, though nonhalting or allocation of memory might be a problem, in which case it might just call that func directly and wrap it literally, if it halts at all. Its meant to be a place to put an Evaler aka fn().pushEvaler((vm,func,param)->ret) or maybe another kind of evaler-like-thing thats specialized in (double,double)->double etc.',{langs:{}});
		
		
		/* todo these ops too...
		TODO...
		bit0
		bit1
		getSalt128 ignore
		withSalt128 cbt128 func param
		withSalt128TransformedBy funcOf128BitsTo128Bits func param
		//no, just use opmut* instead of: mutableSLike
		ifElse condition iftrue iffalse state //if (condition state)->t then returns (iftrue state) else returns (iffalse state). todo check o8 for is it t, vs do it like pair x y t vs pair x y f? just check its opcode.
		todo fill in the others.
		for //...
		while condition state
		dowhile
		varname //like typeval but its a utf8 or is it utf16? use this (or just typeval names) in ifElse for while dowhile etc.
		[]= nameOb nameKey nameVal //{} in Mut
		[] nameOb nameKey
		<>= nameOb nameKey nameVal //Float64Array in Mut
		<> nameOb nameKey
		copy<>ToCbt ob key
		copyCbtTo<>
		new<>OfNDoubles
		//new<>OfNFloats
		//new<>OfNInts
		//new<>OfNUbytes
		isJsDoubleDuringMut getVarName
		isJsStringDuringMut
		funcallDuringMut func param //similar to (+ x y) it returns something instead of being a []= or <>=
			//funcallDuringMut getVarNameLvalue getVarNameFunc getVarNameParam
		Math.sin //allow nondeterministic roundoff. but in pure mode you cant use this.
		Math.tanh
		Math.sqrt
		Math.imul
		...bunch more Math.something funcs...
		spendTimeMemFuncParam maxstackTime maxstackMem func param
		~
		^
		!
		||
		&&
		*
		-
		/
		%
		?:
		!!!!!!!!!!!!! no == for fns cuz of nondeterministic partialDedup?
		TODO ^= |= ~= etc?
		//fixme is this the same as Math.pow: ** aka pow
		Math.abs
		Math.acos
		Math.acosh
		Math.asin
		Math.asinh
		Math.atan
		Math.atan2
		Math.atanh
		Math.cbrt
		Math.ceil
		Math.clz32
		Math.cos
		Math.cosh
		Math.exp
		Math.expm1
		Math.floor
		Math.fround
		Math.hypot
		Math.imul
		Math.log
		Math.log1p
		Math.log2
		Math.log10
		Math.max
		Math.min
		Math.pow
		Math.round
		Math.sign
		Math.sin
		Math.sinh
		Math.sqrt
		Math.tan
		Math.tanh
		Math.trunc
		//sigmoid //todo implement using tanh andOr exp
		//square
		//cube
		isNaN
		isSubnormalNumber
		isFiniteNumber
		isNormedDoubleBits
		asyncStartGpuFloat32CompileEarly
		isGpuCompiledFor
		asyncBatchDownloadMutableWrapperLambdaEachWithBellcurveOfTimeForWhenAndHowMuchWantIt
		isMutableWrapperLambdaCallDownloadedOrKnownFor
		hyperquasicrystal (it cant get access to anything outside this opcode. it sees this opcode as its leaf, and infloops if called on anything not made entirely of it)
		solveRecog x //returns any y where (x y)->u.
		solveFloat64 x //returns any y where (x y)->float64 where the float64 is positive, and the higher the better.
		getdoublefromcbtaligned64
		getint...
		getbyte..
		getshort...
		getchar...
		concat2cbt
		bize31 //bitstrings are limited to 2^31-1 bits so bize fits in int. you can still use a list or tree of bitstrings to make things as big as you want.
		doublesLen //same as floor(bize31/64)
		floatsOrIntsLen //same as floor(bize31/32)
		shortsOrCharsLen //same as floor(bize31/16)
		bytesLen //same as floor(bize31/8)
		containsbit1
		normfloat64
		normfloat32
		optimizationhint hint func param ???
		  or just gpujslikecall
		//Math.random //only works in opmut or with a different salt128 each time. whatever Math.random() does, or GPU.js's random func does. not high quality random. if you want that, derive a securehash and seed it with things like this.
		//time //returns double of seconds since Y1970 utc time. only works in opmut or with a different salt128 each time.
		...reservedForFutureOpcodes... //up to 128.
		make sure it fits in 128 opcodes, and todo leave some space for future opcodes in forks of the opensource, but until they're added just infloop if those reservedForFutureOpcodes are called.
		*/
		
		console.log('Theres '+(256-vm.opInfo.length)+' reserved opcodes for future expansion at end (excluding any that might be manually written with the word Reserved in their opcode name) in this Wikibinator203 VM. All Wikibinator203 VMs must have the same set of opcodes, else call it something other than Wikibinator203, so those are expected to be filled in while experimenting with the prototype VM to find what works and is intuitive for Humans.',{langs:{}});
		
		while(vm.opInfo.length < 256){
			vm.addOp('Op'+vm.opInfo.length+'ReservedForFutureExpansionAndInfloopsForNow', null, false, 1, 'Given 1 param, evals to (S I I (S I I)) aka the simplest infinite loop, so later if its replaced by another op (is reserved for future expansion) then the old and new code will never have 2 different return values for the same lambda call (except if on the stack the 4 kinds of clean/dirty (stackIsAllowstackTimestackMem stackIsAllowNondetRoundoff stackIsAllowMutableWrapperLambdaAndSolve stackIsAllowAx) allow nondeterminism which if theyre all clean then its completely deterministic and theres never more than 1 unique return value for the same lambda call done again.',{ty:'unknown', langs:{}});
		}

		vm.countReservedOps = function(){
			return this.opInfo.map(oi=>oi.name).filter(name=>name.includes('eserved')).length;
		};
		
		//In abstract math, evals to (S I I (S I I)) aka the simplest infinite loop. Infinite loops etc will be caught by the nearest spend call
		//(limiting time and memory higher on stack than such call, recursively can tighten), so actually just throws instantly.
		//TODO in abstract math there should be an "outer spend call" just below the stack, to catch anything when theres not any spend call??
		vm.infloop = ()=>{ throw vm.gasErr; }
		
		//gets a js [] list of all params after the 7th param, if any. Normally used with Infcur/[] list.
		//Its 7 cuz opcode becomes known at 7th param of U.
		vm.listToJs = list=>vm.lastNParamsOf(list.cur()-7,list);
		
		//get a js [] of the last n params in a given fn. Since (L x (R x)) equals x, forall x,
		//this will loop around and around even if it goes past U. (L U)->(F U). (R U)->U.
		vm.lastNParamsOf = (n,fn)=>{
			let ret = [];
			for(let i=0; i<n; i++){
				ret.push(fn.n.R());
				fn = fn.n.L();
			}
			ret.reverse();
			return ret;
		};
		
		//throw 'vm.pair = TODO; //similar to vm.t and vm.f and few other ops';
		
		//takes a mut where mut.m.func is (... opmut treeOfJavascriptlikeCode) so can call itself recursively,
		//and mut.m.param is its lambda param. Using that, it can do things like loop over pixels in an array, use js {} maps, etc.
		//It must return a lambda, but in the middle steps it has mutable optimizations that can be compiled to javascript for example,
		//but since the universal lambda doesnt depend on anything outside itself, it could be compiled to any turingComplete system.
		vm.opmut = mut=>{
			throw 'TODO compile, making sure to limit stackTime stackMem etc.';
		};
		
		
		
		
		//immutable. but stackTime stackMem etc are mutable and are stored somewhere else
		//(maybe as fields in vm? UPDATE: in vm.stackTime, vm.stackMem, vm.stackStuff is instance of vm.StackStuff, etc).
		//mask is the low 4 (UPDATE 2023-6, theres 8 vm.mask_* bits in headerA)
		//bits of header int, the cleanvsdirty etc stuff, such as does it allow nondeterministic roundoff.
		vm.StackStuff = function(mask, saltA, saltB, saltC, saltD){
			this.mask = mask;
			this.saltA = saltA;
			this.saltB = saltB;
			this.saltC = saltC;
			this.saltD = saltD;
		};
		//FIXME theres 8 vm.mask_ bits,but only 5 things here. also some might need to be renamed.
		vm.StackStuff.prototype.stackIsAllowNondetRoundoff = function(){
			return this.mask&vm.mask_stackIsAllowNondetRoundoff;
		};
		vm.StackStuff.prototype.stackAllowReadLocalIds = function(){
			return this.mask&vm.mask_stackAllowReadLocalIds;
		};
		vm.StackStuff.prototype.stackIsAllowMutableWrapperLambdaAndSolve = function(){
			return this.mask&vm.mask_stackIsAllowMutableWrapperLambdaAndSolve;
		};
		vm.StackStuff.prototype.stackIsAllowAx = function(){
			return this.mask&vm.mask_stackIsAllowAx;
		};
		vm.StackStuff.prototype.stackIsAllowstackTimestackMem = function(){
			return this.mask&vm.mask_stackIsAllowstackTimestackMem;
		};
		//FIXME TODO add vm.stackStuff.isAllowHypercompute (changed to vm.mask_allowOther). and TODO theres 8 total mask bits.

		
		//pure deterministic, no ax (which is deterministic but can have infinite cost to verify), and 128 0s for salt.
		//Use this as immutable.
		//When forkEditing, salt can change to anything by unitary transform or replacing it with its hash,
		//but the 4 iscleanvsdirty bits can only change from 1 to 0, similar to stackTime and stackMem can only decrease (or stay same) but not increase,
		//until the first call returns, then can start with any StackStuff you and stackTime stackMem etc you want.
		vm.defaultStackStuff = new vm.StackStuff(0,0,0,0,0); //FIXME start as what? FIXMe reset this before each next call while stack is empty.
		
		//FIXME these amounts to refill it to should vary, depending on stats and amount of compute resources of caller,
		//but its just a small amount of compute resources to get started with,
		//or maybe its too much for small tests. Will need to play with these numbers to find what works.
		vm.refill = function(){
			//vm.stack* (stackTime stackMem stackStuff) are "top of the stack", used during calling lambda on lambda to find/create lambda.
			vm.stackTime = 10000000; //fill these back up before starting another call at bottom of stack, to avoid running out, but not until the stack becomes empty.
			vm.stackMem = 10000000;
			
			//In theory this prevents js stack from running out, by failing earlier, in a way opSpend can try/else.
			//This counts down per fn call (in a js function made by lambdize that does NODE.getEvaler()) deeper,
			//throws vm.gasErr if it runs out, then is incremented back to where it was.
			//
			//FIXME this is a way to prevent stackoverflowerrors in the outer system the VM is built in, such as on javascript python java or c++ stack, BUT FIXME what units to measure it in, stackframes? no, cuz they are variable size. ints or bytes or sizeof(pointer)? seems better but might be hard to count those. Figure it out.
			vm.stackDeep = 100;
			
			//QPUs, like any analog hardware, would need to come in as snapshot in param or using mutableWrapperLambda: vm.stackQpuCompile = 1000000; //TODO?
			vm.stackGpuCompile = 1000000; //TODO. includes GPU, TPU, or any kind of parallel chip or stream processor that can do digital logic.
			vm.stackCpuCompile = 1000000; //TODO
			vm.stackNetworkUpload = 1000000; //TODO
			vm.stackNetworkDownload = 1000000; //TODO
			vm.stackDriveRead = 1000000; //TODO. this may be window.localStorage or in other VMs they might support harddrive/SSD but only for storage of nodes and blobs not executing.
			vm.stackDriveWrite = 1000000; //TODO. see stackDriveRead.
			vm.stackStuff = vm.defaultStackStuff;
		};
		
		vm.refill();
		
		
		/*
		NEW:
		//primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>. primaryKey of a dedupedFn is 64 bits. primaryKey of a non-deduped-fn is 128 bits.
		vm.Mut = function(whichOpmutSpace,dedupedFn){
			this.whichOpmutSpace = whichOpmutSpace; //primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>
			this.dedupedFn = dedupedFn; //primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>
			//this.hashInt = ...
			//FIXME have 2 dedupedFns here, one you're allowed to see and one you're not, to allow for isolating musical instrument parts etc?
			this.valMut = todo same whichOpmutSpace as this, of u; //same as this.valFn implies, TODO merge this disorganized code.
			//this.valFn = u; //FIXME TODO. This merges Mut.j with Mut.m as in findOrCreateMut(this.whichOpmutSpace,anyDedupedFn).valFn or .valDoubles
			this.valDouble = 0;
			this.valDoubles = emptyDoubleArray; //FIXME TODO
		};
		----------------
		OLD:
		//linkedlist of vm.OpmutState. vm.stackMut is the top OpmutState. vm.stackMut.prev.prev.prev... is the linkedlist.
		//The prev ptr is only for what happens when pop an OpmutState, when a call of opmut* (some opmut-related op) ends, that an opmut* had called an opmut* to create a new OpmutState.
		//Its not a recursive namespace.
		vm.stackMut = null;
		//vm.stackMutPtr = 0 or should this go in vm.stackMut.ptr or in compiled code with for loops if/else etc that uses vm.stackMutPtr.ints[ptr]?
		//The purpose of stackMutPtr is like a "this" or a "namespace" that opmut code runs relative to. If its for(let i=0; i<abc; i++){...} then 'i' and 'j' are
		//(another ptr is this int from cp) vm.stackMut.cp(vm.stackMutPtr,someNodeWhoseBitsAreUtf8OfIOrJChars), but in some faster way than that, caching things along the way, etc.
		//OpmutState/stackMut doesnt have the ability to list what fields have been set (such as cp(ptr,intOf_'i') or cp(ptr,intOf_'j'). It can read or write it if you know the key.
		//If you want to remember keys, you can make a linkedlist using cp(cp(somePtrRepresentingLinkedListType,leftPtr),rightPtr)->parentPtr or something like that.
		//All such int ptrs are interchangible with calling infcur on itself. The opmut leaf key (int 0) is infcur. (infcur infcur) is cp(0,0), and so on,
		//so state of an opmut call can be copied from and to lambdas, as its a map of (various combos of infcur) to some few things including int val, 2 double vals, Float64Array val, fn val.
		*/
		//
		vm.stack_whichOpmutSpace = 0; //TODO increment this when evaler made by transpiler is called that does vm.Mut optimization.
		//
		//as in "primaryKey is <int_or_maybe_double whichOpmutSpace, fn dedupedFn>". Up to a few thousand of these might exist at once
		//in one computer, but normally 1 or just a few at a time. Multiple exist when opmut calls opmut. After all that returns, all of them become garbcolable.
		
		vm.saveLoadStack = [];
		

		vm.inMutlambdaLamnsIsInner = true;
		
		
		/*
		//save vm.stackTime, vm.stackStuff, etc, to be loaded after do something such as a call of ax.
		vm.saveStackTop = function(){
			this.saveLoadStack.push(
				this.stackTime,
				this.stackMem,
				this.stackGpuCompile,
				this.stackCpuCompile,
				this.stackNetworkUpload,
				this.stackNetworkDownload,
				this.stackDriveRead,
				this.stackDriveWrite,
				this.stackStuff
			);
		};
		
		//see vm.saveStackTop. Call this in a finally after saveStackTop in the try.
		vm.loadStackTop = function(){
			//FIXME verify this shouldnt be in reverse order
			this.stackStuff = this.saveLoadStack.pop();
			this.stackDriveWrite = this.saveLoadStack.pop();
			this.stackDriveRead = this.saveLoadStack.pop();
			this.stackNetworkDownload = this.saveLoadStack.pop();
			this.stackNetworkUpload = this.saveLoadStack.pop();
			this.stackCpuCompile = this.saveLoadStack.pop();
			this.stackGpuCompile = this.saveLoadStack.pop();
			this.stackMem = this.saveLoadStack.pop();
			this.stackTime = this.saveLoadStack.pop();
		};*/
		
		//gets the vm.opInfo[...] of this node's opcode. Example: If this node is a call of vm.ops.S, then gets the opInfo for S.
		vm.Node.prototype.opInfo = function(){
			return vm.opInfo[this.o8()];
		};

		/*FIXME redesign this to be compatible with (Foch keyValListener ns).
		//
		//
		//this.lam is (Treemap ...). This happens in the call (Foch keyValListener this.lam_suchAs_(Treemap...))
		//
		//OLD...
		//WRONG: this.lam is (Foch (Treemap ...)) for example. Param (keyValListener) would go in (Foch (Treemap ...)) keyValListener).
		// 
		//OLD todo rewrite?... Or is this still correct? moved params around?...
		//foreach pair of key and val, but as a 2 param func instead of 1 param in ops.Foch, and takes a js func as param thats called as listener.
		//Calls keyValListener(key,val) where key and val are fns. Returns forkEdited keyValListener.
		vm.Node.prototype.foch = function(keyValListener){
			//Example ns: (Treemap ...) or [keyA valA keyB valB keyC valB] or or (λ [a b c I#(F U)] valA valB)
			//or (LamNs (λ [a b c I#(F U)] valA valB) valC) for example.
			let inputNs = this.lam;
			if(vm.isFullLamNs(inputNs)){
				let probablyALambdaOrMutlambda = inputNs.n.llr(1); //get (λ [a b c I#(F U)] valA valB) from (LamNs (λ [a b c I#(F U)] valA valB) valC)
				if(probablyALambdaOrMutlambda.n.o8() == vm.o8OfLambda){
					keyValListener = probablyALambdaOrMutlambda.n.foch(keyValListener);
					//FIXME what if probablyALambdaOrMutlambda doesnt have enuf params so some get skipped? isFullLamNs should check for that?
					//Only the last param should be skipped in that, if it has enuf params, cuz the last param is curred as the second param of LamNs,
					//cuz if put that last param in the λ/Lambda then it would eval again, leading to infinite loop with LamNs again.
					//Λ/MutLambda takes 1 more param than that, but other than that has same params as λ/Lambda. The extra param is a ns/namespace.
					//Thats why Λ/MutLambda is handled in an else.
					let paramNames = probablyALambdaOrMutlambda.n.paramNamesWithoutFuncBody(); //FIXME this returns U for some types of ns, and for some non-ns. What should it return?
					let lastParamName = paramNames.n.R(); //R of U is U. so if not found, thats ok, or what?
					let lastParamVal = lamNs.n.R();
					keyValListener = keyValListener(lastParam)(lastParamVal);
				}else{
					throw 'TODO foch on LamNs whose first param is a '+inputNs.n.opName();
				}
			}else if(this.isNonemptyTree(inputNs)){
				throw 'TODO';
			}else if(vm.isFullNs(inputNs)){
				let innerNs = inputNs.n.llr(1);
				let outerNs = inputNs.n.R();
				keyValListener = keyValListener.n.foch(innerNs);

				throw 'TODO';
			}else if(inputNs.n.o8() == vm.o8OfLambda){
				throw 'TODO';
			}else if(inputNs.n.o8() == vm.o8OfMutlambda){
				throw 'TODO';
			}
			//FIXME do all the ns types
			/*case vm.o8OfTreemap:{
			throw 'TODO';
			}break;case vm.o8OfL:{
			}break;default: //includes EmptyTreemap and anything thats not a ns
			*
			return keyValListener;
		};*/
		
		/* vm.foch(function(key,val){
			listener = listener(key)(val);
		}, ns);
		ret = listener;
		*/

		//calls keyValListener(key,val) for all key/val pairs recursively
		//in inputNs (such as a Ns, LamNs, Lambda, MutLambda, Treemap, [keyA valA keyB valB...] etc), then returns undefined.
		vm.foch = function(keyValListener, inputNs){
			//Example ns: (Treemap ...) or [keyA valA keyB valB keyC valB] or or (λ [a b c I#(F U)] valA valB)
			//or (LamNs (λ [a b c I#(F U)] valA valB) valC) for example.
			if(vm.isFullLamNs(inputNs)){
				let probablyALambdaOrMutlambda = inputNs.n.llr(1); //get (λ [a b c I#(F U)] valA valB) from (LamNs (λ [a b c I#(F U)] valA valB) valC)
				//if(probablyALambdaOrMutlambda.n.o8() == vm.o8OfLambda){
					if(probablyALambdaOrMutlambda.n.o8() == vm.o8OfLambdo){ //vm.o8OfLambda has 6 params. 7th is params list/[]. vm.o8OfLambdo is the 7 param form.
					vm.foch(keyValListener, probablyALambdaOrMutlambda); //call keyValListener(key,val) for each key and val

					//FIXME what if probablyALambdaOrMutlambda doesnt have enuf params so some get skipped? isFullLamNs should check for that?
					//Only the last param should be skipped in that, if it has enuf params, cuz the last param is curred as the second param of LamNs,
					//cuz if put that last param in the λ/Lambda then it would eval again, leading to infinite loop with LamNs again.
					//Λ/MutLambda takes 1 more param than that, but other than that has same params as λ/Lambda. The extra param is a ns/namespace.
					//Thats why Λ/MutLambda is handled in an else.
					let paramNames = probablyALambdaOrMutlambda.n.paramNamesWithoutFuncBody(); //FIXME this returns U for some types of ns, and for some non-ns. What should it return?
					let lastParamNameWithoutP = paramNames.n.R(); //R of U is U. so if not found, thats ok, or what? Without P cuz its written x but param name is x% aka (P x). if x.
					let lastParamVal = inputNs.n.R(); //second param of LamNs
					//keyValListener = keyValListener(lastParam)(lastParamVal);
					keyValListener(ops.P(lastParamNameWithoutP), lastParamVal);
				}else{
					throw 'TODO foch on LamNs whose first param is a '+inputNs.n.opName();
				}
			}else if(inputNs.n.isNonemptyTree()){
				//ops.Treemap has at least 1 key/val. leftTree and rightTree may be an ops.EmptyTreemap
				//or another ops.Tree (or technically can be anything but ops.TreemapVerify can (TODO) detect that)
				let leftTree = inputNs.n.leftTree();
				let key = inputNs.n.treeKey();
				let val = inputNs.n.treeVal();
				let rightTree = inputNs.n.rightTree();
				vm.foch(keyValListener, leftTree);
				keyValListener(key,val);
				vm.foch(keyValListener, rightTree);
			}else if(vm.isFullNs(inputNs)){
				let innerNs = inputNs.n.llr(1);
				let outerNs = inputNs.n.R();
				//keyValListener = keyValListener.n.foch(innerNs);
				vm.foch(keyValListener, outerNs);
				vm.foch(keyValListener, innerNs); //so it will overwrite any duplicates from outerNs
			//}else if(inputNs.n.o8() == vm.o8OfLambda){
			//}else if(inputNs.n.o8() == vm.o8OfMutlambda){
			}else if(vm.isLambdoOrMutlambdo(inputNs)){
				//last param of ops.Mutlambda is a ns, 1 more param than ops.Lambda for same .params() list.

				let paramNamesWithoutP = inputNs.n.paramNamesWithoutFuncBody().n.params(); //.params() gets js list, whatevers after 7th param of U.
				//paramNamesWithoutP are not the whole name. Example: (λ[a b c U] valA valB) has keys a% b% and vals valA valB. not a b. a% b%. aka (P a) and (P b).
				let paramVals = inputNs.n.params(); //all params after 7th param of U. op is known at 7 params.


				for(let i=0; i<paramVals.length; i++){
					//paramVals.length < paramNames.length, cuz not all params have been curried yet.
					//If they were, the ops.Lambda would have evaled to return something else or never halt.
					keyValListener(ops.P(paramNamesWithoutP[i]),paramVals[i]);
				}
			}
			//FIXME do all the ns types
			/*case vm.o8OfTreemap:{
			throw 'TODO';
			}break;case vm.o8OfL:{
			}break;default: //includes EmptyTreemap and anything thats not a ns
			*
			return keyValListener;
			throw 'TODO';
			*/
			return undefined;
		};
		
		//returns a (vm.Transpiler,fn,ty)=>string func, or undefined if there isnt one.
		//Doesnt check for being inside a <...> or {...} (vm.isS2). Thats done in Transpiler.transpile.
		vm.Node.prototype.getTranspileFuncTheSimpleDirectWay = function(lang){
			return this.opInfo().compileMap.langs[lang];
		};
			

		//is Infcur with 0 or more params.
		vm.Node.prototype.isInfcur = function(){
			return this.o8()===vm.o8OfInfcur;
		};
		
		//does n L's then an R, to get the nth last param, from however many params it has. This always works since even if it doesnt have that many params,
		//it wraps around as U being (F U) called on U. 0 gives the last param. 1 gives second last. and so on.
		vm.Node.prototype.llr = function(n){
			if(n == 0) return this.R();
			return this.L().n.llr(n-1);
		};
		
		/* very slow interpreted mode. add optimizations, as a linked list of evalers of whatever lambda,
		as recursive (of whatever evaler is in relevant fns/lambdas called on eachother) evalers,
		whose .prev is this or eachother leading to this, that when !evaler.on then evaler.prev is used instead.
		U().evaler is this rootEvaler. All other evalers are hooked in by aLambda().pushEvaler((vm,l,r)=>{...}), which sets its evaler.prev to aLambda().evaler before setting aLambda().evaler to the new one,
		and if the evaler doesnt have an evaler.on field, creates it as true.
		*/
		vm.rootEvaler = (vm,l,r)=>{
			//"use strict" is good, but not strict enough since some implementations of Math.sqrt, Math.pow, Math.sin, etc might differ
			//in the low few bits, and for that it only calls Math.sqrt (for example) if vm.stackIsAllowNondetRoundoff. Its counted as nonstrict mode in wikibinator203,
			//which it has 2^4=16 (update: 5^ see vm.mask_*) (UPDATE: theres 8 mask bits 2023-6-17)
			//kinds of strict vs nonstrict that can be tightened in any of 4 ways on stack so stays tight higher on stack until pop back from there.
			//The strictest is pure determinism and will compute the exact same bits in every wikibinator203 VM. All halted lambdas are that strictest way,
			//and only during evaling 2 strictest lambdas to return at most 1 strictest lambda, between that you can use any of the 16 kinds of strict vs loose, and recursively tighten,
			//similar to vm.stackTime and vm.gasFastMem can be tightened to have less compute cycles and memory available higher on stack, but cant be increased after a call starts.
			"use strict";
			
			//TODO rename l to myL and r to myR, cuz l and r are ops.
			
			//TODO vm.wrapInTypeval (and just rename that to wrap) of l and r, such as doubles or strings.
			
			if(3<=vm.loglev)console.log('vm.rootEvaler l='+l+' r='+r);
			
			//if(3<=vm.loglev)console.log('opNameToO8='+JSON.stringify(vm.opNameToO8));
			vm.prepay(1,0);

			//If param of the lambda is a string, for example, this converts it to utf8 bits in a cbt (which is a lambda), wrapped in a typeval saying its a string.
			l = vm.wrap(l); //If is already a fn (vm.isWikibinator203Lambda and its type is 'function'), leaves it as it is
			r = vm.wrap(r);
			
			let cache = vm.funcallCache(l,r);
			if(cache.ret) return cache.ret;
			
			let stackMask = vm.stackStuff.mask;
			if(l.n.curriesLeft() > 1 || l.n.o8() < 128){ //if 64 <= o8 < 128 then its getting its 7th param, and op always becomes known at 7th param, so just cp it.
				//TODO optimize by getting l().header (an int) and getting curriesLeft and o8 from it, faster than calling those separately.
			
				//(l.o8() < 64) implies (l.curriesLeft) but it could also be cuz theres more params such as s takes 3 params so the first 2 curries are halted, and 1 op (lambda) has vararg.
				return vm.cp(l,r);
			}else{
				//if(l().o8() < 128){ //TODO remove this
				//	throw 'shouldnt be here cuz should have just done cp';
				//}
				//last 6 params
				//FIXME use .L() and .R() instead of .l and .r, cuz those allocate if not found, but if its not a blob then those wont be null, and already checked for blob above?
				let a = l.n.l.n.l.n.l.n.l.n.r; //FIXME can it ever have these l and r paths be null cuz of lazyeval of wrapping Uint8Array in .blob? Does blob take a different path?
				let b = l.n.l.n.l.n.l.n.r;
				let c = l.n.l.n.l.n.r;
				let x = l.n.l.n.r; //TODO use L and R opcodes as lambdas and dont funcall cache that cuz it returns so fast the heap memory costs more
				let y = l.n.r;
				let z = r;
				let ret = null;
				let o = vm.opNameToO8;
				let o8 = l().o8();
				switch(o8){
					case o.StackIsAllowstackTimestackMem: //!isClean. allow stackMem and stackTime etc more than 1 level deep (clean lambdas cant see it, but can still run out of it, throws to just past the cleans)
						ret = vm.bit(stackMask & vm.mask_stackIsAllowstackTimestackMem);
					break;case o.StackIsAllowNondetRoundoff:
						ret = vm.bit(stackMask & vm.mask_stackIsAllowNondetRoundoff);
					break;case o.StackIsAllowMutableWrapperLambdaAndSolve:
						ret = vm.bit(stackMask & vm.mask_stackIsAllowMutableWrapperLambdaAndSolve);
					break;case o.StackIsAllowAx:
						ret = vm.bit(stackMask & vm.mask_stackIsAllowAx);
					break;case o.StackAllowReadLocalIds:
						ret = vm.bit(stackMask & vm.mask_stackAllowReadLocalIds);
						
						/*TODO use this to, with StackAllowReadLocalIds true, make a fast evallable textarea of wikibinator203 code,
							in a tree of voxel32s to make windows and subwindows recursively, and in some of those
							there will be localids (128 bits in this case, might allow different sizes in other VMs?)
							read by the user level code to choose what text to paint (as cbt of int32 voxels relative to a voxel y x)
								anywhere on screen, so use wikibinator203 code make a code editor of wikibinator203 code,
								using the optimization of can get localids instead of having to hash,
								so trading determinism for speed. Both ways will be supported by just swapping out an idMaker func.
						*/
							
						
					//StackAllowReadLocalIds used 1 more reserved index.
					//OLD: ignoring 2 reserved bits in mask vm.mask_reservedForFutureExpansion4 and vm.mask_reservedForFutureExpansion5
					break;case o.Bize31:
						ret = vm.wrapDouble(z.n.Bize());
					break;case o.Bit0:case o.Bit1:
						ret = vm.ops.Infcur(l)(r); //cbt that exceeds max size
						//vm.infloop(); //cbt that exceeds max size
					break;case o.IsCbt:
						ret = vm.bit(z().isCbt());
					break;case o.ContainsAxConstraint:
						ret = vm.bit(z().containsAxConstraint());
					//break;case o.Dplusraw:
						ret = vm.wrapRaw(y().d()+z().d());
					//break;
					
					/*break;case o.stackIsAllowImportEvilIds:
						THIS WAS REMOVED CUZ IT SHOULD BE DONE ONLY IN vm.import(idMaker,id) func, which makes formalVerifying it easier.
						
						//A lambda cant check if a lambda is good or evil (evilBit) cuz its always both, just an interpretation of an observer, only affects ids,
						//and each lambda has (at least, can make more kinds) 2 ids, one where evilBit is on and one where its off.
						//What makes the good namespace good (or so people might define what is good) is to call it good while sharing it is to certify that you are copying it out of the "antivirus quarantine"/uncensoredArea and that you take responsibility for doing so,
						//such as if you made all the parts of it yourself and know its safe for other uses, or if you somehow know
						//its parts and the combo of them are safe.
						//When in doubt, just say its evil (evilBit=true).
						ret = vm.bit(vm.stackIsAllowImportEvilIds); FIXME get these 5 "vm.stackIsAllow" bits from StackStuff.
					*/
					
					/*break; case TODO a few opmut* ops that create/push, use, and call recursively, and cp(int,int)->int, and read and write doubleA doubleB intVal fn and Float64Array[up to 1 array per node] in OpmutState
						TODO
					*/
					/*break;case o.OpmutOuter:
						//FIXME todo remove opmut* and have it automatically start whenever the optimization would likely make things faster?
						//TODO merge opmutOuter and opmutInner?
						throw 'FIXME remove ops.OpmutOuter. Use ops.Jit and ops.Fork instead.';
						let mut = new Mut(0);
						mut.m.func = l; //(... opmut treeOfJavascriptlikeCode). it can use this to call itself recursively.
						mut.m.param = r; //param as in (... opmut treeOfJavascriptlikeCode param)
						ret = vm.opmut(m);
					break;case o.OpmutInner:
						//FIXME todo remove opmut* and have it automatically start whenever the optimization would likely make things faster?
						//TODO merge opmutOuter and opmutInner?
						vm.infloop();
						//throw 'TODO this is not normally called outside opmutOuter. What should it do? just act like an opmutOuter? Or infloop?';
					
						//UPDATE its down to 255 as in 1<<vm.maxCurriesLeft. FIXME go down to max 4095 params so an evaling can store the 4 bits that go on stack? cuz need those 4 bits. Halted lambdas are always clean (those 4 bits are 0).
						
						/*
						FIXME its 4x2: stackIsAllowstackTimestackMem, stackIsAllowNondetRoundoff, stackIsAllowMutableWrapperLambda, stackIsAllowMutableWrapperLambda.
						opcodes:
						stackIsAllowstackTimestackMem //the 2x2 kinds of clean/dirty/etc. exists only on stack. only with both isClean and isAllowSinTanhSqrtRoundoffEtc at once, is it deterministic. todo reverse order aka call it !isDirty instead of isClean?
						stackIsAllowNondetRoundoff //isAllowSinTanhSqrtRoundoffEtc //the 2x2 kinds of clean/dirty/etc. exists only on stack. only with both isClean and isAllowSinTanhSqrtRoundoffEtc at once, is it deterministic. todo reverse order?
						stackIsAllowMutableWrapperLambda
						stackIsAllowAx (fixme, is it varargAxCall or just axa (and maybe axb?))
						*/
					break;case o.EmptyTreemap:
						//vm.addOp('EmptyTreemap',null,false,2,'(EmptyTreemap (IdThenGodelLessThan IdMaker) key)->U. Avl treemap.');
						ret = U;
					break;case o.Treemap:{
						//vm.addOp('Treemap',null,false,6,'(Treemap (IdThenGodelLessThan IdMaker) leftChild key val rightChild key)->val. Avl treemap. leftChild andOr rightChild can be (EmptyTreemap (IdThenGodelLessThan IdMaker)). (IdThenGodelLessThan IdMaker) returns T or F for < vs >=. Check equals func, or call that twice, to know if equal.');
						//(Treemap (IdThenGodelLessThan IdMaker) leftChild key val rightChild key)
						let comparator = a;
						let leftTreemap = b;
						let key = c;
						let val = x;
						let rightTreemap = y;
						let getKey = z;
						//FIXME what should this return? T or F? Or 3 possible vals: [T F], [F F], [F T] for less eq right?
						//Or should it be T, I (identityfunc aka (F U), or F?
						
						/*
						if(key.eq(getKey)){ //check if it equals key here first, so theres less calls of the comparator which costs more than equals???
							ret = val;
						}else{
							let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
							let child = vm.bit(compared) ? leftChild : rightChild; //FIXME is this backward?
							ret = child(getKey);
						}*/
						
						let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
						if(compared===T){ //getKey < key
							ret = leftTreemap(getKey); //is normally another Treemap or EmptyTreemap
						}else{ //key <= getKey
							if(getKey.n.eq(key)){ //getKey equals key
								ret = val;
							}else{ //key < getKey
								ret = rightTreemap(getKey); //is normally another Treemap or EmptyTreemap
							}
						}
					}break;case o.GodelLessThan:{
						
						//GodelLessThan opcode: This is the code I use to sort numbers exceeding a googolplex. Each number is either leaf or has 2 child numbers.
						//Compares first by height, breaks ties by comparing 2 left childs, or if the left childs equal doesnt recurse there and compares by right child.
						//GodelLessThan is one of those numbers so can compare it as less than / greater than or equal, to any other combo of lambdas or compare to itself.

						//(GodelLessThan y z) -> T or F
						if(y.n.eq(z)){ //y equals z
							ret = F;
						}else{
							//double can hold integers up to pow(2,53), which is more than can fit in memory so is ok implementation for now.
							let yHeight = y.n.height();
							let zHeight = z.n.height();
							if(yHeight < zHeight){
								ret = T;
							}else if(yHeight > zHeight){
								ret = F;
							}else{ //same height
								if(yHeight == 0){
									//FIXME is this "if(yHeight == 0)" really needed, or will the other logic handle that,
									//considering that (L U)->(F U) and (R U)->U.
									ret = F; //both are U
								}else{
									let yL = y.n.L();
									let zL = z.n.L();
									//Taking only 1 of these recursive paths, instead of both, is why its bigO(height) instead of bigO(2^height).
									if(yL.n.eq(zL)){ //parents are same height, and the 2 left childs equal, so compare right childs recursively
										let yR = y.n.R();
										let zR = z.n.R();
										ret = vm.ops.GodelLessThan(yR)(zR);
									}else{ //parents are same height, and the 2 left childs do NOT equal, so compare by left childs recursively.
										ret = vm.ops.GodelLessThan(yL)(zL);
									}
								}
							}
						}
					}break;case o.AvlHeightD:{
						//(AvlHeightD z) where z is normally a Treemap with 5 params or EmptyTreemap with 1 param but could be anything.
						//vm.isSameOpAndNumParams = (fn, op, numParams)=>(fn.n.o8()===op.n.o8() && numParams===(op.n.cur()-7));
						ret = vm.wrapDouble(z.n.treemapHeight());
						throw 'TODO';
					}break;case o.Put:{
						ret = vm.put(x,y,z); //key, val, map.
						//map(key) is how to get value of that key from the map. Returns U if doesnt contain that. Can check if it has a key/val with TreemapHas.
					}break;case o.Del:{
						//vm.addOp('Del',null,false,2,'(Del Key (Treemap ...)) -> forkEdited treemap/emptytreemap with that key/val gone, balanced as if by DoAvlBal after removing it, even if as an optimization thats done at the same time.');
						let key = y;
						let map = z;
						ret = vm.del(key,map);
					}break;case o.PutNoBal:{
						//vm.addOp('PutNoBal',null,false,1,'(PutNoBal key val map) -> forkEdited
						//map which has that mapping but may be unbalanced. Caller should DoAvlBal on returned
						//map to get a balanced one, or keep putting and balance after multiple puts.
						//Could TreemapNorm instead of DoAvlBal. Both return balanced treemap (if was valid map
						//to start with). TreemapNorm returns same map regardless of order of puts and balances
						//which created it, aka returns a near-complete-binary-tree with only the deepest row
						//potentially not filled.');
						//(PutNoBal key val map)
						let putKey = x;
						let putVal = y;
						let map = z;
						ret = vm.putNoBal(putKey,putVal,map);
						
						/*let comparator = map.n.treeComparator();
						let foundKey = map.n.treeKey();
						let compared = comparator(putKey)(foundKey);
						let TreemapPutNoBal_putKey_putVal = l; //(PutNoBal putKey putVal), without map aka the last param.
						if(compared===T){ //putKey < foundKey
							let leftTreemap = map.n.leftTree();
							let newLeftTreemap = TreemapPutNoBal_putKey_putVal(leftTreemap);
							vm.tree
							ret = FIXMEFIXME;
							//ret = leftTreemap(getKey);
							FIXMEFIXME that code is for GET, but doing PUT here.
						}else{ //foundKey <= putKey
							if(getKey.n.eq(key)){ //foundKey equals putKey
								//ret = val;
								FIXMEFIXME that code is for GET, but doing PUT here.
								throw 'TODO';
							}else{ //foundKey < putKey
								let rightTreemap = map.n.rightTree();
								ret = rightTreemap(getKey); //is normally another Treemap or EmptyTreemap
								FIXMEFIXME that code is for GET, but doing PUT here.
							}
						}*/
						
						/*let compared = comparator(getKey)(key); //FIXME should this be lessThan vs greaterThan? order of those 2 params? What do I mean by comparator?
						if(compared===T){ //getKey < key
							ret = leftTreemap(getKey); //is normally another Treemap or EmptyTreemap
						}else{ //key <= getKey
							if(getKey.n.eq(key)){ //getKey equals key
								ret = val;
							}else{ //key < getKey
								ret = rightTreemap(getKey); //is normally another Treemap or EmptyTreemap
							}
						}*/

					}break;case o.DoAvlBal:{
						throw 'TODO';
					}break;case o.TreemapNorm:{
						throw 'TODO';
					}break;case o.TreemapVerify:{
						throw 'TODO';
					}break;case o.Isleaf:{
						ret = vm.bit(z.n.isLeaf());
					}break;case o.S:
						ret = x(z)(y(z)); //the S lambda of SKI-Calculus
					break;case o.T:
						ret = y; //the K lambda of SKI-Calculus, but here we call it T (all namespaces are optional and TODO all should be derived at runtime, see the "localName" field etc).
					break;case o.F:
						ret = z;
					break;case o.L:
						//node.L() and .R() triggers lazyEval of .l or .r child like in a blob wrapper,
						//so next time this will just return z.n.l and not need to call .L()
						ret = z.n.l || z.n.L();
					break;case o.R:
						ret = z.n.r || z.n.R();
					break;case o.IsLeaf:
						ret = vm.bit(z().o8()==1); //TODO optimize as: ret = Bit(z==u); ??? check that code
					break;case o.Pair:case o.TypevalB:case o.TypevalC:
						ret = z(x)(y); //the church-pair lambda. Pair and Typeval do the same thing but have a different o8/opcode so Typeval is used as a semantic like (Typeval image/jpeg JpgBytes).
					break;case o.Lte:
						//lessThanOrEqual
						ret = vm.bit(y.n.d()<=z.n.d());
					break;case o.Lt:
						//lessThan
						ret = vm.bit(y.n.d()<z.n.d());
					break;case o.Gt:
						//greaterThan
						ret = vm.bit(y.n.d()>z.n.d());
					break;case o.Gte:{
						//greaterThanOrEqual
						ret = vm.bit(y.n.d()>=z.n.d());
					/*break;case o.Da:
						TODO replace Da with P. (P varName) is already used in some code. TODO also more testcases for it.
						//vm.xt("Redesigning lambdas 2023-4+ parse a%", Evv('a%'), Evv('(Da a)')); //Du/^ D/$ Da/% a/b/sum$ a/b/possiblyNotDedupedFuncVar^
						//vm.o8OfDuGo = vm.addOp('Da',null,false,2,'(Da varName namespace), where namespace can be a LamNs (most direct way), Treemap, EmptyTreemap, or Ns (recursive namespace), gets that var value from readOnly lambda/mutlambda params, or U if not found. Theres no DaGo, like DuGo and DGo, cuz that only happens for object-oriented/cycles in Treemap (or Treemap in Ns), not in LamNs. Its only 1 var name deep in LamNs, but outside the Da (TODO?) you might still use recursion, like maybe varName%/x/y/sum$ (TODO fix parser/tostring/treeUI to allow that). The varName% syntax. Get a readonly lambda/mutlambda param. Du/^ D/$ Da/% a/b/sum$ a/b/possiblyNotDedupedFuncVar^',{langs:{}});
						let namespace = r;
						let namespaceOp = namespace.n.o8();
						if(namespace.n.curriesLeft() == 1){
							throw 'TODO implement Da and Ns and LamNs and Treemap and EmptyTreemap together.';
							//if(namespaceOp == vm.o8OfLamNs){
							//
							//}else if(namespaceOp == vm.o8OfNs){
							//	throw 'TODO';
							//}else if(namespaceOp == vm.o8OfNs){
							//}
						}else{
							ret = U; //incomplete namespace so theres no vars in it.
						}
						*/
					/*break;case o.Du:{
						//(Du a SomeMap) -> (SomeMap (Du a)) //get dup fn
						let map = z;
						let Du_then_key = l;
						ret = map(Du_then_key);
					}break;case o.Du:{
						//Opcode: (Bl a SomeMap) -> (SomeMap (Bl a)) //get typed blob
						let map = z;
						let Bl_then_key = l;
						ret = map(Bl_then_key);
					*/
					}break;case o.BlE:{
						//vm.o8OfBl = vm.addOp('BlE',null,false,2,'(BlE NameGetter ValGetter ns) -> forkEdited ns to map (Bl (NameGetter ns)) to (ValGetter ns). In javascript its similar to: x = new Float64Array(55), for example, if NameGetter is ,x and ValGetter makes such a (TypevalB d* bytesofdoublearray).',
						//{ty:'num', langs:{}};
						let NameGetter = x;
						let ValGetter = y;
						let ns = z;
						let name = NameGetter(ns);
						let key = ops.Bl(name);
						let val = ValGetter(ns);
						ret = vm.put(key,val,ns);
					}break;case o.NewBl:{
						//vm.o8OfBl = vm.addOp('NewBl',null,false,2,'(NewBl contentType bize) -> (TypevalB contentType cbtOfAll0sThenPaddedWithA1Then0sTilNextPowOf2). Does not verify the bize is a multiple of contentTypes primitive type such as if its d* thats a double array so should be a multiple of 64 0s before the padding.',{ty:'bl', langs:{}});
						let contentType = y;
						let bize = z.n.d();
						if((bize&7) || (bize < 0) || Math.floor(bize)!=bize){
							throw 'TODO bize thats not a multiple of 8 bits, bize='+bize;
						}
						if(bize > vm.maxBize){
							vm.infloop();
						}
						if(bize >= (2**31)){
							throw 'bize='+bize+' is too big to create array but can do it as callpairs. TODO do this by sharing branches of cbts that are all 0s, other than the padding bit so will need log number of such callpairs.';
						}
						if((bize == 0) && (vm.minPaddingBits != 8)){
							throw 'FIXME this code requires at least 1 byte of padding, but vm.minPaddingBits='+vm.minPaddingBits+' Should use ops.Bit1 instead of a byte array in that case.';
						}
						let numBytes = bize>>3;
						let numPaddedBytes = vm.roundUpToPowOf2(numBytes+1); //FIXME that works up to 2**30 or is it 2**31? wont matter either way since in units of bytes so its a few bits smaller.
						let paddedBytes = new Uint8Array(numPaddedBytes);
						paddedBytes[numBytes] = 0x80; //the padding. its a 1 then 0s until next powOf2.
						let cbt = vm.CbtOfBytes(paddedBytes);
						ret = ops.TypevalB(contentType)(cbt); //as an optimization, dont create the unpadded form. go straight to padded. if had put in unpadded form instead of cbt, would have auto wrapped and padded it. but if put paddedBytes in here, would have padded again.

					}break;case o.O:case o.OO:{
						ret = z(l);
					//}break;case o.Du:case o.Bl:case o.D:case o.O:case o.OO:case o.G:{
					}break;case o.Bl:case o.D:case o.G:{
						//FIXME should o.D convert to double if its not already one (by lambda.n.d())? Same question for o.G. Similar for GGo.

						//FIXME remove ops Du and DuGo cuz they were replaced by P and PGo. P is vm.Mut.p in Mut/Jit optimization.

						//nevermind on Getcbt and GetcbtGo, theres already ops.Bl for that. Is there ops.BlGo? TODO

						//vm.o8OfGetcbt = vm.addOp('Getcbt',null,false,2,'Like P/% and $/D but is @/Getcbt Wraps typed arrays such as TypevalB of \'D\' and bytes of double[]',{langs:{}});
						//vm.o8OfGetcbtGo = vm.addOp('GetcbtGo',null,false,2,'Like PGo/% and $/DGo but is @/GetcbtGo. Wraps typed arrays such as TypevalB of \'D\' and bytes of double[]');

				
						//FIXME? if ns is a Lambda or Mutlambda, this should return whatever symbol means not found (is it U? thats not a double).

						//if(vm.isNsThatTakesKeyParam(l)){
						//if(true || vm.isNsThatTakesKeyParam(l)){ //FIXME, doing this without "true ||" broke alot of testcases by infloop "Wikibinator203DragAndDropTree.html:1 Uncaught gasErr" 2023-8-3.
						if(vm.isNsThatTakesKeyParam(z)){

							//Problem might be that o.O and o.OO and o.G are not ns at all, so i'm moving them to their own switch case to just return z(l).
							//Another problem is should be checking z, not l, in "if(!vm.isNsThatTakesKeyParam(l)){".

							//TODO optimize isNsThatTakesKeyParam by checking o8 and cur and caching the combos that are allowed.
							//Get header int vm.Node.header, its 2 bytes in that.
							//TODO optimize by doing them both the else (of this if) way below?
							ret = z(l); //ns(allParamsExceptLast)
						}else{
							//The non-isNsThatTakesKeyParam ns types (Lambda, Mutlambda, Infcur/[]) only have x% blah% etc keys aka (P x) (P blah) (P [hello world]).
							//Since ops.P is not in these cases, return U to mean not found "}break;case o.Du:case o.Bl:case o.D:case o.O:case o.OO:case o.G:{".
							ret = U;
						}
						
						/*Opcode: (Bl a SomeMap) -> (SomeMap (Bl a)) //get typed blob
						Opcode: (Bl a SomeMap) -> (SomeMap (Bl a)) //get typed blob
						Opcode: (D a SomeMap) -> (SomeMap (D a))
						Opcode: (O a SomeMap) -> (SomeMap (O a))
						Opcode: (OO a b SomeMap) -> (SomeMap (OO a b))
						*/
					}break;case o.Tylen:{
						ret = vm.wrapDouble(z.n.tylen());
					}break;case o.RawBli:{
						//vm.o8OfBli = vm.addOp('RawBli',null,false,2,'(RawBli (TypevalB d* thedoublebits) 3) -> double at index 3
						//(in units of 64 bits, or in units of 8 bits if b* instead of d*, for byte array, etc. Also see RawBlie,
						//and the nonraw forms Bli and Blie.',{ty:'num', langs:{}});
						 let typedBlob = y;
						 let index = z.n.d();
						 ret = vm.wrapDouble(typedBlob.n.at(index));
					}break;case o.RawBlie:{
						//vm.o8OfBlie = vm.addOp('RawBlie',null,false,3,'(RawBlie (TypevalB d* thedoublebits) 3 4.56) ->
						//forkEdited typedBlob to have that double val at that index, and if the blobs type is not double then its cast.
						//TODO can this change the size of it? what if its just past the end of the array?',{ty:'num', langs:{}});
						let typedBlob = x;
						let index = y.n.d();
						let val = z.n.d();
						ret = typedBlob.n.at(index,val);
					}break;case o.Bli:{
						//(Bli GetBlobName GetIndexInBlob ns)
						//OLD: (Bli GetBlob GetIndexInBlob ns)
						//index depends on size of primitive type of the blob as 1d array, such as bytes vs doubles.
						let GetBlobName = x;
						//throw 'Bli and Blie, should GetBlob be get x where (BlGo x) or (Bl x) is mapped to the typedblob?';
						let GetIndexInBlob = y;
						let ns = z;
						let blobName = GetBlobName(ns);
						let blobKey = ops.Bl(blobName);
						//let typedBlob = GetBlob(ns); //Example: (TypevalB D ...bytes...) is a double array
						let typedBlob = blobKey(ns); //Example: (TypevalB D ...bytes...) is a double array
						let index = GetIndexInBlob(ns).n.d();
						//let type = typedBlob.n.L();
						let doubleValFromBlob = typedBlob.n.at(index); //get double from array of byte, int, float, double, etc, cast to double.
						/*let doubleValFromBlob;
						if(typedBlob.n.isCbt()){ //not typed, just a blob/cbt. FIXME use it as byte[]? int[]? or what?
							throw 'TODO its cbt not typedblob';
						}else{
							let type = typedBlob.n.L(); //Example: (TypevalB b*) is type prefix of a byte array.
							let blob = typedBlob.n.R();
							if(type == vm.typeBytes){
								doubleValFromBlob = blob.n.byteAt(index);
								//if(blob.blob){
								//	doubleValFromBlob = blob.blob[blob.blobFrom+index];
								//}else{
								//	throw 'TODO do same thing but without the .blob optimization, using left and right childs recursively. theres byteAt func or something like that.';
								//}
							}else if(type == vm.typeInts){
								doubleValFromBlob = blob.n.intAt(index);
							}else if(type == vm.typeFloats){
								doubleValueFromBlob = blob.n.floatAt(index);
							}else if(type == vm.typeDoubles){
								doubleValueFromBlob = blob.n.doubleAt(index);
								//if(blob.blob){
								//	fixmefixme
								//	doubleValFromBlob = blob.blob[blob.blobFrom+index];
								//}else{
								//	throw 'TODO do same thing but without the .blob optimization, using left and right childs recursively. theres byteAt func or something like that.';
								//}
							}else if(type == vm.typeBits){
								doubleValueFromBlob = blob.bitAt(index) ? 1 : 0;
							}else{
								throw 'TODO type='+type;
							}
						}*/
						ret = vm.wrapDouble(doubleValFromBlob); //same as vm.wrap(doubleValFromBlob) but faster.
						
						
						
						//if(vm.typeBytes
						
						
						/*vm.o8OfBlie = vm.addOp('Bli',null,false,2,'Blob index. (Bli GetBlob GetIndexInBlob ns) -> double/num in that typedBlob in that ns, such as a specific double from a double[447] or a specific double from a byte[32] (TODO is it unsigned in case of byte? Uint8Array? Uint8ClampedArray?). These arrays are for example (TypevalB d bytesOfDoubleArray) for double or (TypevalB b bytesOfByteArray) etc. TypevalC lacks the padding that TypevalB has, in the bytes.',
							{ty:'num', langs:{
								js: (tr,fn,ty)=>{
									throw 'TODO';
								},
							}});
						vm.o8OfBlie = vm.addOp('Blie',null,false,2,'Blob index equals. (Blie GetBlob GetIndexInBlob GetNewVal ns) -> forkEdited ns with the typedBlob (such as a double[447] or byte[32]) forkEdited to have that index in that blob mapped to (GetNewVal ns).',
							{ty:'ns', langs:{
								js: (tr,fn,ty)=>{
									throw 'TODO';
								},
							}});
						*/
						//throw 'TODO Bli';
					}break;case o.Blie:{
						//throw 'FIXME how to forkedit ns using GetBlob? how to PutBlob? In mut optimization its vm.Mut.arr, but this is not the optimized way.';
						//(Blie GetBlobName GetIndexInBlob GetNewVal ns) -> forkEdited ns
						//OLD: (Blie GetBlob GetIndexInBlob GetNewVal ns) -> forkEdited ns
						//index depends on size of primitive type of the blob as 1d array, such as bytes vs doubles.
						let GetBlobName = c;
						let GetIndexInBlob = x;
						let GetNewVal = y;
						let ns = z;
						let blobName = GetBlobName(ns); //Example: get x from ,x
						let blobKey = ops.Bl(blobName); //Example: x@
						//let typedBlob = GetBlob(ns); //Example: (TypevalB d* ...bytes...) is a double array
						let typedBlob = blobKey(ns); //Example: (TypevalB d* ...bytes...) is a double array
						let index = GetIndexInBlob(ns).n.d(); //double
						let newValD = GetNewVal(ns).n.d(); //double. force conversion to double even if its not a double, like vm.Mut/Jit optimization does with Mut.arr
						//let newValFn = GetNewVal(ns); //normally a double but technically could be anything
						if(typedBlob.n.isCbt()){ //not typed, just a blob/cbt. FIXME use it as byte[]? int[]? or what?
							throw 'TODO its cbt not typedblob';
						}else{
							let type = typedBlob.n.L();
							let blob = typedBlob.n.R();
							//a powOf2 measured just from height. number of bits. Can be bigger than fits in Uint8Array.
							let cbtSize = blob.n.cbtSize();
							if(cbtSize > 2**31){
								throw 'TODO big cbt. cbtSize='+cbtSize;
							}
							let bize = blob.n.Bize();
							if(type == vm.typeBytes){
								if(bize&7){
									throw 'TODO handle the case when its not a valid double array. bize='+bize+' is not a multiple of 64';
								}
								let bytes = blob.n.bytesMutableCopy(); //Uint8Array
								bytes[index] = newValD; //cast to ubyte
								//changing 1 byte in an array then making a new array is very slow,
								//but TODO vm.Mut optimization (ops.Jit) and ops.Fork will do it much faster.
								let forkEditedArray = vm.wrap(bytes);
								ret = vm.put(blobKey,forkEditedArray,ns);
							}else if(type == vm.typeInts){
								throw 'TODO';
							}else if(type == vm.typeFloats){
								throw 'TODO';
							}else if(type == vm.typeDoubles){
								if(bize&63){
									throw 'TODO handle the case when its not a valid double array. bize='+bize+' is not a multiple of 64';
								}
								let bytes = blob.n.bytesMutableCopy(); //Uint8Array
								let doubles = new Float64Array(bytes.buffer);
								doubles[index] = newValD;
								//changing 1 double in an array then making a new array is very slow,
								//but TODO vm.Mut optimization (ops.Jit) and ops.Fork will do it much faster.
								let forkEditedArray = vm.wrap(doubles);
								//throw 'Bli and Blie, should GetBlob be get x where (BlGo x) or (Bl x) is mapped to the typedblob?';
								//throw 'TODO how to return forkEdited ns containing the forkEditedArray?';
								ret = vm.put(blobKey,forkEditedArray,ns);
							}else if(type == vm.typeBits){
								throw 'TODO';
							}else{
								throw 'TODO type='+type;
							}
						}
					}break;case o.GoO:{
						//Opcode: (GoO go c SomeMap) -> (SomeMap (OO (go SomeMap) c))
						//Like OO except the first key is a getter, not a literal first key.
						//Any number of keys can be chained in that getter, like /a/b/c/a/xyz in /a/b/c/a/xyz/sum.
						let map = z;
						let secondKey = y;
						let getFirstKey = x;
						ret = map(vm.ops.OO(getFirstKey(map))(secondKey));
					}break;case o.DGo:{
						//FIXME should o.D convert to double if its not already one (by lambda.n.d())? Same question for o.G. Similar for GGo.

						//(DGo x map) -> (map (D (x map))). Example: a/b/sum$ is (DGo a/b/sum) is (DGo (GoO (OO a b) sum)).
						//Call that on a Treemap and it recurses a/b/sum$ in it to get a val.
						let map = z;
						let varGetter = y;
						ret = map(ops.D(varGetter(map))); //TODO ops.D(varGetter(map))(map)?

					}break;case o.GGo:{
						//FIXME should o.D convert to double if its not already one (by lambda.n.d())? Same question for o.G. Similar for GGo.

						//vm.o8OfGGo = vm.addOp('GGo',null,false,3,'(GoG GetOb field ns) -> (G (GetOb ns) field ns). GoG is to G as GoO is to OO.',
						let GetOb = x;
						let field = y;
						let ns = z;
						let ob = GetOb(ns);
						ret = ops.G(ob)(field)(ns);
					}break;case o.BlGo:{
						let ns = z;
						let varGetter = y;
						ret = ops.Bl(varGetter(ns))(ns);
						//vm.o8OfBlGo = vm.addOp('BlGo',null,false,2,'(BlGo a SomeMap) -> (SomeMap (Bl (SomeMap a))) or should it be (Bl (a SomeMap) SomeMap)',{langs:{}});
					/*}break;case o.DuGo:{
						
						//2023-5-30 todo... replacing Du with P and replacing DuGo with PGo.
						
						//(DuGo x map) -> (map (Du (x map))). Example: a/b/fnVar^ is (DuGo a/b/sum) is (DuGo (GoO (OO a b) fnVar)).
						//Call that on a Treemap and it recurses a/b/fnVar^ in it to get a val.
						let map = z;
						let varGetter = y;
						ret = map(ops.Du(varGetter(map)));
					*/
					}break;case o.PGo:{
						//2023-5-30 todo... replacing Du with P and replacing DuGo with PGo.
						
						//FIXME its not just map. its any ns. so call node.p instead (which should be renamed to node.get.
						
						//OLD: (DuGo x map) -> (map (Du (x map))). Example: a/b/fnVar^ is (DuGo a/b/sum) is (DuGo (GoO (OO a b) fnVar)).
						//OLD: Call that on a Treemap and it recurses a/b/fnVar^ in it to get a val.
						
						//let map = z;
						let ns = z;
						let varGetter = y;
						//ret = map(ops.P(varGetter(map)));
						let val = varGetter(ns);
						
						//(PGo varGetter ns) should return same thing as (P val ns) aka (P (varGetter ns) ns).
						//TODO But I want to optimize it by using node.p??? Do that later, cuz im still redesigning P.
						ret = ops.P(val)(ns);
					}break;case o['K?']:{
						//FIXME remove K? KK? KE KKE, and use O GoO D Du DGo etc instead.
						
						//vm.addOp('K?',null,false,2,'(K? Key Map) -> val of (KE Key) in that map, or U if not found. Since treemap called on key returns val, this just returns (Map (KE Key)).');
						let key = vm.ops.KE(y);
						let map = z;
						ret = map(key);
						
						
						/*
						//vm.addOp('K?',null,false,2,'(K? Key [... (KE Key Val) ...]) -> Val, whichever is the last ObVal of that Key');
						//(K? a [(KE a b) (KE d vald) (KE a c) (KE a bb)]) -> bb
						//(K? d [(KE a b) (KE d vald) (KE a c) (KE a bb)]) -> vald
						let key = y;
						let stream = z;
						let search = vm.ops['KE'](key);
						ret = U; //in case not found
						while(stream.n.hasMoreThan7Params()){
							let item = stream.n.r; //item in the stream such as (KE Key Val)
							if(item.n.l === search){
								ret = item.n.r; //Val in [... (KE Key Val) ...]
								break;
							}
							stream = stream.n.l;
						}
						*/
						//let key = y;
						//let map = z;
						//ret = map(key); //val that key is mapped to. Map is normally a Treemap or EmptyTreemap.
						
						
						
					//}break;case o['OK?']:
					}break;case o['KK?']:{
						//vm.addOp('KK?',null,false,3,'(KKE KeyA KeyB Map) -> val of (KE KeyA KeyB) in that map, or U if not found. Since treemap called on key returns val, this just returns (Map (KKE KeyA KeyB)).');
						
						
						let key = vm.ops['KKE'](x)(y); //x is KeyA. y is KeyB.
						let map = z;
						ret = map(key); //get val of (K
						
					}break;case o['KE']:{
						//vm.addOp('KE',null,false,3,'(KE Key Val Map) -> forkEdited map with (KE Key) mapped to Val.');
						
						let key = l.n.L(); //(KE Key)
						let val = l.n.R(); //Val
						let map = z;
						//ret = vm.ops.TreemapPut(key)(val)(map);
						ret = vm.put(key,val,map);
						
						
					//}break;case o['OKE']:
					/*}break;case o['KKE']:
						//vm.addOp('OKE',null,false,4,'(OKE Ob Key Val [...]) -> [... (OKE Ob Key Val)], just appends an ob/key/val triple to the end of the list');
						throw 'TODO';
					break;case o['KEC']:
						//vm.addOp('KEC',null,false,3,'(KEC Key C [...]) -> [... (KEC Key C)], just appends a key and its val as cbt (C) to the end of the list, separately from KE and K? vals');
						throw 'TODO';
					break;case o['K?C']:{
						//vm.addOp('K?C',null,false,2,'(K?C Key [... (KEC Key Cbt)]) -> Cbt, whichever is the last Cbt of that Key');
						throw 'TODO';
					/*break;case o.D:{ //get Double value, as value of (DE key). counterpart of DE. Similar to vm.ops['K?'] which im thinking of renaming to just K.
						let key = vm.ops.DE(y);
						let map = z;
						ret = map(key).n.d(); //get double
					*
					break;case o.D:{ //get Double value. Often used with DGo in Treemap.
						//(D y map) -> (map (D y));
						let map = z;
						ret = map(l);
					*/
					/*}break;case o.DE:{ //set Double Equal to a val. Similar to KE.
						let key = l.n.L(); //(DE Key)
						let val = l.n.R().n.d(); //Val. d() gets double.
						let map = z;
						ret = vm.put(key,val,map);
					*/
					}break;case o.GE:{ //set Double Equal to a val. Counterpart of D. Similar to DuE is counterpart of Du. TODO K and KE are being removed.
						//TODO merge duplicate code between GE DE PE etc??

						//vm.o8OfGE = vm.addOp('GE',null,false,2,'(GE GetOb GetField GetVal ns) -> TODO. G and GGo are to read as GE is to write (by forkEdit of course). GE is to [G and GGo] as DE is to [D and DGo]. FIXME should there be GGoE and GE, where (GE ob field ns) and (GGoE GetOb GetField ns)? Or just (GE GetOb GetField ns)? Maybe call it RawGE vs GE?',{ty:'ns', langs:{}});
						let getOb = c; //,obName
						let getField = x; //,fieldName
						let getVal = y; //,2.34
						let ns = z; //Example: (EmptyTreemap GodelLessThan)
						let ob = getOb(ns);
						let field = getField(ns);
						let key = ops.G(ob)(field);
						let val = getVal(ns);
						if(vm.forceGEValToDouble){
							val = vm.wrapDouble(val.n.d());
						}
						ret = vm.put(key,val,ns);

						//in vm.Mut optimization, would just set mutOfThatOb.g[field] = val.n.d()
					}break;case o.DE:{ //set Double Equal to a val. Counterpart of D. Similar to DuE is counterpart of Du. TODO K and KE are being removed.
						/*OLD...

						//TODO fix comment in addop about DE which has diff params.
						//FIXMEFIXME lookup order of ops, should it be <DE I GetKey GetVal> where I gets 
						//In a _[] i found (Dput /numBytes *[/height /width ,4]) in a .wikib File, and renaming Dput to DE, or Dput might mean in an array.


						//(DE GetKey GetVal map) -> map forkEdited to have key (map (GetKey map)) mapped to val (GetVal map). FIXME as long as its getting the key,
						//why does DE need to be specific to double? Why not use some variant of put?
						//(Sput a/b/sum$ GetVal map). No, thats not right a/b/sum$ would get the double from the map. I just want to eval (a/b/sum map)
						//and leave the $ (syntax for using D) as it is.
						//(DE GetObKey GetVal map) -> map forkEdited to have key (D (GetObKey map)) mapped to (GetVal map).
						*/

						//(DE GetObKey GetVal map) -> map forkEdited to have key (D (GetObKey map)) mapped to (GetVal map).
						//Example: (DE ,x ,y (EmptyTreemap GodelLessThan)) -> (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) x$ y Em),
						//but names Tm and Em may differ or have no names.
						let getObKey = l.n.L().n.R(); //,x
						let getVal = l.n.R(); //,y
						let map = z; //Example: (EmptyTreemap GodelLessThan)
						let obKey = getObKey(map);
						let val = getVal(map);
						let wrappedKey = vm.ops.D(obKey); //(D x)
						ret = vm.put(wrappedKey,val,map); //map (D x) to y. Later you can call (D x map) to get y.
					}break;case o.PE:{
						//vm.o8OfDE = vm.addOp('PE',null,false,3,'PE is a setter. P is a getter. Similar to DE vs D.
						//(PE GetObKey GetVal map) -> map forkEdited to have key (P (GetObKey map)) mapped to (GetVal map).
						//To put literal key x and literal value y, use (PE ,x ,y TheMap) which maps (P x) to y.',{langs:{}});
						
						
						let getObKey = l.n.L().n.R(); //,x
						let getVal = l.n.R(); //,y
						let map = z; //Example: (EmptyTreemap GodelLessThan)
						let obKey = getObKey(map);
						let val = getVal(map);
						//let wrappedKey = vm.ops.Du(obKey); //(Du x)
						let wrappedKey = ops.P(obKey); //(P x)
						ret = vm.put(wrappedKey,val,map); //map (Du x) to y. Later you can call (Du x map) to get y.

					/*Du and DuGo replaced by P and PGo: }break;case o.DuE:{ //DE is to D as DuE is to Du.
						//TODO merge duplicate code between DE and DuE?
						let getObKey = l.n.L().n.R(); //,x
						let getVal = l.n.R(); //,y
						let map = z; //Example: (EmptyTreemap GodelLessThan)
						let obKey = getObKey(map);
						let val = getVal(map);
						let wrappedKey = vm.ops.Du(obKey); //(Du x)
						ret = vm.put(wrappedKey,val,map); //map (Du x) to y. Later you can call (Du x map) to get y.
					*/
					}break;case o.While:{
						let condition = x;
						let loopBody = y;
						let state = z;
						while(condition(state).n.z()){ //.n.z() compares it to ops.T
							vm.prepay1Time();
							state = loopBody(state);
						}
						ret = state;
					}break;case o.Foo:{
						
						//TODO This will be optimized by MutLoop, MutLam, etc.
						
						
						
						//vm.addOp('Fo',null,false,2,'A simple kind of loop that starts by computing its number
						//of cycles (doesnt check it again after each call of loopBody).
						//(Fo [varName_orShouldThisBeGetVarName getUpTo ...loopBodyParts...] map) ->
						//forkEdits map to have varName_orShouldThisBeGetVarName->0 ->1 ->2 up to (getUpTo whatMapStartsAs)-1
						//then map becomes loopBody(map) where loopBody is _[...loopBodyParts...] aka chain them.
						//See example code in lambda/AugmentedBalls.wikib that uses Fo...
						//Fo[,y .height Fo[,x .width
						//=[,pix +[.i .red] &[,255 +[.x *[.age ,35]]]]
						//=[,pix +[.i .green] &[,255 +[.x *[.y .age]]]]
						//=[,pix +[.i .blue] &[,255 *[,333 /[.x .y]]]] +=[,i ,4] ]]');
						
						
						
						//TODO this var size list might complicate and slow things down...
						//Could simplify by having only 1 loopBody. But its easier for humans to read the code this way...
						let list = vm.listToJs(y); //[varName_orShouldThisBeGetVarName getUpTo ...loopBodyParts...]
						let state = z;
						if(list.length<3){ //no loopBodyParts, nothing to do.
							ret = state;
						}else{
							let start = 0;
							//let endExcl = FIXMEFIXME;
							throw 'TODO';
						}
						
					}break;case o.For:{
						//vm.addOp('For',null,false,5,'(For start condition afterLoopBody loopBody stream) is like, if you wrote it in javascript: for(stream = start(stream); condition(stream); stream = afterLoopBody(stream)) stream = loopBody(stream); return stream;');
						let start = b;
						let condition = c;
						let afterLoopBody = x;
						let loopBody = y;
						let state = z;
						//.n.z() compares it to ops.T aka the church-true lambda.
						for(state = start(state); condition(state).n.z(); state = afterLoopBody(state)){
							state = loopBody(state);
						}
						return state;
					}break;case o.Fo:{


						//vm.addOp('Fo',null,false,4,'(Fo varName GetUpTo loopBody map), is like For except starts with varName being 0 and counts up to whatever (UpTo map) returns.');


						//OLD:
						//vm.addOp('Fo',null,false,4,'(Fo varName UpTo loopBody map), is like For except starts with varName being 0 and counts up to whatever (UpTo map) returns.');
						
						//FIXME using Treemap/EmptyTreemap opcodes instead of btfl...
						
						//OLD:
						//(Fo varName LoopSize LoopBody State)
						// Fo c       x        y        z

						//state is normally an AVL treemap, a vm.ops.Treemap of all but the last param filled,
						//sorted first by 256 or 512 bit id (of lambda) and breaking ties (hash collisions) by GodelLessThan.
						//In that treemap are normally things like (? hello world), (?? object key value),
						//or (?C catPic463 (TypevalB application/jpeg <...bytes of jpg pic of a cat...>)).
						let state = z; //Example: (EmptyTreemap GodelLessThan), but you probably want to use an idMaker where GodelLessThan only breaks ties.

						if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop start state='+state);
						
						//loops varName from (double)0 to (double)LoopSize-1
						//adjusting that in State (a btfl) then loopBody becomes loopBody(State),
						//and at end, restores varName to whatever it was before (in State) and returns last State.
						let varName = c; //var names are normally utf8 strings but can be any lambda
						//let varNameGetter = c; //var names are normally utf8 strings but can be any lambda
						//let varName_asKey = vm.ops.FIXME FIXME;
						//let varName_asKey = vm.ops['?'](varName); //Example: (? i) being set to (double)0 or 1 or 2 or 3...
						//let varName_asKey = vm.ops['KE'](varName); //Example: (KE i) being set to (double)0 or 1 or 2 or 3...

						//Example: (Fo ,i ,4 {...loopBody...} map). (,i map) -> i.
						//Example: (Fo a/b/xyz ,4 {...loopBody...} map). (a/b/xyz map) -> (map (OO (map (OO a b)) xyz)). See doc/objectOrientedOpcodes/objectOrientedOpcodes.txt
						//Similarly, (,4 map) -> 4, but could have been something that depends on contents of map like to get length of some array.
						//varName = varNameGetter(state);

						//No, just (Fo i ,4 LoopBody Map). Dont do dynamic var name. Use <...> if want that.

						
						//KE means Key Equal, set that key equal to a given value in a given treemap. Similar to KKE which has 2 keys.
						//K? and KK? gets what that puts. Maybe should just call those K and KK.
						//let varName_asKey = vm.ops.KE(varName); //Example: (KE i) being set to (double)0 or 1 or 2 or 3...
						let varName_asKey = ops.D(varName); //Example: (D i) if (Fo i ,4 ...)
						
						//let start = 0;
						let getUpTo = x; //upTo aka endExcl.
						let endExcl = getUpTo(state).n.d(); //double
						//let endExcl = x.n.d(); //UpTo as double/float64
						let loopBody = y;


						/* Commentingout this 2023-6-10 cuz the ops.Ns redesign makes all loop opcodes push a namespace, and pop it at end,
						so dont have to deal with prevVarVal.
						
						//let prevVarVal = vm.btflGet(state, varName_asKey);
						let prevVarVal = state(varName_asKey); //returns U if its mapped to U or if it has no such key/val.
						let hadPrevVal = prevVarVal!==U || vm.has(varName_asKey,state); //val of U means either its not there or it maps to U.
						//Dont need this cuz varName_asKey is already the putter of itself. let putThatVar = vm.ops.Put(varName_asKey);
						for(let val=0; val<endExcl; val++){
							//ignore possible changes of varName's val by loopBody.
							
							//OLD, cuz using avl treemap instead of btfl for loops/if/else/etc state: state = vm.btflPut(state, varName_asKey(val));
							//FIXME... state = (val)(state)
							//state = putThatVar(val)(state);
							
							//(KE key val map) -> forkEdited map with (KE key) mapped to val. varName_asKey is (KE key).
							//(KE x) is a putter of x.
							//state = varName_asKey(val)(state);
							state = vm.put(varName_asKey,val,state); //same as vm.ops.DE(vm.ops.T(varName))... WAIT, i havent decided on what S-level DE will be.

							if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop after write loop counter val='+val+' endExcl='+endExcl+' state='+state);
							
							
							state = loopBody(state);

							if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop after loopBody val='+val+' endExcl='+endExcl+' state='+state);
						}
						//restore val of varName to what it was before this loop, even if loop changed it.
						if(hadPrevVal){
							//state = putThatVar(prevVarVal)(state); //FIXME what if val was 0
							//state = varName_asKey(prevVarVal)(state); //FIXME what if val was 0
							state = vm.put(varName,prevVarVal,state); //FIXME what if val was 0
						}else{
							state = vm.del(varName_asKey,state); //remove key/val.
						}
						if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop end state='+state);
						//state = vm.btflPut(state, varName_asKey(prevVarVal));
						ret = state;
						*/

						if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop before pushNsWithLoopVar state='+state);
						//FIXME what if there was no Comparator in the given namespace (such as a LamNs), or if its not a namespace at all.
						state = state.n.pushNsWithLoopVar(varName_asKey, 0);
						if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop after pushNsWithLoopVar state='+state);
						
						for(let val=0; val<endExcl; val++){
							//FIXME what if loopBody removed the loop var so this writes it into lowerOnStack/outer namespace?
							state = vm.put(varName_asKey,val,state);
							state = loopBody(state);
							if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop after write loop counter val='+val+' endExcl='+endExcl+' state='+state);
						}
						if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop before popNs state='+state);
						state = state.n.popNs();
						if(vm.logDetailedStateDuringFoLoop) console.log('vm.logDetailedStateDuringFoLoop end state='+state);
						//state = vm.btflPut(state, varName_asKey(prevVarVal));
						ret = state;
						
						
						








						
						
						
						
						
						
						
						/*
						//constant size loop (ending condition cant change during loop)
						//({,Fo varName ,0 ?height ,1 LoopBody} State), evals ?height to be (? height State).
						//State starts as [], and may be made by vm.ops.LambdaParams or by vm.statePut(state,varName,val).
						//State is just a [] list of ob/key/val triples andOr ob/val pairs
						//andOr ob/cbtVal separate pairs for 1 cbt val per ob for efficiency.
						//I'm undecided but _[...state...] (where _ is vm.ops.Seq) might be a func of state to state.
						let varName = a;
						let start = b.n.d();
						//let dynamicMaxExcl = x;
						let maxExcl = c.n.d();
						let inc = x.n.d();
						let loopBody = y;
						let state = z;
						let prevVal = vm.stateGet(state,varName);
						//try{
							for(let i=state; i<maxExcl; i+=inc){
								vm.prepay1Time();
								state = vm.statePut(state,varName,i);
								state = loopBody(state);
							}
						//}finally{
							state = vm.statePut(state,varName,prevVal);
						//}
						ret = state;
					
					
						//NEW: Fo[y ,0 ?height ,1 LoopBody]
						
						//no, these are in the [...]. theres only 2 params. let varName = v;
						//let start = w.n.d();
						////let dynamicMaxExcl = x;
						//let maxExcl = x.n.d();
						//let inc = y.n.d();
						//let loopBody = z;
						//*
						//let list = y;
						//FIXME what if theres diff num of params?
						//FIXME do i want n loopbody params as if a _[...] wraps them?
						//FIXME do i want optional start (default 0), optional inc (default 1)?
						////let loopBody = y.n.r;
						
						//let state = z;
						
					
						//OLD:
						//	(Fo ,i .z.y.length _[
						//		(=ood .z.abc .i <.z.y .i>)
						//	])
						//*
						//let varName = x;
						//let condition = y;
						//stream = z;
						//throw 'TODO';
						//
					
					/*break;case o.For:
						//vm.addOp('For',null,false,5,'(For start condition afterLoopBody loopBody stream) is like, if you wrote it in javascript:
						//	for(stream = start(stream); condition(stream); stream = afterLoopBody(stream)) stream = loopBody(stream); return stream;');
						let start = w;
						condition = x;
						let loopBody = y;
						stream = z;
						for(stream = start(stream); condition(stream); stream = afterLoopBody(stream)){
							stream = loopBody(stream);
						}
						ret = stream;
					*/
					}break;case o.Foch:{
						//(Foch listener ns) -> (listener keyA valA keyB valB keyC valC...). Its whatever order the keys are in the ns.
						let listener = y;
						let ns = z;
						//vm.foch = function(keyValListener, ns){
						vm.foch(function(key,val){
							listener = listener(key)(val);
						}, ns);
						ret = listener;
					}break;case o.Recur:{
						throw 'TODO';
					}break;case o.Eq: //by content deeply, but average constant time (big constant) as explained in vm.Node.prototype.eq
						let bit = y.n.eq(z);
						console.log('Computing Eq... y='+y+' z='+z+' bit='+bit);
						ret = vm.bit(bit);
					break;case o.VarargAx:
						//if(vm.stackIsAllowAx){
						if(vm.stackStuff.stackIsAllowAx()){
							//throw 'TODO ax';
							
							//FIXME this isnt right cuz thats just what happens when funcBodyAndVarargChooser gets it, but havent found funcBodyAndVarargChooser yet.
							//For now this is an evaler calling (varargAx funcBodyAndVarargChooser a b c d) on e, a b c d... nextParam/e.
							//
							//This wont happen until theres at least 9 params.
							//z is (pair_or_lazyeval_todochooseone (varargAx funcBodyAndVarargChooser a b c d) e).
							//let find = z().l.r; //starts as (varargAx funcBodyAndVarargChooser a b c d)
							//let funcBodyAndVarargChooser = TODO get eighth param;
							
							//
							//let find = y; //starts as (varargAx funcBodyAndVarargChooser a b c d)
							//while(find.n.l.n.curriesLeft() != 2) find = find.n.l; //lambda.n is the same as lambda()
							//FIXME can this be redesigned so that loop is faster? Maybe cache funcBody for use in op lambda and op varargAx?
							//let funcBodyAndVarargChooser = find.n.r;
							let funcBodyAndVarargChooser = y.n.funcBody();
							
							
							//FIXME prevent opOneMoreParam from interacting with ax constraints in some ways, since ax has to be verified
							//at every param starting at 9th param. At 8 params, the last param is funcBodyAndVarargChooser and hasnt evaled yet.
							//(ax funcBodyAndVarargChooser) is always halted.
							//(ax funcBodyAndVarargChooser a) is halted if (funcBodyAndVarargChooser (pair (ax funcBodyAndVarargChooser) a))->u.
							//(ax funcBodyAndVarargChooser a b) is halted if (funcBodyAndVarargChooser (pair (ax funcBodyAndVarargChooser a) b))->u.
							//and so on, for unlimited params. curriesLeft of ax is 2.
							//curriesLeft of everything after that is 1 meaning to verify constraint at each next param.
							//FIXME should it be lazyeval (Lx.Ly.Lz.xy) instead of pair?
							
							
							
							//FIXME??? varargAx should always have curriesLeft of 1 even after it gets its next curry, and next after that...
							//It can have unlimited curries since funcBodyAndVarargChooser chooses to be halted or to eval, at each next curry.
							
							//let nextParam = z;
							//vm.stackIsAllowAx
							
							throw 'FIXME use vm.stackStuff.stackIsAllow* etc, since vm.stackIsAllow* were moved to that.';
							/*vm.StackStuff.prototype.stackIsAllowNondetRoundoff = function(){
								return this.mask&vm.mask_stackIsAllowNondetRoundoff;
							};
							vm.StackStuff.prototype.stackAllowReadLocalIds = function(){
								return this.mask&vm.mask_stackAllowReadLocalIds;
							};
							vm.StackStuff.prototype.stackIsAllowMutableWrapperLambdaAndSolve = function(){
								return this.mask&vm.mask_stackIsAllowMutableWrapperLambdaAndSolve;
							};
							vm.StackStuff.prototype.stackIsAllowAx = function(){
								return this.mask&vm.mask_stackIsAllowAx;
							};
							vm.StackStuff.prototype.stackIsAllowstackTimestackMem = function(){
								return this.mask&vm.mask_stackIsAllowstackTimestackMem;
							};
							*/
							
							//tighten clean/dirty higher in stack during verifying ax constraint so its deterministic.
							let prev_stackIsAllowstackTimestackMem = vm.stackIsAllowstackTimestackMem;
							let prev_stackIsAllowMutableWrapperLambda = vm.stackIsAllowMutableWrapperLambda;
							let prev_stackIsAllowNondetRoundoff = vm.stackIsAllowNondetRoundoff;
							//vm.saveStackTop(); no cuz only want some of the cleanVsDirtyBits.
							
							let axEval;
							try{
								//cuz ax must be deterministic
								vm.stackIsAllowstackTimestackMem = false;
								vm.stackIsAllowMutableWrapperLambda = false;
								vm.stackIsAllowNondetRoundoff = false;
								
								axEval = funcBodyAndVarargChooser(ops.Infcur(l)(r)); //evals to u/theUniversalFunction to define l(r) as halted, else evals to u(theReturnVal)
							}finally{ //in case throws vm.gasErr
								//put clean/dirty back on stack the way it was
								vm.stackIsAllowstackTimestackMem = prev_stackIsAllowstackTimestackMem;
								vm.stackIsAllowMutableWrapperLambda = prev_stackIsAllowMutableWrapperLambda;
								vm.stackIsAllowNondetRoundoff = prev_stackIsAllowNondetRoundoff;
							}
							
							if(axEval === u){
								ret = vm.cp(l,r); //l(r) is halted. l(r) is whats evaling right now, which is what makes varargAx a strange op.
							}else{
								ret = axEval.n.R(); //R(axEval). TODO optimize by L and R and isLeaf ops dont cache, just return instantly by getting those fields
							}
							//FIXME, if any lambda contains a call of varargAx with more than 8 params, since that means a constraint has been verified, //then stackIsAllowAx bit must be 1 when halted.
						}else{
							//prevent ax constraints from existing that werent verified.
							//They wont be verified while !vm.stackIsAllowAx, so during that, verify says fail.
							vm.infloop();
						}
						//OLD, cuz opOneMoreParam is replaced by op Lambda and op MutLam: FIXME it said somewhere said that opOneMoreParam is the only vararg, but actually theres 3: infcur, varargAx, and opOneMoreParam.
						//so update comments and maybe code depends on that?
					break; case o.OpCommentedFuncOfOneParam: //the ## syntax.
						//(OpCommentedFuncOfOneParam commentXYZ FuncOfOneParam Param)->(FuncOfOneParam Param)
						ret = y(z);
					/*break;case o.Sqrt: //of a cbt64 viewed as float64
						//TODO if(vm.stackIsAllowNondetRoundoff){
							let float64 = TODO;
							throw 'ret = TODO wrap Math.sqrt(float64) in cbt64;';
							throw 'TODO';
						//TODO }else{
						//TODO 	throw 'TODO either compute the exact closest float64 (and what if 2 are equally close, and should it allow subnormals?) (try to do that, choose a design) or infloop (try not to)';
						//TODO }
					*/
					break; case o.P:{ //the "get parameter from Lambda/MutLam/[...]/etc" opcode.
						//let paramName = y;
						let POfParamName = l;
						let lambdaEtc = z;
						//ret = lambdaEtc.n.p(paramName); //is U if has no such param or is not a Lambda/MutLam/[...]/etc.)
						ret = lambdaEtc.n.p(POfParamName); //is U if has no such param or is not a Lambda/MutLam/[...]/etc.	
					//break; case o.Lambda:
					}break; case o.Lambdo:{

						//Lambdo is the 7 param form with (U U) as its last param.
						//λ/Lambda is the 6 param form waiting for a [...param names...] param as 7th param.
						//TODO do same for MutLam at 6/7 params.

						/*OLD...
						//(Lambda [ab bc aSize bSize cSize] FuncBody ValAB valBC ValASize ValBSize ValCSize)
						// --> (FuncBody [(Lambda [ab bc aSize bSize cSize] FuncBody ValAB ValBC ValASize ValBSize) ValCSize]),
						//and in that case, FuncBody normally contains (P aSize) which gets ValASize,
						//and (P aSize) might be written as ?aSize or .aSize or something like that, and see <...> syntax.
						*/


						//(Lambda [ab bc aSize bSize cSize FuncBody] ValAB valBC ValASize ValBSize ValCSize)

						let FuncBody = l.n.funcBody();
						let namespace = vm.ops.LamNs(l)(r); //get from it using x% varName% etc.
						
						//FIXME maybe infcur/() shouldnt be used here, and should use Pair or some other op for it instead,
						//so Get (whats it called?) aka the ? opcode, can easier tell the difference between [AllParamsExceptLast LastParam] vs [...state...].
						//ret = FuncBody(vm.ops.Infcur(l)(r)); //l contains FuncBody so it can call itself recursively if it wants to.
						ret = FuncBody(namespace); //l contains FuncBody (at end of params list) so it can call itself recursively if it wants to.
					}break; case o.Mutlambdo:{

						//(Λ/Mutlambda [ab bc aSize bSize cSize FuncBody] valAB valBC valASize valBSize valCSize (EmptyTreemap GodelLessThan))
						//
						//newLamNs: (LamNs (Λ/Mutlambda [ab bc aSize bSize cSize FuncBody] valAB valBC valASize valBSize) valCSize)
						//incomingNs: (EmptyTreemap GodelLessThan)

						let FuncBody = l.n.funcBody();
						let newLamNs = ops.LamNs(l.n.L())(l.n.R()); //get from it using x% varName% etc.
						let incomingNs = r; //normally a Treemap. //get from it using x$ varName$ otherVarName^ a/b/sum$ x/y/z etc.
						//get from combined namespace the same wan you get from either namespace inside it. Use varName% or a/b/sum$ in funcBody for example.
						let namespace = vm.inMutlambdaLamnsIsInner ? ops.Ns(newLamNs)(incomingNs) : ops.Ns(incomingNs)(newLamNs);
						ret = FuncBody(namespace); //l contains FuncBody (at end of params list) so it can call itself recursively if it wants to.
					}break; case o.Ns:{
						/*vm.o8OfNs = vm.addOp('Ns',null,false,3,'(Ns namespaceA namespaceB key) -> val from namespaceA if exists else from namespaceB
						if exists else U if not exist in either. TODO update Put opcode to deal with Ns, LamNs, and Treemap the same way. Namespace
						with 2 childs, a local and other namespace. Either may be another such Ns, but the leafs of it are eventually Treemap or
						(LamNs (λ [a b c] comment funcBody valA valB) valC). Where (LamNs (λ [a b c] comment funcBody valA valB) valC a) -> valA,
						call it on b and get valB, call it on c and get valC, call it on anything else and get U. Put and Has ops will need to
						be updated to deal with Ns, LamNs, and Treemap all the same way.',{langs:{}});
						*/
						let namespaceA = x;
						let namespaceB = y;
						let key = z;
						/*let val = namespaceA(key);
						if(val === U){
							//returning U means val is U or doesnt have that key.
							if(vm.has(key,namespaceA)){ //namespaceA has key, val is U
								ret = val;
							}else{ //namespaceA does not have key.
								ret = namespaceB(key);
							}
						}else{
							ret = val;
						}
						*/
						ret = namespaceA.n.pOrNull(key) || namespaceB(key); //same as namespaceA.n.pOrNull(key) || namespaceB.n.pOrNull(key) || U.
						//FIXME that broke: vm.xt("Redesigning lambdas 2023-4+ mutlam adding lambda param and var from treemap - C",
						//	Evv('(Ns (LamNs (Λ [x I#(F U)]) 2) (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 Em) x%)'), Evv('2'));

						//throw 'FIXME (Has z% (LamNs (Λ [x I#(F U)]) 2)) is giving T';
					}break; case o.LamNs:{
						//varName% is (P varName). (P varName (LamNs...)) -> (LamNs (P varName)).
						//LamNs then gets varName out of it and gets the param named that in the lambda params list at 7th param of U.
						let lamns = l;
						let pKey = z;
						if(vm.isFullP(pKey)){ //FIXME Da is being replaced by P. P existed first. Da was never fully working. I just wanted a varName% syntax but that should mean (P varName).
							//let key = pKey.n.R(); //get varName from (P varName) aka from varName%. Can be any lambda, not just strings.
							//ret = lamns.n.p(key);
							ret = lamns.n.p(pKey); //.p will remove the P from (P key), cuz for example (LamNs (λ [a b I#(F U)] 10) 20 (P a)) gets the value of a aka 10. (P b) gets value of b aka 20.


							//FIXME in case o.LamNs, add more than just (P a) aka a% here. Theres also a^ a$ a/b/c$, D, DGo, etc.
						}else{
							ret = U; //not found
						}
					}break; case o.LambdaParams:{
						//FIXME was this removed from addOp? If so, remove it here too.

						//FIXME remove this? cuz should use ObVal and ObKeyVal etc in a []?
						ret = vm.lambdaParamsInfcurInReverseOrder(z);
						//z is (LazyEval (Lambda FuncBody [x y z] valX valY) valZ) or (Lambda FuncBody [x y z] valX ...).
						//Returns an infcurStream, in those 2 cases, [y valY x valX] or [y valY x valX],
						//since the reverse order is faster and order of the key/vals only matters if theres duplicate keys.
						//There could be duplicate keys like (Lambda FuncBody [y x y y z] ...)
						//but thats only allowed since its faster than checking for duplicates,
						//and I dont expect people to want to do that.
						//If they do, the first y in [y x y y z] becomes the last y in [z val y val y val x val y val].
						
					
						//throw 'TODO';
						//vm.addOp('lambdaParams',false,1,'Used with (Lambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (Lambda FuncBody [x y z] valX valY) valZ)). (LambdaParams (LazyEval (Lambda FuncBody [x y z] valX valY) valZ)) -> [x valX y valY z valZ], but it can be a different number of params. Lambda takes up to (TODO find exact number) around 240-something or 250-something params.');
					}break; case o.CC:{
						//(CC [the comment] a b) -> (a b).
						ret = y(z);
					}break; case o.Qes: //opposite of Seq
						{
							//TODO merge duplicate code between qes and seq
							let reverseSeq = y;
							//qes is like the seq op except in reverse order cuz its more efficient, but less intuitive.
							let state = z; //x in (_[a b c] x)
							while(reverseSeq().hasMoreThan7Params()){
								let func = reverseSeq().r;
								state = func(state);
								reverseSeq = reverseSeq().l;
							}
							ret = state;
						}
					break; case o.Seq: //aka _ like in _(...) (UPDATE thats back to _[...]) in //new syntax: {} call. () infcur. [] sCurryListButTOfFirst. <> sCurryList.
						{
							//TODO merge duplicate code between qes and seq
							//vm.addOp('seq',false,2,'The _ in (_[a b c] x) means ((Seq [a b c]) x) which does (c (b (a x))), for any 	vararg in the [].');
							
							let reverseSeq = vm.reverseInfcurlikeList(y); //might be faster this way (than the commentedout code below) by using funcallCache cuz can look it up instead of looping over the list.
							let state = z; //x in (_[a b c] x)
							while(reverseSeq().hasMoreThan7Params()){
								let func = reverseSeq().r;
								state = func(state);
								reverseSeq = reverseSeq().l;
							}
							ret = state;
						}
						
						
						/* above comment says "the commentedout code below".
						vm.prepay(1,1);
						let infcurList = y;
						let reverseSeq = [];
						while(infcurList().hasMoreThan7Params()){
							vm.prepay(1,1);
							reverseSeq.push(infcurList().r);
							infcurList = infcurList().l;
						}
						let param = z;
						for(let funcInSeq of reverseSeq){
							param = funcInSeq(param);
						}
						ret = param;
						*/
					break;case o.Has:
						//vm.addOp('Has',null,false,2,'(Has key namespace) -> T or F',{langs:{}});
						let key = y;
						let ns = z;
						ret = vm.bit(vm.has(key,ns));
					break;case o.HasMoreThan7Params:
						ret = vm.bit(z().hasMoreThan7Params());
					break; case o['+n']:{
						let list = y;
						let ns = z;
						let sum = 0;
						/*while(infcurList.n.hasMoreThan7Params()){
							vm.prepay1Time();
							sum += list.n.R().n.d();
							list = list.n.L();
						}*/
						for(let listItem of list.n.params()){ //FIXME reverse this or not? Also, faster to loop the commentedout way above
							sum += listItem(ns).n.d();
						}
						ret = vm.wrapDouble(sum);
					}break; case o['*n']:{
						let list = y;
						let ns = z;
						let mul = 1;
						/*while(infcurList.n.hasMoreThan7Params()){
							vm.prepay1Time();
							mul *= list.n.R().n.d();
							list = list.n.L();
						}*/
						for(let listItem of list.n.params()){ //FIXME reverse this or not? Also, faster to loop the commentedout way above
							mul *= listItem(ns).n.d();
						}
						ret = vm.wrapDouble(mul);
					}break;case o['+']:{
						//FIXME see "FIXME" comment in case Sine.

						//new syntax: {} call. () infcur. [] sCurryListButTOfFirst. <> sCurryList.
						//+(a b c d)e -> sum these doubles: {a e} {b e} {c e} {d e}.
						//{+ 2 3} -> 5. Either way + has 2 params. Differs by if first of 2 params is a ()/infcur, which is how that vararg syntax is done.
						
						
						/* Split + into + and +n. The +n uses []. + is always of 2 params and just adds them.
						if(y.n.isInfcur()){ //+(a b c d ...)z, a kind of vararg
							//FIXME add from left or right side first? Affects roundoff even if deterministic.
							//At least for now do it in reverse order cuz thats the order they're reachable in the infcur list.
							let infcurList = y;
							let sum = 0;
							while(infcurList.n.hasMoreThan7Params()){
								vm.prepay1Time();
								sum += infcurList.n.R().n.d();
								infcurList = infcurList.n.L();
							}
							ret = vm.wrapDouble(sum);
						}else{ //{+ 2 3}
							ret = vm.wrapDouble(z.n.d()+y.n.d()); //secondParam+firstParam, reverse order to match the vararg order being reversed
						}*/
						ret = vm.wrapDouble(z.n.d()+y.n.d()); //secondParam+firstParam, reverse order to match the vararg order being reversed
					}break;case o['*']:{
						//FIXME see "FIXME" comment in case Sine.
						//ret = vm.wrapDouble(y.n.d()*z.n.d());

						//See o['+'].

						//new syntax: {} call. () infcur. [] sCurryListButTOfFirst. <> sCurryList.
						//*(a b c d)e -> multiply these doubles: {a e} {b e} {c e} {d e}.
						//{* 2 3} -> 5. Either way * has 2 params. Differs by if first of 2 params is a ()/infcur, which is how that vararg syntax is done.
						if(y.n.isInfcur()){ //*(a b c d ...)z, a kind of vararg
							//FIXME add from left or right side first? Affects roundoff even if deterministic.
							//At least for now do it in reverse order cuz thats the order they're reachable in the infcur list.
							let infcurList = y;
							let mul = 0;
							while(infcurList.n.hasMoreThan7Params()){
								vm.prepay1Time();
								mul *= infcurList.n.r.n.d();
								infcurList = infcurList.n.l;
							}
							ret = vm.wrapDouble(mul);
						}else{ //{+ 2 3}
							ret = vm.wrapDouble(z.n.d()*y.n.d()); //secondParam*firstParam, reverse order to match the vararg order being reversed
						}
					}break;case o.Mod: //mod. (-310)%100==(-10). (-310+1000)%100==90. -10 and 90 are 100 apart, so the mod works.
						//FIXME see "FIXME" comment in case Sine.
						ret = vm.wrapDouble(y.n.d()%z.n.d()); //(double,double)->double
					break;case o['++']:{
						//++(a getB getC)State -> next State with value of ?(a getB getC) incremented.
						//++(a)State -> State with val of a incremented.
						throw 'TODO need to use ? op, = op, andOr variants of it, andOr vm.something like vm.stateGet and vm.statePut but those arent vararg, find or make a vararg one.';
						//ret = vm.wrapDouble(z.n.d()+1); //double->double
					//}break;case o['--']:{ //FIXME rename to Mii cuz -= is Rucfni list (like in lisp), opposite order of Infcur list.
					}break;case o['Mii']:{ //FIXME rename to Mii cuz -= is Rucfni list (like in lisp), opposite order of Infcur list.
						throw 'See TODO in ++.';
						//ret = vm.wrapDouble(z.n.d()-1); //double->double
					}break;case o['**']:{ //means exponent in javascript and here, of doubles.
						//FIXME see "FIXME" comment in case Sine.
						ret = vm.wrapDouble(Math.pow( y.n.d(),z.n.d())); //(double,double)->double
					//}break;case o['-']:
					}break;case o['Mi']:
						//FIXME see "FIXME" comment in case Sine.
						ret = vm.wrapDouble(y.n.d()-z.n.d());
					//break;case o['/']:
					break;case o['Div']:
						//FIXME see "FIXME" comment in case Sine.
						ret = vm.wrapDouble(y.n.d()/z.n.d());
					break;case o['&']:
						//(double,double)->double, cuz this is designed to fit how javascript works, and all math ops happen on doubles, but can store in Int32Array with auto cast.
						ret = vm.wrapDouble(y.n.d()&z.n.d());
					break;case o['|']:
						ret = vm.wrapDouble(y.n.d()|z.n.d()); //(double,double)->double
					break;case o['Xor']:
						ret = vm.wrapDouble(y.n.d()^z.n.d()); //(double,double)->double
					break;case o['~']:
						ret = vm.wrapDouble(~z.n.d()); //double->double
					break;case o['Shll']:
						ret = vm.wrapDouble(y.n.d()<<z.n.d()); //(double,double)->double
					break;case o['Shrr']:
						ret = vm.wrapDouble(y.n.d()>>z.n.d()); //(double,double)->double
					break;case o['Shrrr']:
						ret = vm.wrapDouble(y.n.d()>>>z.n.d()); //(double,double)->double
					
					break;case o.Neg:
						//FIXME see "FIXME" comment in case Sine.
						ret = vm.wrapDouble(-z.n.d());
					break;case o.Sine:
						//FIXME verify deterministic rounding matches between javascript, java,
						//opencl, etc, and take whatever is the most common standard, else emulate
						//it as int math depending on if the optimized form passes testcases at runtime.
						//And same for + * and other double ops. GPU.js can do deterministic int16 math
						//but is nondeterministic for float32 and doesnt do float64 at all or so it appears Y2022.
						//FIXME check stackIsAllowNondetRoundoff.
						ret = vm.wrapDouble(Math.sin(z.n.d()));
					break;case o.Asine:
						ret = vm.wrapDouble(Math.asin(z.n.d()));
					break;case o.Log1p:
						ret = vm.wrapDouble(Math.log1p(z.n.d()));
					break;case o.Expm1:
						//TODO deterministic implementation as (function(x){ let m = 1; for(let i=0; i<53; i++) m*=.5; m*=x; for(i=0; i<53; i++){ let c=m*2; let d=m*m; m=c+d; } return m; })
						//but also need deterministic implementation of multiply first, which js * may be or not, todo test on various systems.
						ret = vm.wrapDouble(Math.expm1(z.n.d()));
					break;case o.Floor:
						ret = vm.wrapDouble(Math.floor(z.n.d()));
					break;case o.Min:
						ret = y.n.d() < z.n.d() ? y : z;
					break;case o.Max:
						ret = y.n.d() > z.n.d() ? y : z;
					break;case o.Sqrt:
						//TODO replace Sqrt with (** x .5)
						//FIXME see "FIXME" comment in case Sine.
						ret = vm.wrapDouble(Math.sqrt(z.n.d()));
						//FIXME see "FIXME" comment in case Sine.
					break;default:
						throw 'o8='+o8+' opInfo='+JSON.stringify(vm.opInfo[o8])+' TODO theres nearly 128 opcodes. find the others in "todo these ops too..." Comment.';
						//throw 'o8='+o8+' TODO theres nearly 128 opcodes. find the others in "todo these ops too..." Comment.';
				}
				return cache.ret = ret;
			}
		};
		vm.rootEvaler.on = true; //vm.rootEvaler.on must always be true, and vm.rootEvaler.prev must always be null, cuz its deepest in linkedlists of evalers.
		vm.rootEvaler.prev = null;
		
		
		
		/*
		let ops = [];
		
		let newOp = (opName,evaler)=>{
			if(ops.length == 128) throw 'Max 128 ops';
			evaler.opName = opName;
			evaler.on = true;
			//TODO pushEvaler. evaler.prev.
			ops.push(evaler)
		};
		
		newOp('isClean', (vm,func,param)=>{
			FIXME evalers need to check if just do callpair first, if they have more than 1 param after the evaler.
		});
		*/
		
		let u = vm.u = vm.lambdize(new vm.Node(vm,null,null)); //the universal function
		let U = u;

		//u.evaler = vm.rootEvaler();
		//this happens in Node constructor: u.evaler = rootEvaler; //all other evalers, use theLambda.pushEvaler((vm,l,r)=>{...});
		//let op0000001 = u;
		//this breaks thingsu.func = u(u)(u)(u)(u)(u)(u)(u); //identityFunc.
		u().l = vm.identityFunc = vm.cp(u,u,u,u,u,u,u,u,u); //aka (f u).
		u().r = u;
		
		vm.uu = vm.u(vm.u);
		
		//optionalNumParams defaults to 0. Example: compare to a nonnormed form of vm.ops.Infcur with 0 params is checking is it an infcur/[].
		//returns bit of is the param the same o8 and number of params after the op.
		//such as is it a vm.ops.Treemap of 5 params (6th param is getKey and causes eval).
		vm.isSameOpAndNumParams = (fn, op, optionalNumParams)=>(fn.n.o8()===op.n.o8() && (optionalNumParams||0)===(fn.n.cur()-7));
		
		vm.isSameOp = (fn, op)=>(fn.n.o8()===op.n.o8());
		
		vm.isNumParams = (fn, numParams)=>(numParams===(fn.n.cur()-7));

		//Ns, Treemap, EmptyTreemap, and LamNs take a key param, like (Treemap ... x) -> value of key x,
		//unlike the other kinds of ns: Lambda, Mutlambda, Infcur/[], which do other things with their param
		//but they still work like (x% TheNs) -> val of key x%.
		//They dont contain things other than (P thing) aka thing%, such as x$ or x@ or [hello world].
		vm.isNsThatTakesKeyParam = fn=>{
			switch(fn.n.o8()){
				case vm.o8OfNs:
					//TODO optimize by not checking op again
					return vm.isFullNs(fn);
				case vm.o8OfTreemap: case vm.o8OfEmptyTreemap:
					//TODO optimize by not checking op again
					return fn.n.isTree();
				case vm.o8OfLamNs:
					//TODO optimize by not checking op again
					return vm.isFullLamNs(fn);
				default:
					return false;
			}
		};

		/*vm.isNsThatDoesntTakeKeyParam = fn=>{

		};

		//TODO optimize isNsThatTakesKeyParam, isNsThatDoesntTakeKeyParam, and isNs by using o8?
		vm.isNs = fn=>{
		};*/
		
		//is it an (OO a b)
		vm.isFullOO = fn=>vm.isSameOpAndNumParams(fn,vm.ops.OO,2);
		
		//is it a (GoO a b)
		vm.isFullGoO = fn=>vm.isSameOpAndNumParams(fn,vm.ops.GoO,2);
		
		//TODO those 2 opcodes should be adjacent that can be checked by anding it to drop the low bit of o8. Optimize that way instead of calling both funcs.
		vm.isFullOOOrGoO = fn=>(vm.isFullOO(fn) || vm.isFullGoO(fn));
		
		//is it a (D a)
		vm.isFullD = fn=>vm.isSameOpAndNumParams(fn,vm.ops.D,1);
		
		//is it a (DGo a)
		vm.isFullDGo = fn=>vm.isSameOpAndNumParams(fn,vm.ops.DGo,1);
		
		//TODO those 2 opcodes should be adjacent that can be checked by anding it to drop the low bit of o8. Optimize that way instead of calling both funcs.
		vm.isFullDOrDGo = fn=>(vm.isFullD(fn) || vm.isFullDGo(fn));

		vm.isLambdo = fn=>(fn.n.o8()==vm.o8OfLambdo);

		vm.isMutlambdo = fn=>(fn.n.o8()==vm.o8OfMutlambdo);

		//TODO optimize by checking for both using the bit mask in the optimization around "if((vm.o8OfLambdo&0b11111100) != (vm.o8OfMutlambdo&0b11111100)){"
		//where 4 opcodes, 2 of them with "ignore" in the op name for when the 7th param of Lambdo or Mutlambdo, is U. Can do this with just an & and an ===.
		//FIXME rename this, or have 2 funcs, one that allows all 4 of those ops, and one that allows only 2 of them, and TODO it has to have at least 7 params either way.
		vm.isLambdoOrMutlambdo = fn=>(vm.isLambdo(fn)||vm.isMutlambdo(fn));

		//Example: GoO, DGo, etc. Any of the types that would normally be used with Transpiler.prototype.gKey instead of .key.
		vm.isAnyFullGo = fn=>(vm.isAnyFullGoOf2Params(fn)||vm.isAnyFullGoOf1Param(fn));

		vm.isAnyFullGoOf1Param = fn=>(vm.isFullDGo(fn)||vm.isFullBlGo(fn)||isFullPGo(fn));

		vm.isAnyFullGoOf2Params = vm.isFullGoO;
		
		//is it a (Du a)
		//vm.isFullDu = fn=>vm.isSameOpAndNumParams(fn,vm.ops.Du,1);
		
		//is it a (DuGo a)
		//vm.isFullDuGo = fn=>vm.isSameOpAndNumParams(fn,vm.ops.DuGo,1);
		
		//TODO those 2 opcodes should be adjacent that can be checked by anding it to drop the low bit of o8. Optimize that way instead of calling both funcs.
		//replaced by P and PGo: vm.isFullDuOrDuGo = fn=>(vm.isFullDu(fn) || vm.isFullDuGo(fn));

		/* Replacing Getcbt and GetcbtGo with Bl and BlGo cuz Bl already existed. blob.
		vm.isFullGetcbt = fn=>vm.isSameOpAndNumParams(fn,vm.ops.Getcbt,1); //@ suffix

		vm.isFullGetcbtGo = fn=>vm.isSameOpAndNumParams(fn,vm.ops.GetcbtGo,1); //@ suffix

		vm.isFullGetcbtOrGetcbtgo = fn=>(vm.isFullGetcbt(fn) || vm.isFullGetcbtGo(fn));
		*/

		vm.isFullBl = fn=>vm.isSameOpAndNumParams(fn,ops.Bl,1); //@ suffix

		vm.isFullBlGo = fn=>vm.isSameOpAndNumParams(fn,ops.BlGo,1); //@ suffix

		vm.isFullBlOrBlGo = fn=>(vm.isFullBl(fn) || vm.isFullBlGo(fn));

		vm.isFullG = fn=>vm.isSameOpAndNumParams(fn,ops.G,2); //Example: picA^width

		vm.isFullGGo = fn=>vm.isSameOpAndNumParams(fn,ops.GGo,2); //Example: things/pics/picA^width

		vm.isFullGOrGGo = fn=>(vm.isFullG(fn) || vm.isFullGGo(fn));

		//varName% gets lambda or mutlambda params which are readonly in LamNs.
		//vm.isFullDa = fn=>vm.isSameOpAndNumParams(fn,vm.ops.Da,1);
		vm.isFullP = fn=>vm.isSameOpAndNumParams(fn,vm.ops.P,1);

		vm.isFullPGo = fn=>vm.isSameOpAndNumParams(fn,vm.ops.PGo,1);

		vm.isFullPOrPGo = fn=>(vm.isFullP(fn) || vm.isFullPGo(fn));


		vm.isFullLamNs = fn=>vm.isSameOpAndNumParams(fn,ops.LamNs,2);

		//ops.Ns
		vm.isFullNs = fn=>vm.isSameOpAndNumParams(fn,ops.Ns,2);

		vm.isFullT = fn=>vm.isSameOpAndNumParams(fn,ops.T,1);

		vm.isFullTypevalB = fn=>vm.isSameOpAndNumParams(fn,ops.TypevalB,2);

		vm.isFullTypevalC = fn=>vm.isSameOpAndNumParams(fn,ops.TypevalC,2);

		vm.isFullTypeval = fn=>(vm.isFullTypevalB(fn) || vm.isFullTypevalC(fn)); //TODO optimize using that func created around the 2 addOIps of Typeval* that checks if its a typeval at all, cuz their o8s have the same prefix.


		//var isCallOfS = fn=>(fn.n.o8()==vm.o8OfS);
		vm.isCallOfS = fn=>(fn.n.o8()==vm.o8OfS);

		//mostly the same as fn.n.L().n.L()===vm.ops.S but theres non-normed forms of S also.
		//o8 is a byte opcode thats copied from L child starting at 8th param of U. Up to 7 params, o8 is the numbers 1 to 255. 0 means evaling.
		//U.n.cur()==0. vm.ops.S.n.cur()==7. 2 more params and cur is 9. at cur 10, (S x y z) -> (x z (y z)).
		//var isS2 = fn=>(fn.n.o8()==vm.o8OfS && fn.n.cur()===9);
		vm.isS2 = fn=>(fn.n.o8()==vm.o8OfS && fn.n.cur()===9); //TODO use isSameOpAndNumParams?

		//Example: (S x)
		//var isS1 = fn=>(fn.n.o8()==vm.o8OfS && fn.n.cur()===8);
		vm.isS1 = fn=>(fn.n.o8()==vm.o8OfS && fn.n.cur()===8); //TODO use isSameOpAndNumParams?

		//Example: S. theres also non-normed forms of it, since the first 7 params of U each being U vs anything_except_U choose opcode,
		//nd theres more than 1 anything_except_U.
		//var isS0 = fn=>(fn.n.o8()==vm.o8OfS && fn.n.cur()===7);
		vm.isS0 = fn=>(fn.n.o8()==vm.o8OfS && fn.n.cur()===7);

		vm.isFullCanvas = fn=>vm.isSameOpAndNumParams(fn,ops.Canvas,5);

		//(S (S a b) c) -> js:[a b c]. Ends at whatevers not an S2.
		//(S a b) and (S (S a b) c) are (syty='S2')s, but a is not. Doesnt check b or c cuz it recurses on the left.
		//(S a) -> js:[a]. Thats in case drag and drop selects just the first thing in such a list, along with its prefix S.
		//var sListToJsListReversed = sList=>{
		vm.sListToJsListReversed = sList=>{
			if(vm.isS1(sList)) return [sList.n.R()]; //get x from (S x). If it was (S x y) it displays as {x y} and is S2.
			let ret = [];
			while(vm.isS2(sList)){
				ret.push(sList.n.R());
				sList = sList.n.L().n.R(); //(S (S a b) from (S (S a b) c), or get a from (S a b).
			}
			ret.push(sList); //a from (S a b).
			return ret;
		};

		//var sListToJsList = sList=>{
		vm.sListToJsList = sList=>{
			let ret = vm.sListToJsListReversed(sList);
			ret.reverse();
			return ret;
		};

		//<a b c> is a stList, aka {,a b c}. Returns jsList:[a b c].
		//var stListToJsList = sList=>{
		vm.stListToJsList = sList=>{
			let ret = sListToJsListReversed(sList);
			ret.reverse();
			if(ret[0].n.L() != vm.ops.T){
				throw 'First in stListToJsList is not prefixed by T: '+ret[0];
			}
			ret[0] = ret[0].n.R(); //remove T in (T ret[0])
			return ret;
		};

		//throws if has less than 7 params. Returns a js list of it at 7 params then each of the params after that.
		vm.curryListToJsListReversed = fn=>{
			if(fn.n.cur() < 7){
				throw 'Must be at least 7 params. fn='+fn;
			}
			let ret = [];
			let x = fn;
			while(x.n.cur() > 7){
				ret.push(x.n.R());
				x = x.n.L();
			}
			ret.push(x);
			return ret;
		};

		vm.curryListToJsList = fn=>{
			let ret = vm.curryListToJsListReversed(fn);
			ret.reverse();
			return ret;
		};


		//7 less than number of params of U, so can be as low as -7. Opcode is known at 7 params of U.
		vm.Node.prototype.paramsSoFar = function(){
			return this.cur()-7;
		};
		
		vm.o8ToLambda = function(o8){
			//if(3<=vm.loglev)console.log('vm.o8ToLambda '+o8);
			if(o8 > 255) throw 'o8='+o8;
			if(o8 == 1) return vm.u;
			let exceptLastParam = vm.o8ToLambda(o8>>1);
			//return exceptLastParam((o8&1) ? uu : u);
			return vm.cp(exceptLastParam, ((o8&1) ? vm.uu : vm.u));
		};
		
		vm.Node.prototype.vm = vm; //can get this like u().vm or u(u)(u(u))(u).vm for example.
		
		//op is known at 7 params.
		//TODO optimize this by storing a hasMoreThan7Params bit in headerInt mask?
		vm.Node.prototype.hasMoreThan7Params = function(){
			return this.o8()==this.l().o8();
		};
		
		vm.Node.prototype.hasAtMost7Params = function(){
			return !this.hasMoreThan7Params();
		};
		
		vm.Node.prototype.hasLessThan7Params = function(){
			return this.o8() < 128;
		};
		
		vm.lambdasAreSameOp = function(a,b){
			return a().o8()==b().o8();
		};

		//Gets the L of L of L... until has only 7 params
		vm.Node.prototype.getOpOrThrow = function(){
			if(this.cur() < 7){
				throw 'Less than 7 params';
			}
			if(this.cur() == 7){
				return this.lam;
			}
			return this.L().n.getOpOrThrow(); //TODO optimize using loop
		};
		
		
		
		
		//see vm.eval(string)->fn and ''+fn aka fn.toString() which is defined in lambdize function.
		
		
		//Start here for parse and tostring of combos of fns. View and Viewing are used inside it.
		//
		//new Viewer().fnToString(anyFn) -> code string. TODO hook that into toString of fn (aka of what lambdize returns).
		//
		//Start here for parse and tostring of combos of fns. View and Viewing are used inside it.
		//A parser and tostringer, for using wikibinator203 as a programming language.
		//You dont have to use this syntax, since its turingComplete and can make its own syntaxes.
		//Its just an example syntax you could use, something to get started with.
		//This makes View objects, 1 per fn (output of lambdize).
		//You can open and close branches, view as a name or literal bits or literal double, or expanded,
		//view as {} or [] or () or <> , ? . _ etc.
		//Start with new vm.Viewer(), then call its funcs on fns.
		vm.Viewer = function(){
			this.views = new Map();
			
			this.localNameToView = {}; //FIXME it appears 2022-7-10 this is not being used or not every time it should be. is only this.views being used?
			
			//FIXME those seem old design. see syty and < [ { ( : etc.
			this.syntaxTypeIsLeaf = {'U':true, '0':true, '_':true, ',':true};
		};
		
		//internal datastruct of Viewer.
		//
		//wrapper of a fn, in context of a Viewer that remembers which branches are open/closed
		//and maybe the #Names of fns for where they occur more than once.
		vm.View = function(viewer, fn){
			this.viewer = viewer; //what makes these View objects
			this.fn = fn; //the fn its a View of		
			this.localName = null; //FIXME ive been using view.fn.localName instead.
			this.hasDefinedBeforeUsingName = false;
			//Example: '_' for Seq, 'U' for theUniversalLambda, and maybe ',' for T but I tend to write T when its by itself.
			this.builtInName = fn.builtInName || null; //replace undefined with null
			//Examples: '(', '{', '[', '<', '0', '_', ',', '.'.
			//I might just do ( { [ < and maybe U, and just use builtInName and localName etc to know where to end recursion.
			//Also, stringliterals can have any chars in it and they start with ' (or is it "?).
			this.syntaxType = null;
		};
		
		//internal datastruct of Viewer.
		//
		//during a tostring from a fn recursively into its childs, accumulate strings in this.tokens.
		//A Viewing is a param of fnToStringRecurse.
		//You normally use 2 Viewing per fnToStringRecurse,
		//the first time to count the number of incoming ptrs per fn (if 2 or more, then it needs a #LocalName,
		//and the second time to use those counts, to choose to make up a #LocalName or not per fn.
		vm.Viewing = function(){
			this.tokens = []; //strings
			this.stack = []; //stack of View.
			//map of View to number, only counting refs (incoming pointer) that are displayed, not counting those inside double literals etc.
			this.refCount = new Map();
			this.indentString = '\t';
			this.pt = null; //a vm.ParseTree. TODO use this?
		};
		
		vm.Viewer.prototype.newViewing = function(){
			return new vm.Viewing();
		};
		
		vm.Viewing.prototype.incRefs = function(view){
			this.refCount[view] = (this.refCount[view]|0)+1; //the |0 makes it 0 if its undefined
		};
		
		vm.Viewing.prototype.refs = function(view){
			return this.refCount[view]|0;
		};
		
		//I'm about to put space in as a token where needed, but not after _ or , etc.
		//OLD...
		//
		//TODO should this handle indenting (this.indentString)? Or should that go in tokens?
		//
		//FIXME For now I'm just joining tokens with 1 space between each, which will look terrible, but I need to get it working first.
		vm.Viewing.prototype.makeString = function(){
			//let code = this.tokens.join(' ');
			//return code;
			return this.tokens.join('');
		};
		
		//FIXME dont include any names by default. But for now, including all the op names (in vm.ops),
		//cuz the Name# system isnt working yet.
		vm.newDefaultNamespace = function(){
			//if(!vm.booted) throw 'vm not booted yet';
			let ret = {};
			//ret.VmBooted = vm.bit(vm.booted); //FIXME dont put vm internals where user level code can see them... but vm.eval isnt reachable from user level code.
			for(let opName in vm.ops){
				let op = vm.ops[opName];
				
				//commentedout cuz localName isnt defined yet?
				//if(op.localName != opName){
				//	throw op.localName+' == op.localName != opName_in_vmDotOps == '+opName;
				//}
				
				ret[opName] = op;
				let otherName = op.opAbbrev; //Example: ',' in vm.ops.T
				if(otherName && !ret[otherName]) ret[otherName] = op; //opName overpowers opAbbrev if theres overlap
			}
			return ret;
		};
		
		vm.bit = bit=>(bit?vm.ops.T:vm.ops.F);

		//vm.getViewer().tokenize('[(Pair L R (T T)) ]') -> ['[', '(', 'Pair', ' ', 'L', ' ', 'R', ' ', '(', 'T', ' ', 'T', ')', ')', ' ', ']'].
		//Problem is, that last ' ' (before the ']') makes it parse wrong, so this removes it, so to fix it this returns
		//['[', '(', 'Pair', ' ', 'L', ' ', 'R', ' ', '(', 'T', ' ', 'T', ')', ')', ']'].
		vm.filterTokens = tokens=>{
			let ret = [];
			let i = 0;
			while(i < tokens.length-1){
				if(!vm.isIgnoreToken(tokens[i])){ //if its not ':' (or might add more ignored tokens later)
					if(!(vm.strIsAllWhitespace(tokens[i]) && (vm.strIsAllWhitespace(tokens[i+1]) || vm.isPopToken(tokens[i+1])))){
						ret.push(tokens[i]);
					}//else skip that whitespace since its before [whitespace or pop token].
				}
				i++;
			}
			ret.push(tokens[tokens.length-1]);
			if(vm.strIsAllWhitespace(ret[0])) throw 'First token is all whitespace in '+JSON.stringify(ret);
			if(vm.strIsAllWhitespace(ret[ret.length-1])) throw 'Last token is all whitespace in '+JSON.stringify(ret);
			return ret;
		};

		/*
		//At an index of a 'Name#' or '(' or '[' etc, 
		vm.indexAfterPop = (tokens,indexOfPush){
		};
		*/
		
		
		/*
		//2022-12-15 I'm going to add ParseTree.isUnaryRight = true or false, instead of using vm.expandTokensListForUnary.
		//
		//TODO also the : syntax which is same as having no whitespace between 2 things, like ab:cd cuz abcd would be a single token,
		//and similarly ,:,:_:[a b c] or ,:,_:[a b c] would be same as ,,_[a b c].
		vm.preprocessTokensForUnarySyntax = true;
		//vm.preprocessTokensForUnarySyntax = false;
		if(!vm.preprocessTokensForUnarySyntax) console.log(
			'WARNING: vm.preprocessTokensForUnarySyntax is off. You might do that if theres parsing problems for testing. So ,,_[a b c] would be parsed as (, , _ [a b c]) instead of (, (, (_ [a b c]))).');
		*/
		
		//2022-12-15 I'm going to add ParseTree.isUnaryRight = true or false, instead of using vm.expandTokensListForUnary and vm.preprocessTokensForUnarySyntax.
		//
		vm.postprocessParseTreeForUnarySyntax = true; //if its working, should be true
		//vm.postprocessParseTreeForUnarySyntax = false; //use false for testing if theres parsing problems
	
		
		//returns a vm.ParseTree
		//vm.parse = function(wikibinator203CodeString, optionalViewer){
		vm.parse = function(wikibinator203CodeString){
			wikibinator203CodeString = wikibinator203CodeString.trim();
			if(wikibinator203CodeString == '') throw 'Empty wikibinator203CodeString';
			//always do this in case of [a b c][hello world] -> [a b c [hello world]] etc. //if(!vm.isPushToken(wikibinator203CodeString[0])){
				//so if code string is ',hello' then it knows not to stop after , aka T.
				//isLoneToken(',') is true, but (,hello) keeps going like in (, hello).
				//Even if it adds extra (((...))) that will be removed in eval, such as ',hello' parses to '((, hello))' evals to ',hello'.
				wikibinator203CodeString = '('+wikibinator203CodeString+')';
			//}
			//return vm.getViewer().eval(wikibinator203CodeString);
			let v = new vm.Viewer(); //See "WARNING" about using shared Viewer in vm.getViewer(). Its recommended to give a new Viewer as param.
			//let v = optionalViewer || vm.getViewer(); //See "WARNING" about using shared Viewer in vm.getViewer(). Its recommended to give a new Viewer as param.
			let rawTokens = v.tokenize(wikibinator203CodeString);
			let tokens = vm.filterTokens(rawTokens); //remove whitespace before ], for example, which would make it parse wrong.
			vm.verifyTokensListHasNoDuplicateNames(tokens);
			
			//2022-12-15 I'm going to add ParseTree.isUnaryRight = true or false, instead of using vm.expandTokensListForUnary.
			//
			//if(vm.preprocessTokensForUnarySyntax){
			//	tokens = vm.expandTokensListForUnary(tokens);
			//}
			
			let parsing = new vm.Parsing(tokens); //doesnt do much yet. just wrap the tokens.
			let parseTree = v.tokensToParseTree(parsing);
			if(vm.postprocessParseTreeForUnarySyntax){
				parseTree = parseTree.foldUnaryDeep();
			}
			return parseTree;
		};
		
		//Its a unary right if theres a whole fn/lambda left of it before theres whitespace.
		//Call this on a lone token (like '2.34') or a pushToken (like '{' or '['
		//is tokens[i] the middle (':' or 'Name#') or right ('{' '[' '2.34' etc)? Only if to the left is another fn/lambda without whitespace between. 
		vm.isUnaryMiddleOrRight = (tokens,i)=>{
			let j = i;
			while(j>0 && tokens[j] == ':') j--; //dont know why that would be there but just in case
			if(j===0) return false;
			if(vm.isPushToken(tokens[j]) || vm.isLoneToken(tokens[j])) j--; //skip 2.34 or [ etc. FIXME does isLoneToken include 'Name#'? Should that count here?
			if(j<0) return false;
			if(tokens[j].endsWith('#')) j--; //skip Name#
			
			//FIXME this could have bugs where theres unexpected whitespace..
			if(j<0) return false;
			if(vm.strIsAllWhitespace(tokens[j]) || vm.isPushToken(tokens[j])) return false;
			return true;
			
			
			/*if(tokens[j] == ':') return true; //FIXME
			
			if(tokens[i])
			
			let foundMiddleOrRight = false;
			let foundWhitespaceAfter_middleOrRight = false;
			let step = 0;
			while(j>=0){
				let t = tokens[j];
				//let isWhitespace = vm.strIsAllWhitespace(t);
				//let isPartOfLambda = !isWhitespace && t!=':';
				switch(step){
					break;case 0:
						//if(isWhitespace) throw 'Dont start at whitespace, tokens['+j+']';
						//if(isPartOfLambda) step++;
						if(vm.strIsAllWhitespace(t)) throw 'Dont start at whitespace, tokens['+j+']';
					break;case 1:
						//if(
					break;case 2:
					break;default:
						throw 'This should never happen';
				}
				
				/*
				if(t == ':'){
					//ignore
				}else{
					if(foundMiddleOrRight){
						if(foundWhitespaceAfter_middleOrRight){
							
						}else{
							if(vm.strIsAllWhitespace(t){
								foundWhitespaceAfter_middleOrRight = true;
							}else{
								//vm.isPopToken(t) || vm.isLoneToken(t)){
								//return 
							}
						}
					}else{ //check for middle or right
						if(vm.strIsAllWhitespace(t)){
							return false;
						}else if(t.endsWith('#') || vm.isPushToken(t) || vm.isLoneToken(t)){
							foundMiddleOrRight = true;
						}else{
							throw 'Dont understand tokens['+j+']='+t;
						}
					}
				}*
				j--;
			}*/
		};
		
		//FIXME this might create garbage collection (garbcol) problems. Its just here for testing, that when u type code into Tree UI's textarea, u can find it in vm.lastEval.
		vm.lastEval = U;
		
		
		//vm.afterParse(vm.parse(wikibinator203CodeString,optionalNamespace)) is same as 
		//vm.afterParse = function(wikibinator203CodeString){
		
		//string -> fn
		//
		//Normally implemented in vm.Viewer.prototype.eval
		vm.eval = function(wikibinator203CodeString,optionalNamespace){
			if(!vm.booted) throw 'Cant call vm.eval before vm.booted becomes true, and you shouldnt set that to true earlier cuz its likely to break stuff thats harder to track down. Move test cases that use vm.eval to after that line that sets it to true. wikibinator203CodeString='+wikibinator203CodeString;
			wikibinator203CodeString = wikibinator203CodeString.trim();
			if(!wikibinator203CodeString) return vm.identityFunc;
			let parseTree = vm.parse(wikibinator203CodeString);
			let namespace = optionalNamespace || vm.newDefaultNamespace(); //is modified by parseTree.eval if that defines names, and is read.
			return vm.lastEval = parseTree.eval(namespace);
		};
		
		vm.Viewer.prototype.fnToString = function(fn){
			let viewing = this.newViewing();
			
			//FIXME, this sets view.fn.hasDefinedBeforeUsingName to false, instead of view.hasDefinedBeforeUsingName to false.
			this.setAllToFalse_hasDefinedBeforeUsingName();
			
			//FIXME should this call viewing.setAllToFalse_hasDefinedBeforeUsingName() ? I was about to do that, but then saw its making a new viewing.
			//Should that be in viewer instead of viewing? The viewer is reused (as of 2022-7-10).
			
			//this.viewToStringRecurse(this.view(fn), viewing, false);
			this.viewToStringRecurse(this.view(fn), viewing, 'C', true);
			if(2<=vm.loglev)console.log('tokens: '+JSON.stringify(viewing.tokens));
			return viewing.makeString();
		};
		
		vm.Viewer.prototype.setAllToFalse_hasDefinedBeforeUsingName = function(){
			//FIXME what if some arent included cuz they dont have a localName?
			//for(let view in this.localNameToView){
			//	view.hasDefinedBeforeUsingName = false;
			//}
			this.views.forEach((view,fn)=>{ //value,key
				view.hasDefinedBeforeUsingName = false;
			});
		};

		vm.hexDigits = '0123456789abcdef';
		
		vm.mapOfHexDigitToInt = {}; //vals are 0 to 15
		vm.mapOfDoubleHexDigitsToInt = {}; //vals are 0 to 255

		//256 pairs of hex digits
		vm.doubleHexDigits = [];
		for(let i=0; i<16; i++){
			vm.mapOfHexDigitToInt[vm.hexDigits[i]] = i;
			for(let j=0; j<16; j++){
				let hh = vm.hexDigits[i]+vm.hexDigits[j];
				vm.doubleHexDigits.push(hh);
				vm.mapOfDoubleHexDigitsToInt[hh] = ((i<<4)|j);
			}
		}

		vm.bytesToHex = bytes=>{
			let s = '';
			for(let i=0; i<bytes.length; i++) s += vm.doubleHexDigits[bytes[i]];
			return s;
		};
		
		vm.bytesAndRangeToHex = (bytes,from,toExcl)=>{
			let s = '';
			for(let i=from; i<toExcl; i++) s += vm.doubleHexDigits[bytes[i]];
			return s;
		};

		//returns 8 hex digits including any leading zeros.
		vm.intToHex = i=>(vm.doubleHexDigits[(i>>24)&0xff]+vm.doubleHexDigits[(i>>16)&0xff]+vm.doubleHexDigits[(i>>8)&0xff]+vm.doubleHexDigits[i&0xff]);

		//a cbt is a fn/lambda, a powOf2 number of bits (Bit0 or Bit1).
		//WARNING: this could be big so check cbt.n.cbtSize() first (in bits, which is always a powOf2 size).
		vm.cbtToHex = cbt=>{
			if(!cbt.n.isCbt()) throw 'Not a cbt';
			let h = cbt.n.cbtHeight();
			let Bit1 = vm.ops.Bit1;
			if(h < 2) throw 'Too few cbt bits for a hex digit, h='+h;
			if(h == 2){
				let a = cbt.n.l.n.l;
				let b = cbt.n.l.n.r;
				let c = cbt.n.r.n.l;
				let d = cbt.n.r.n.r;
				let hexInt4 = ((a==Bit1)?8:0)|((b==Bit1)?4:0)|((c==Bit1)?2:0)|((d==Bit1)?1:0);
				return '0123456789abcdef'[hexInt4];
			}else{
				if(cbt.n.blob){
					//might not have l and r childs cuz they would be lazyEvaled, and dont trigger that lazyEval here.
					return vm.bytesAndRangeToHex(cbt.n.blob, cbt.n.blobFrom, cbt.n.blobTo);
				}else{
					return vm.cbtToHex(cbt.n.l)+vm.cbtToHex(cbt.n.r);
				}
			}
		};
		
		
		//If true displays vm.eval('h') as h. If false displays it as (Typeval U 0b01101000).
		//vm.isDisplayStringLiterals = false;
		vm.isDisplayStringLiterals = true;
		
		//Example: view (TypevalC application/x-IEEE754-double 0x4002b851eb851eb8) as 2.34
		vm.isDisplayDoubleLiterals = true;
		
		vm.Node.prototype.isTypeUtf8 = function(){
			return this.l===vm.utf8Prefix; //If its a blob (Node.blob) then l and r may be null, but still return false cuz it has to be a TypevalB
		};

		vm.Node.prototype.isString = function(){
			//FIXME what if its dup of that type prefix?
			return this.L()==vm.utf8Prefix;
		};

		vm.Node.prototype.isSmallString = function(){
			return this.isString() && this.R().n.cbtSize() <= vm.smallStringBitSizeLimit;
		};

		vm.smallStringBitSizeLimit = 256;
		
		//TODO syntax ## (see OpCommentedFuncOfOneParam)
		vm.Viewer.prototype.viewToStringRecurse = function(view, viewing, callerSyty, isRightRecursion){
			//FIXME this is way too simple, just having U and ( and ) and builtInName, but its somewhere to start.
			
			//let doName = false;
			//if(view.builtInName && view.fn != ops.Infcur){ //FIXME
			//if(view.builtInName && view.fn != ops.Infcur){ //FIXME
			//if(view.fn.localName && view.fn != ops.Infcur){ //FIXME

			//let FN = view.fn(); //FN is a vm.Node. view.fn is a lambda.
			let FN = view.fn.n; //FN is a vm.Node. view.fn is a lambda.
			let isCbt = FN.isCbt();
			let isSmallCbt = isCbt;//TODO && (FN.cbtSize()<=256); //or what should the max cbt size (in bits) be to display as literal?
			let isTypevalDisplayedAsLiteral = false; //may become true
			
			let fnOp = FN.o8();
			
			//let isTypevalOf2Params = FN.o8()==vm.o8OfTypeval && FN.curriesLeft()==1;
			
			//WARNING: this only works if deduped and is not a lazy blob,
			//which is true in this prototype VM. Using o8() is the more general way.
			let isUtf8String = FN.l===vm.utf8Prefix; //TODO merge this with Node.isTypeUtf8
			//FN.r() would normally be a cbt, but does not technically have to be. Its only useful if its a cbt.
			let isSmallUtf8String = isUtf8String && FN.R().n.cbtSize() <= vm.smallStringBitSizeLimit;
			
			let isDoubleLiteral = FN.isDouble();
			

			//TODO also small string literals, with a few syntaxes for that,
			//one syntax if its small and no whitespace and starts with lowercase letter then its a string literal,
			//and one syntax for if its longer but within some size limit (dont make people read pages of text in a literal),
			//and there will be literals for various number types such as float64 and int32 etc but I havent decided which types yet,
			//and for raw cbts as 0b1110001101111100 or maybe hex 0x.
			let isLiteral = isSmallCbt || (vm.isDisplayStringLiterals && isSmallUtf8String) || (vm.isDisplayDoubleLiterals && isDoubleLiteral);
			//let isLiteral = isSmallCbt;
			
			//let displayedAsLiteralOrNameAlready = false;

			//let didPushLocalName = false;
			if(view.fn.localName){ //FIXME
				//didPushLocalName = true;
				if(view.fn != ops.Infcur){
			
					/*FIXME this is making it tostring the code wrong the second time its tostringed
					since the first time, it defines_and_uses view.fn.localName,
					but second and later times it only uses that so it doesnt get defined and all you see is the name in that part of code.
					To fix that, need to track which fns (or views of them?) have been displayed so far.
					I created view.hasDefinedBeforeUsingName to try to fix that, TODO...
					*/
				
				
					//includes U (or FIXME is it still lowercase u? cuz Names cant start with lowercase
					//cuz thats automatic string literal if it has no spaces.)
					//viewing.tokens.push(view.builtInName);
					viewing.tokens.push(view.fn.localName);
					if(FN.isLeaf()) view.hasDefinedBeforeUsingName = true; //dont define inside leaf, even though it wraps around ("tie the quine knot")
					//doName = true;
					//displayedAsLiteralOrNameAlready = true;
					//console.log('viewing.tokens.push builtInName '+view.builtInName);
					if(2<=vm.loglev)console.log('viewing.tokens.push localName (not part of View, FIXME): '+view.fn.localName);
				}else{
					//viewing.tokens.push('[');
					//viewing.tokens.push(']');
					//FIXME [] isnt technically a name, but i'm using it as an abbrev of Infcur.
					viewing.tokens.push('[]'); //localName is normally 'Infcur'
					//displayedAsLiteralOrNameAlready = true;
					if(2<=vm.loglev)console.log('viewing.tokens.push Infcur as []');
				}
				//doName = true;
			}
			
			//let pushedPound = false;
			let earlyTokens = [];
			if(!view.hasDefinedBeforeUsingName){
				/*if(doName){
					use earlyTokens to move this farther below
					viewing.tokens.push('#');
					pushedPound = true;
				}*/
				if(isLiteral){ //this is after checking for localName, so you can name a literal if you want.
					if(FN.isCbt()){ //FN is view.fn()
						/*let cbtHeight = FN.cbtHeight();
						if(cbtHeight <= 3) throw 'cbt1 to cbt8 should already have localName like 0b10011111';
						*/
						if(view.syntaxType === 'Blob'){ //its a Uint8Array in FN.blob, with FN.l and Fn.r being null cuz those are lazyEval of powOf2 aligned ranges of that blob.
							//viewing.tokens.push(FN.locid());
							if(!FN.blob){
								throw 'No FN.blob but view.SyntaxType==='+view.syntaxType;
							}
							let possiblyVeryBigHex = vm.bytesToHex(FN.blob, FN.blobFrom, FN.blobTo);
							//FIXME break it into at most 64 hex digits and ((call call)(call call)) etc it so its made of smaller tokens.
							earlyTokens.push('0x'+possiblyVeryBigHex); //FIXME?

							//earlyTokens.push(FN.locid());
						}else if(view.fn.n.cbtHeight()>2){
							//viewing.tokens.push('0x'+vm.cbtToHex(view.fn));
							earlyTokens.push('0x'+vm.cbtToHex(view.fn));
						}else{
							//if(!didPushLocalName){
							if(!view.fn.localName){
								//for(let i=0; i<16; i++) vm.cbt4[i].localName = '0b'+(''+(16+i).toString(2)).substring(1); //0b0000 to 0b1111
								throw 'Is a cbt that should be displayed as 0b0, 0b1, ob00, ob01, ob10, or 0b11. Bigger would display as cbtToHex. But that should be its localName, and it doesnt have one.';
							}
						}
					}else if(isSmallUtf8String){
						//utf8 bytes in a cbt. It may have content.blob or not, since thats just an optimization
						//of a complete binary tree (cbt) of vm.ops.Bit0 and vm.ops.Bit1. If it has blob, the utf8 bytes,
						//padded with a 1 bit then 0s to the next powOf2 number of bits,
						//are in content.blob in byte range content.blobFrom (inclusive) to content.blobTo (exclusive).
						//If thats at most pow(2,31)-1 bits then that bitstring size (of utf8 bytes) is in content.bize
						//unless content.bize is negative
						//in which case it hasnt computed the bize yet (bize==-2) or is not a cbt (bize==-1).
						//As of 2022-7-23 this is the first time in wikibinator203 that I'm using blob and bize
						//so there are probably some more functions that should be added to vm.Node.prototype to make this easier.
						let content = FN.r;
						let utf8Bytes = content.n.bytes();
						//FIXME quote it if it contains whitespace or ( ) { } [ ] < > , or certain other chars or depending on size.
						//If it starts with a lowercase letter or most of the other unicode chars then it can be a string literal without quotes.
						//If it starts with a capital A-Z then its a #Name. If you want other unicode chars in a #Name then just prefix with 1 of A-Z.
						let smallString = vm.utf8AsUint8ArrayToString(utf8Bytes); //TODO optimize by caching this? (this happens multiple places)
						if(2<=vm.loglev) console.log(utf8Bytes.length+' bytes ('+utf8Bytes.join(',')+') became '+smallString.length+' chars: '+smallString);
						//viewing.tokens.push('SMALLSTRING_'+smallString);
						//viewing.tokens.push(smallString); //FIXME quote it if it starts with capital A-Z or if it contains whitespace or certain other chars
						earlyTokens.push(smallString); //FIXME quote it if it starts with capital A-Z or if it contains whitespace or certain other chars
						
						//throw 'TODO use node.bytes';
					}else if(isDoubleLiteral){
						//viewing.tokens.push(''+FN.d());
						earlyTokens.push(''+FN.d());
					}else{
						throw 'TODO some other kind of literal, to code string';
					}
				//}else if(FN.o8() === vm.o8OfTypeval && FN.cur()==9){
				}else if(vm.o8IsOfTypeval(FN.o8()) && FN.cur()==9){
					//Dont include Typeval or (Typeval Type) but do include (Typeval Type Val).
					let content = FN.r;
					switch(FN.L()){
						//TODO more cases for more Typeval types that have a syntax, such as quotedStringLiteral thats not too big.
						case vm.typeDouble:
							//content.n.bytes() should be the 8 bytes of a double,
							//but use node.d() as an optimization since node.idA and node.idB (TODO)
							//will be copy of those bytes or it might have the double stored as a double.
							let doubleVal = FN.d(); //FIXME endian?
							let token = ''+doubleVal; //the normal way double is displayed in javascript and in java (which matches, except do they differ by including an e+ vs just e?).
							if(token != 'NaN' && token != '-Infinity' && token != 'Infinity'){
								//viewing.tokens.push(token);
								earlyTokens.push(token);
								isTypevalDisplayedAsLiteral = true;
							}
							//else let displayChilds happen,
							//since those overlap the #Names syntax since they start with A-Z.
						break; default:
							
							//do nothing, let displayChilds happen.
					}
				}
				//Would do both, name and define what is named that, if it was given a view.fn.localName from an earlier tostring.
				//if((!doName || !view.fn.hasDefinedBeforeUsingName) && !view.builtInName){ //!view.builtInName (such as 'S') cuz dont define below that.
			}

			//[X#(Pair abc) [X L 6 6 a a a]]

			let displayChilds = !view.hasDefinedBeforeUsingName && !view.builtInName && !isLiteral && !isTypevalDisplayedAsLiteral;
			
			//let displayPound = view.hasDefinedBeforeUsingName && (displayChilds || earlyTokens.length); //If theres a name and something will be displayed after it, put # between.
			let displayPound = view.fn.localName && (displayChilds || earlyTokens.length); //If theres a name and something will be displayed after it, put # between.
			
			if(displayPound){
				viewing.tokens.push('#');
			}
			//let set_hasDefinedBefore = false;
			if(earlyTokens.length){
				//displayedAsLiteralOrNameAlready = true;
				//not everything that goes in earlyTokens is a name. Some are literals. view.hasDefinedBeforeUsingName = true;
				//set_hasDefinedBefore = true;
				for(let token of earlyTokens){
					viewing.tokens.push(token); //early cuz delayed until #, but didnt know if would display # until displayPound is calculated.
				}
			}
			
			//if(!view.hasDefinedBeforeUsingName && !view.builtInName){ //!view.builtInName (such as 'S') cuz dont define below that.
			if(displayChilds){ //!view.builtInName (such as 'S') cuz dont define below that.
				if(view.fn.localName){
					view.hasDefinedBeforeUsingName = true;
				}
				//set_hasDefinedBefore = true;
				/*if(doName && !pushedPound){
					//# like in... [(Pair Pair) (F F) CallParamOnItself#{I#(F U) I}]
					viewing.tokens.push('#');
					//pushedPound = true;
				}*/
				
				//FIXME where to put the info that something is a (S Thing)? cuz (S (S A B) C) is {A B C} aka {{A B} C}.
				//Should that be syntaxtype 'S' or '(S' etc?
				
				let syty = view.syty();
				
				//FIXME since im changing /a/b/sum$ to a/b/sum, and /a$ to a$, there could be parsing problem with Name#a/b/sum$. I want Name# to attach to a/b/sum$, not to a.
									
				let isLastCur = FN.curriesLeft()==1;
				//These next few if/else do ops: O OO GoO D Du Bl. TODO Bl aka typed blob getter. They will often be used in vm.Mut optimization.
				//removed ops.O cuz first param is literal in a/b/c.
				//if(isLastCur && fnOp==vm.o8OfO){ //Example: /a in /a$ aka (D (O a))
				//	viewing.tokens.push('/');
				//	this.viewToStringRecurse(view.r(), viewing, syty, true); //a in (O a)
				//}else
				if(isLastCur && fnOp==vm.o8OfOO){ //Example: /a/b in /a/b/sum$
					//vm.Viewer.prototype.viewToStringRecurse = function(view, viewing, callerSyty, isRightRecursion)
					//remove first / so its a/b/c instead of /a/b/c: viewing.tokens.push('/');
					this.viewToStringRecurse(view.l().r(), viewing, syty, true); //a in (OO a b). view.l() is (OO a). view.l().r() is a.
					viewing.tokens.push('/');
					this.viewToStringRecurse(view.r(), viewing, syty, true); //b in (OO a b). view.r() is b.
				}else if(isLastCur && fnOp==vm.o8OfGoO){ //Example: (GoO a/b sum) in a/b/sum$
					this.viewToStringRecurse(view.l().r(), viewing, syty, false); //output /a/b in /a/b/sum
					//This makes vm.eval('(GoO (OO a b) c)')+'' do 'GoO /a/b/c' but dont want the GoO displayed: this.viewToStringRecurse(view.l(), viewing, syty, false); //output /a/b in /a/b/sum
					viewing.tokens.push('/');
					this.viewToStringRecurse(view.r(), viewing, syty, true); //output sum in /a/b/sum
				}else if(isLastCur && fnOp==vm.o8OfD){ //Example: (D /a/b/sum) is displayed as /a/b/sum$
					//TODO merge duplicate code between D and DGo

					//FIXME display (D a) as a$ if its 1 stringLiteral (the kind without quotes or whitespace),
					//but display as (D /a/b/sum) if its not, cuz a/b/sum$ means (DGo a/b/sum).
					//And do similar for Du vs DuGo in a/b/fnVar^.
					this.viewToStringRecurse(view.r(), viewing, syty, true); //output a/b/sum in a/b/sum$
					viewing.tokens.push('$');
				/*}else if(isLastCur && fnOp==vm.o8OfDu){ //Example: (Du /a/b/sum) is displayed as /a/b/sum^
					//FIXME "//And do similar for Du vs DuGo in a/b/fnVar^."
					this.viewToStringRecurse(view.r(), viewing, syty, true); //output a/b/fnVar in a/b/fnVar^
					viewing.tokens.push('^');
				*/
				}else if(isLastCur && fnOp==vm.o8OfDGo){
					//TODO merge duplicate code between D and DGo

					//FIXME "//And do similar for Du vs DuGo in a/b/fnVar^."
					this.viewToStringRecurse(view.r(), viewing, syty, true);
					viewing.tokens.push('$');
				/*}else if(isLastCur && fnOp==vm.o8OfDuGo){
					//FIXME "//And do similar for Du vs DuGo in a/b/fnVar^."
					this.viewToStringRecurse(view.r(), viewing, syty, true);
					viewing.tokens.push('^');
				}else if(isLastCur && fnOp==vm.o8OfDa){
					this.viewToStringRecurse(view.r(), viewing, syty, true);
					viewing.tokens.push('%'); //varName% is (Da varName).
				*/
				}else if(isLastCur && (fnOp==vm.o8OfP || fnOp==vm.o8OfPGo)){
					this.viewToStringRecurse(view.r(), viewing, syty, true);
					viewing.tokens.push('%');
				}else if(isLastCur && (fnOp==vm.o8OfBl || fnOp==vm.o8OfBlGo)){
					this.viewToStringRecurse(view.r(), viewing, syty, true);
					viewing.tokens.push('@');
				}else if(isLastCur && (fnOp==vm.o8OfG || fnOp==vm.o8OfGGo)){
					console.log('FIXME??? TODO??? (GGo ,x y) or (G x y) should display as x^y, which differs from the $ @ and % syntax as those go at end like a/b/c$');
					let viewX = view.l().r();
					let viewY = view.r();
					this.viewToStringRecurse(viewX, viewing, syty, true);
					viewing.tokens.push('^');
					this.viewToStringRecurse(viewY, viewing, syty, true);
				}else{
					switch(syty){
						case 'GV':{ //<...> //FIXME remove this? Dont remember what GV is.
							throw 'TODO';
						//break; case 'start[':
						}break; case 'IC0':{
						
							viewing.tokens.push('[]'); //empty Infcur list aka Infcur itself
						
							/*if(isRightRecursion){
								viewing.tokens.push('[]'); //empty Infcur list aka Infcur itself
							}else{
								let callerSytyIsSimilar = callerSyty=='IC0' || callerSyty=='IC+';
								if(!callerSytyIsSimilar) viewing.tokens.push('[');
								this.viewToStringRecurse(view.l(), viewing, syty, false);
								viewing.tokens.push(' ');
								console.log('start[ pushed space');
								this.viewToStringRecurse(view.r(), viewing, syty, true);
								if(!callerSytyIsSimilar) viewing.tokens.push(']');
							}*/
						
							/*
							viewing.tokens.push('['); //FIXME
							if(view.fn != ops.Infcur){
								this.viewToStringRecurse(view.l(), viewing, syty, false); //FIXME
								viewing.tokens.push(' ');
								console.log('start[ pushed space');
								this.viewToStringRecurse(view.r(), viewing, syty, true); //FIXME
							}
							viewing.tokens.push(']'); //FIXME
							*/
							
						}break; case 'IC+':{
						
							//let displayPushPop = isRightRecursion || displayPound; //FIXME does "|| displayPound" have any effect here?
							let displayPushPop = isRightRecursion || displayPound || (callerSyty != 'IC+' && callerSyty != 'IC0'); //FIXME does "|| displayPound" have any effect here?
							if(displayPushPop) viewing.tokens.push('[');
							if(view.lsyty() != 'IC0'){
								this.viewToStringRecurse(view.l(), viewing, syty, false);
								viewing.tokens.push(' ');
								if(2<=vm.loglev)console.log('[ pushed space');
							}
							this.viewToStringRecurse(view.r(), viewing, syty, true);
							if(displayPushPop) viewing.tokens.push(']');
						
							/*
							//if(!inVararg) viewing.tokens.push('['); //FIXME
							//if(view.fn != ops.Infcur){
								this.viewToStringRecurse(view.l(), viewing, syty, false); //FIXME
								viewing.tokens.push(' ');
								console.log('[ pushed space');
								this.viewToStringRecurse(view.r(), viewing, syty, true); //FIXME
							//}
							//if(!inVararg) viewing.tokens.push(']'); //FIXME
							
							/*
							if(!inVararg) viewing.tokens.push('['); //FIXME
							if(view.fn != ops.Infcur){
								this.viewToStringRecurse(view.l(), viewing, true); //FIXME
								viewing.tokens.push(' ');
								console.log('[ pushed space');
								this.viewToStringRecurse(view.r(), viewing, true); //FIXME
							}
							if(!inVararg) viewing.tokens.push(']'); //FIXME
							*/
							/*if(!inVararg){
								viewing.tokens.push('['); //FIXME
								this.viewToStringRecurse(view.l(), viewing, true);
								viewing.tokens.push(' ');
								this.viewToStringRecurse(view.r(), viewing, true); //FIXME
								//FIXME? viewToStringRecurse will do this: viewing.tokens.push(']');
								viewing.tokens.push(']'); //FIXME
							}else{
								
							}*/
						//break; case '{':
						}break; case 'S2':{
							let displayPushPop = isRightRecursion || callerSyty != 'S2' || displayPound;
							if(displayPushPop) viewing.tokens.push('{'); //FIXME
							//this.viewToStringRecurse(view.l(), viewing);
							this.viewToStringRecurse(view.l().r(), viewing, syty, false);
							viewing.tokens.push(' ');
							if(2<=vm.loglev)console.log('{ pushed space');
							this.viewToStringRecurse(view.r(), viewing, syty, true); //FIXME
							if(displayPushPop) viewing.tokens.push('}'); //FIXME
						/*break; case '{':
							if(!inVararg) viewing.tokens.push('{'); //FIXME
							//this.viewToStringRecurse(view.l(), viewing);
							this.viewToStringRecurse(view.l().r(), viewing, true);
							viewing.tokens.push(' ');
							console.log('{ pushed space');
							this.viewToStringRecurse(view.r(), viewing, true); //FIXME
							if(!inVararg) viewing.tokens.push('}'); //FIXME
						*/
						}break; case 'ST2': case 'ST3+':{
							//let displayPushPop = isRightRecursion || callerSyty != 'S2' || displayPound; //FIXME
							//let displayPushPop = isRightRecursion || callerSyty != 'S3+' || displayPound; //FIXME
							let displayPushPop = isRightRecursion || (callerSyty != 'ST2' && callerSyty != 'ST3+') || displayPound; //FIXME
							if(displayPushPop) viewing.tokens.push('<'); //FIXME
							//this.viewToStringRecurse(view.l(), viewing);
							let skipT = syty=='ST2';
							//let recurseLeft = view.l().r();
							let recurseLeft = view.l().r(); //x in (S x z)
							if(skipT){ //x is (T y). Get y.
								recurseLeft = recurseLeft.r();
							}
							let recurseRight = view.r();
							this.viewToStringRecurse(recurseLeft, viewing, syty, false);
							viewing.tokens.push(' ');
							if(2<=vm.loglev)console.log('< pushed space');
							this.viewToStringRecurse(recurseRight, viewing, syty, true); //FIXME
							if(displayPushPop) viewing.tokens.push('>'); //FIXME
						}break; case '_1':{
							//TODO instead of having a _1 syntax, just use Xyz[abc def] and Xyz:[abc def] etc syntax,
							//where lack of space (such as : instead of space or just no char) between 2 things means normal call,
							//and if its a small name (such as max 3 chars?, such as Fo For Seq _ Qes "," T etc,
							//it would (TODO) display that way automatically.
							viewing.tokens.push('_');
							this.viewToStringRecurse(view.r(), viewing, syty, true);
						//}break; case 'T1': case 'T1<>':{
						}break; case 'T1':{
							viewing.tokens.push(',');
							this.viewToStringRecurse(view.r(), viewing, syty, true);
						}break; case 'T1<>':{
							//let skipT = callerSyty==FIXMEFIXME;
							let skipT = callerSyty=='ST3+'; //The code "this.syntaxType = 'ST3+'; //skip ST2. FIXME???" below. FIXME??? This is getting tangled.
							//let skipT = false; //FIXME
							if(!skipT){
								viewing.tokens.push(',');
							}
							this.viewToStringRecurse(view.r(), viewing, syty, true);
						}break; case 'C': case 'S1': case 'ST1': case 'S_ST2': case 'S_ST3+': case 'S_T1<>':{ //C is normal call (a b c d e) aka ((((a b) c) d) e)
							if(view.builtInName){
								//FIXME always use .localName instead of builtInName?
								viewing.tokens.push(view.builtInName);
							}else{
								//let callerSytyIsSimilar = callerSyty=='C' || callerSyty=='S1';
								
								//all these sytys are displayed as (...).
								//Exclude 'S_T1<>' from callerSytyIsSimilar so theres an inner and outer <> like <<a b c> d> means {,{,a b c} d}
								//so cant merge to <a b c d> cuz that would mean {,a b c d}.
								//FIXME 2022-1-2-1130aEST when I put 'S_T1<>' in the cases here but not in similar,
								//vm.eval('<<a b c> g>')+'' -> '<,<a b c> g>' which wrongly has an extra ','.
								//vm.eval('(L <<a b c> g>)')+'   '+vm.eval('(R <<a b c> g>)')+'       '+vm.eval('<<a b c> g>')
								// --> '(S ,<a b c>)   g       <,<a b c> g>', which shows it does not have an extra ',' in the fns,
								//so its probably a tostring bug similar to the lack of isFoldL where it should fold L aka fold the T/, so --> <<a b c> g>.
								//Maybe the problem is in this code[[[
								//	}break; case 'T1': case 'T1<>':{
								//	viewing.tokens.push(',');
								//	this.viewToStringRecurse(view.r(), viewing, syty, true);
								//]]]
								let callerSytyIsSimilar = callerSyty=='C' || callerSyty=='S1' || callerSyty=='ST1' || callerSyty == 'S_ST2' || callerSyty == 'S_ST3+';
								
								let displayPushPop = isRightRecursion || !callerSytyIsSimilar || displayPound;
								if(displayPushPop) viewing.tokens.push('(');
								this.viewToStringRecurse(view.l(), viewing, syty, false);
								viewing.tokens.push(' ');
								if(2<=vm.loglev)console.log('( pushed space');
								this.viewToStringRecurse(view.r(), viewing, syty, true);
								if(displayPushPop) viewing.tokens.push(')');
							}
						}break; default:{
							throw 'Unknown syntaxtype: '+syty;
						}
					}
				}
				//so dont define it again, just use name, until the next tostring which should set
				//all relevant hasDefinedBeforeUsingName to false so they get defined again.
				//view.hasDefinedBeforeUsingName = true;
			}
			/*if(set_hasDefinedBefore){
				//do it here, instead of in the above code, in case of things like [X#(Pair L) [X L]]
				//where [X occurs again inside a call of [X aka (Infcur (Pair L)). Wait until thats defined.
				//No, that didnt fix it. Problem is probably that it gets set for things that dont have names,
				//just that have been defined before,
				//so there was no name of the [...] even though there was a name of the stuff inside it.
				//I need to choose to either generate a name or display it multiple times.
				view.hasDefinedBeforeUsingName = true;
			
				/* Bugs related to set_hasDefinedBefore...
				
				[X#(Pair abc) [ X X Pair X]]
				Notice the space in "[ X" where another X should be.

				It appears this only happens with []. Maybe it has something to do with "[]" being defined differently in "if(view.fn.localName){ " ... viewing.tokens.push('[]'); in the ELSE of "if(view.fn != ops.Infcur){".
				Or maybe something about this code[
					if(view.lsyty() != 'IC0'){
						this.viewToStringRecurse(view.l(), viewing, syty, false);
						viewing.tokens.push(' ');
						if(2<=vm.loglev)console.log('[ pushed space');						}
				]


				Wikibinator203DirectedGraphUI.html
				[X#(Pair abc) [X L]]
				X = R(L(lastEval))
				X2 = R(L(R(lastEval)))
				X == X2 ... returns true.
				X+''
				'X#(Pair abc)'
				X2+''
				'X#(Pair abc)'
				lastEval+''
				'[X#(Pair abc) [ L]]'

				So how did the fn.localName get missing? Or is it a missing localName of the IC0 or IC+ aka [...] that the X is in?

				When its on "if(view.lsyty() != 'IC0'){ this.viewToStringRecurse(view.l(), viewing, syty, false);",
				view.fn.n.l+'' the second time...
				view.fn+''
				'[X#(Pair abc) L]'
				Recursing into that, 
				''+FN.lam
				'[X#(Pair abc)]'
				and displayChilds is false but should be true.. kind of... It should not display the left child which is [] but should display the right child which is X.
				let displayChilds = !view.hasDefinedBeforeUsingName && !view.builtInName && !isLiteral && !isTypevalDisplayedAsLiteral;
				view.hasDefinedBeforeUsingName is true, so displayChilds is false.
				The code string in is "[X#(Pair L) [X L]]" aka (Infcur (Pair L) (Infcur (Pair L) L))
				so it actually has displayed (Infcur (Pair L)) before and is still in that parsing of Infcur aka [...] when it finds a prefix of what its been parsing inside itself.
				[X#(Pair L) [(Pair L) L]] displays as [X#(Pair L) [ L]].

				[X#(Pair L) [X L]]

				if(set_hasDefinedBefore)...
				
				2022-12-13-935aEST Fixed this by checking doName in the displayChilds condition.
				Its not enough that it existed earlier in the code. It must also have been named, else display duplicate.
				//let displayChilds = !(view.hasDefinedBeforeUsingName && doName) &&
				Now "[X#(Pair L) [(Pair L) L]]" and "[X#(Pair L) [X L]]" both display as "[X#(Pair L) [X L]]".
			}*/
			
		};
		
		
		//throw 'TODO';
		/*
		TODO should the fields in Mut (or 1 char abbrevs of them) be part of the datastruct in [...state...]?
		Example: [[valMap playerball5 xv 3.45][...][...]]
		If define = (which is just a name of some lambda, maybe make it an opcode)
		so that everything in [...state...] if prefixed by = sets that in another [...state...],
		then this is a flexible design and easy to read.
		=[valMap playerball5 xv 3.45]
		=[valCbt playerball5 (TypevalB application/x-IEEE754-doubles 0x4012449ba5e353f84012449ba5e353f84012449ba5e353f88000000000000000)]
		..
		How about a mindmapEdge type, like in the listweb mindmap,
		which can be viewed as a sparse weighted matrix between objects...
		but can that be made efficiently using the objects as they are? And would I want more than 1 mindmap at a time?
		//? [mindmap playerball5 2.34 thethingxyz]
		Or could have those vals be a [] list instead of making a sparse matrix datastruct for it.
		Mindmap might be displayed between many fns/lambdas as a certain color
		of edge (or same color as the node is displayed) but only from the selected node
		cuz otherwises it could be too many edges on screen.
		The listweb mindmap software (newest version in https://github.com/benrayfield/occamsworkspace
		or i have local updates havent put on github in too long as of 2022-8-25)
		will be very important for organizing lambdas cuz its a way to organize many thousands of lists of lists of lists...
		and if x is in y's list then y is in x's list and the lists can be reordered by mouse drag,
		and notes can be written or copy/pasted about any node.
		Imagine dragging fns/lambdas into and out of such lists (including copying them by ptr)
		and gathering thousands of fns over time that you use in various combos.
		But that doesnt necessarily need its own opcodes. The opcodes are already turingcomplete.
		..
		The mindmap is more of a longterm thing. The vm.Mut system is normally for very short times
		such as 1/60 second between video frames, or  .0001 second, or maybe in some rare cases a few seconds or more,
		so vm.Mut should probably NOT have such a sparse matrix built in between Muts.
		*
		
		[
			[playerball5 valMap xv 3.45]
			[playerball5 valNum 2]
			[playerball5 valFn (...)]
			[...]
			[...]
		]
		
		Or should there be different =D =fn =KV =ObKeyVal etc (but shorter names for those)?
		Cuz i dont want to write =[playerball5 ,valMap ,xv ,3.45] in code.
		I want to write something like =[playerball5 ,xv ,3.45].
		Also, i dont want to put ',' (aka T) before them in the [...state...].
		
		(=okv ob key val)
		(=of ob fn)
		(=oe ob num)
		(=oc ob typedblob)
		*/
		
		/*
		[
			(=m ob key val) //Mut.valMap[Mut]->Mut. ob, key, and val must all be deduped. Both js {} and js [] go here.
			(=f ob fn) //ob deduped, fn may be dup.
			(=n ob num) //ob deduped, num probably deduped cuz numbers are so small it happens automatically, but not technically required. Maybe this should be raw 64 bits, implying double.
			(=b ob typedblob) //ob deduped, typedblob may be dup. typedblob may be Uint8Array, Float32Array, etc.
		]*/
		
		
		//TODO 2012-12-14 "state" should use Treemap/EmptyTreemap or vm.Mut optimization of it.
		//
		//val is typedblob is normally something like
		//(TypevalB application/x-IEEE754-doubles 0x4012449ba5e353f84012449ba5e353f84012449ba5e353f88000000000000000)
		//aka a double[3] with 3 specific doubles in it and padding to next powOf2 size.
		//Might also be a TypevalC (cbt). TypevalB (bitstring) is also about a cbt but views it as bitstring then padding.
		vm.stateKeyTypedblob = function(state, key, typedblob){
			throw 'TODO see stateGet';
		};
		
		//TODO 2012-12-14 "state" should use Treemap/EmptyTreemap or vm.Mut optimization of it.
		//
		vm.stateObKeyVal = function(state, ob, key, val){
			throw 'TODO see stateGet';
		};
		
		//TODO 2012-12-14 "state" should use Treemap/EmptyTreemap or vm.Mut optimization of it.
		//
		//put key=val
		//a [...state...] list
		vm.stateKeyVal = function(state, key, val){
			throw 'TODO see stateGet';
		};
		
		//TODO 2012-12-14 "state" should use Treemap/EmptyTreemap or vm.Mut optimization of it.
		//
		//get val of it
		vm.stateKey = function(state, key){
			if(state.n.hasAtMost7Params()) return U;
			throw 'TODO check state.n.r for being something like =[key val] or (ObVal key val) or (ObKeyVal ob key val), or something like that. TODO i havent decided on all the setter and getter types.';
		};
		
		//syntax type
		//Fills in this.syntaxType recursively, down to whatever is the smallest displayable part,
		//like U/theUniversalLambda or 3.45 a double literal, etc. Stops where this.syntaxType exists.
		//vm.view.fillInSyntaxTypeRecursively = function(){
		vm.View.prototype.syty = function(){
			if(this.syntaxType) return this.syntaxType;
			let fn = this.fn;
			

			if(fn.n.isLeaf()){
				this.syntaxType = 'U';
				//dont call lsyty rsyty or lrsyty past U cuz might infloop
				
			//UPDATE: <a b c d> means {,a b c d} and will have sytys similar to S0 S1 S2,
			//that mean the innermost (S x y) is (S ,x y) aka (S (T x) y). Call that ST1 ST2 ST3+.
			//ST1 is (S ,x).
			//ST2 is (S ,x y), displayed as <x y>.
			//ST3+ is {,x y z} (or more after the z) displayed as <x y z>. Theres not an extra , cuz that would be {,{,x y} z} which is wrong.
			//ST3 can have ST3 or ST2 as its left_then_right child... (AnST3+ AnST2or3+ y).
			//OLD: TODO GV aka getvar syntax, displayed as < ... >	
			}else if(!fn.n.l && fn.n.blob){
				//is a view of a Uint8Array without childs (they are lazyEvaled)
				//if(vm.expandBigBlobsInToString){
				//	
				//}else{
					this.syntaxType = 'Blob';
				//}
				//FIXME the type should still be that (or todo change both to 'Bl'?) even if the left and right childs have been evaled so fn.n.l exists.
			}else if(fn == ops.S){
				this.syntaxType = 'S0';
			}else if(fn == ops.Infcur){
				this.syntaxType = 'IC0';
			}else if(fn == ops.Seq){
				this.syntaxType = '_0'; //FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
			}else if(fn == ops.T){
				this.syntaxType = 'T0'; //FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
			}else{
				let lsyty = this.lsyty();
				let rsyty = this.rsyty();
				//let lrsyty = this.lrsyty();
				if(lsyty == 'S0'){
					if(rsyty == 'T1<>'){
						/*Fixing bug 2022-1-2...
						vm.eval('<<a b c> g>')+'' -> '{,<a b c> g}'
						Thats correct but not normed. It should be -> '<<a b c> g>'.
						Syty of ,<a b c> is T1<>.
						If left syty is S0 (is vm.ops.S) and rsyty (right syty) is 'T1<>' then self syty should be S_ST2, meaning it has the T/,
						which is unlike ST3+ that does not add a T/, .
						
						S_ST2 might be wrong. Should this.syntaxType be ST1? Figure it out...
						*/
						//this.syntaxType = 'S_ST2'; //Example: (S ,<a b c>)
						//this.syntaxType = 'ST1'; //Example: (S ,<a b c>)
						this.syntaxType = 'S_T1<>'; //Example: (S ,<a b c>)
					}else if(rsyty == 'ST2'){
						this.syntaxType = 'S_ST2'; //Example: (S <a b>). If call that on c, you get <a b c> which is instantly halted.
					}else if(rsyty == 'ST3+'){
						this.syntaxType = 'S_ST3+'; //Example: (S <a b c d>). If call that on e, you get <a b c d e> which is instantly halted.
					}else if(rsyty == 'T1'){
						//TODO merge with "if(rsyty == 'T1<>')" above?
						this.syntaxType = 'ST1'; //do isFoldL so it doesnt display the T but displays <...> around it.
					}else{
						this.syntaxType = 'S1';
					}
				}else if(lsyty == 'S1'){
					this.syntaxType = 'S2';
				}else if(lsyty == 'ST1'){
					this.syntaxType = 'ST2';
				}else if(lsyty == 'ST2' || lsyty == 'ST3+'){
					this.syntaxType = 'ST3+';
				}else if(lsyty == 'S_ST2' || lsyty == 'S_ST3+'){ //Example S_ST2: (S <a b>). Example S_ST3+: (S <a b c d>).
					this.syntaxType = 'ST3+';
				}else if(lsyty == 'S_T1<>'){
					this.syntaxType = 'ST3+'; //skip ST2. FIXME???
					//this.syntaxType = 'ST2'; //FIXME??
				}else if(lsyty == 'IC0' || lsyty == 'IC+'){
					this.syntaxType = 'IC+';
				}else if(lsyty == '_0'){ //FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
					this.syntaxType = '_1';
				}else if(lsyty == 'T0'){ //FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
					if(rsyty == 'ST2' || rsyty == 'ST3+'){
						//Fixing (TODO verify)... Bug 2023-1-2 vm.eval('{,<a b c <d e f> g> b}')+'' -> '<a b c <d e f> g b>'
						//vm.eval('{,[a b c <d e f> g] b}')+'' -> '<[Abc#[a b c] <d e f> g] b>', which is correct.
						//It appears the problem is syty='ST1' happens without checking whats in the T/,
						//which is another <...>, aka a ST2 or ST3+. Dont make ST1 if whats right of the T is a ST2 or ST3+.
						this.syntaxType = 'T1<>' //so know not to make a ST2 from it, cuz that would be an extra T/,
					}else{
						this.syntaxType = 'T1';
					}
					//this.syntaxType = 'T1';
				}else{
					this.syntaxType = 'C'; //normal call (a b c d e) aka ((((a b) c) d) e)
				}
			}
			
			/*
			let fnL = this.fn().l;
			if(fn().isLeaf()){
				this.syntaxType = 'U';
			//}else if(node.l == ops.S){
				//this.syntaxType = 'S';
			}else if(fnL().l == ops.S){
				this.syntaxType = '{';
			//}else if(fn == ops.Infcur || this.l().SyntaxType()=='['){
			//	this.syntaxType = '[';
			}else if(fnL == ops.Infcur){
				this.syntaxType = 'start[';
			}else if(this.l().SyntaxType()=='[' || this.l().SyntaxType()=='start['){
				this.syntaxType = '[';
			}else if(fnL == ops.Seq){
				this.syntaxType = '_'; //FIXME use ops.Seq.builtInName which is '_'?
			}else if(fnL == ops.T){
				this.syntaxType = ','; //FIXME use ops.T.builtInName which is ','?
			//TODO < > for ? and ?2 aka the variants of GetVar etc.
			}else{
				this.syntaxType = '('; //FIXME could be { [ <, which are all views of a larger number of (.
			}
			*/
				
			/*}else if(node.IsCbt() && cbtheight is at most 6 (size of double/long)){
				TODO
			}else{
				need to know to reuse its localName vs if this is the first display of it.
				TODO should there be a ToStringing/Stringer/Viewing class that remembers those things?
				TODO should View.syntaxType have to care if its the first or later tostring? could do that separately.
				
				
			}
			Fills in this.syntaxType recursively, down to whatever is the smallest displayable part, like U/theUniversalLambda or 3.45 a double literal, etc.
			*/
			
			return this.syntaxType;
		};
		
		
	
		
		
		
		
		//left child syntax type
		vm.View.prototype.lsyty = function(){
			return this.l().syty();
		};
		
		//right child syntax type
		vm.View.prototype.rsyty = function(){
			return this.r().syty();
		};
		
		//right child of left child syntax type, like the syty of X in ((S X) Y) aka (S X Y) aka {X Y}.
		vm.View.prototype.lrsyty = function(){
			return this.l().r().syty();
		};
		
		//get View of fn's left child
		vm.View.prototype.l = function(){
			return this.viewer.view(this.fn().l);
		};
		
		//get View of fn's right child
		vm.View.prototype.r = function(){
			return this.viewer.view(this.fn().r);
		};
		
		//creates or reuses the same vm.View of the same (by ===) fn,
		//which means the fn can be duplicate forest shape as long as it has different idA idB blobFrom blobTo.
		vm.Viewer.prototype.view = function(fn){
			let ret = this.views.get(fn);
			if(!ret) this.views.set(fn, ret = new vm.View(this,fn));
			return ret;
		};
		
		//FIXME as of 2022-9-8 ive been using fn.n.localName instead of aView.localName,
		//and in Wikibinator203DragAndDropTree.html its using fn.n.nameEtc().
		vm.View.prototype.setLocalName = function(localName){
			if(!localName) throw 'localName='+localName;
			let v = this.viewer.localNameToView[localName];
			if(v == null){
				this.localName = localName;
			}else{
				if(v == this){
					if(this.localName != localName){
						delete this.viewer[this.localName];
						this.viewer[localName] = this;
						this.localName = localName;
					}
				}else{
					throw 'Name already used (by a different View): '+localName;
				}
			}
		};
		
		//returns a string without comments
		vm.Viewer.prototype.removeComments = function(wikibinator203CodeString){
			if(wikibinator203CodeString.includes('//') || wikibinator203CodeString.includes('/*')) throw 'TODO';
			return wikibinator203CodeString;
		};
		
		//called by tokenize, to get the string literals out to avoid tokenizing inside them.
		vm.Viewer.prototype.tokenizeStringLiterals = function(wikibinator203CodeString){
			if(wikibinator203CodeString.includes("'")) throw 'TODO';
			return [wikibinator203CodeString];
		}
		
		//key is char. val is true. these are not for splitting in string literals, just for the parts of code between them.
		vm.Viewer.prototype.simpleSplitCharsSet = {};
		for(let ch of '#:_,()[]{}<> \t\r\n') vm.Viewer.prototype.simpleSplitCharsSet[ch] = true;
		//for(let ch of '#:_,()[]{}<>? \t\r\n') vm.Viewer.prototype.simpleSplitCharsSet[ch] = true;
		//FIXME maybe . shouldnt be a splitChar like in .varA.b.cde if its also going to be used in number literals like 3.4 .
		
		//code thats before, between, or after string literals -> list of tokens.
		vm.Viewer.prototype.tokenizeBetweenStringLiterals = function(partOfWikibinator203CodeString){
			let tokens = [];
			let s = ' '+partOfWikibinator203CodeString+' ';
			let from = 0, toExcl = 0;
			let splitSet = this.simpleSplitCharsSet;
			while(from < s.length){
				do{
					toExcl++
				}while(toExcl < s.length-1 && !splitSet[s[toExcl-1]] && !splitSet[s[toExcl]]);
				//let token = s.substring(from,to).trim();
				let token = s.substring(from,toExcl);
				//if(token.length) tokens.push(token); //dont include whitespace
				tokens.push(token);
				from = toExcl;
			}
			let startIndex = tokens[0]==' ' ? 1 : 0;
			let endIndexExcl = tokens[tokens.length-1]==' ' ? tokens.length-1 : tokens.length;
			let tokensButSomeNeedMerge = tokens.slice(startIndex,endIndexExcl);
			//next, merge # onto the end of whatever token came just before it, like AName#(...) or A#a:B#b:C#c
			tokens = [];
			for(let token of tokensButSomeNeedMerge){
				if(token == '#'){
					if(!tokens.length) throw 'cant start with #. It goes after a Name# or for CommentedFunc (or what was that op called) its Name##(...).';
					tokens[tokens.length-1] += token;
				}else{
					tokens.push(token);
				}
			}
			return tokens;
		}
		
		//returns list of strings. string literals start with ' such as returns js list ["(", "Concat", "'hello wor'", "'ld'"].
		vm.Viewer.prototype.tokenize = function(wikibinator203CodeString){
			let code = wikibinator203CodeString;
			code = this.removeComments(code);
			let bigTokens = this.tokenizeStringLiterals(code);
			let tokens = [];
			for(let i=0; i<bigTokens.length; i++){
				let bigToken = bigTokens[i];
				if(bigToken.startsWith("'")){ //is string literal. include it as it is.
					tokens.push(bigToken);
				}else{
					tokens.push(...this.tokenizeBetweenStringLiterals(bigToken));
				}
			}
			return tokens;
		};
		
		//vm.strIsAllWhitespace = s=>(s==0);
		vm.strIsAllWhitespace = str=>/^\s*$/.test(str);
		vm.strContainsWhitespace = str=>/\s/.test(str);
		//unlike FnIsAllWhitespace which would better be made of combos of U (and maybe optimized using an Evaler) than part of vm.
		
		//used by Viewer.eval and Viewer.parse
		vm.Parsing = function(tokens){
			//tokens[from] is first token to eval. returns when that opening token (or it might be just 1 token by itself) is closed
			this.tokens = tokens;
			this.from = 0;
			this.toExcl = 0;
			
			//this needs to be set (in vm.eval normally) before parsing, since it counts down.
			//FIXME this isnt used? It was but i probably commentedout that code when it started working. Bring it back,
			//cuz likely something could infinite loop in parsing if theres some possible input?
			this.maxParseSteps = 0;
			
			//empty string evals to identityFunc. Whatever is parsing.fn gets called on the next thing parsed, and replace it with that.
			//this.fn = vm.identityFunc;
			this.stack = [vm.identityFunc]; //of fns. When parsing finishes, there is 1 thing on the stack, the fn the wikibinator203 code evaled to.
		};
		
		
		//FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
		vm.Parsing.prototype.isUnaryToken = function(token){
			//: is like not having whitespace between 2 things: _[a b c] vs _:[a b c] vs (_ [a b c]) are all equal. TODO add those syntaxes.
			//return token=='_' || token=='?' || token==',' || token==':';
			//FIXME should '.' be a unary token? it occurs in 2.34 but is not meant that way. should only be if its in prefix.
			return token=='_' || token==',' || token==':';
		};

		vm.Parsing.prototype.toString = function(token){
			return '[Parsing from='+this.from+' toExcl='+this.toExcl+' toklen='+this.tokens.length+' stacklen='+this.stack.length+' tokens='+JSON.stringify(this.tokens)+' maxParseSteps='+this.maxParseSteps+']';
		};
		
		vm.Parsing.prototype.stackToString = function(){
			let st = '';
			let count = 0;
			for(let fn of this.stack){
				if(st) st += ' .... ';
				st += fn+'@'+(count++);
			}
			//fromTok+'@'+parsing.from+toTok+'@'+(parsing.toExcl-1)
			return st;
		};
		
		vm.Parsing.prototype.onParsedFn = function(fn){
			if(!this.stack.length) this.stack.push(fn);
			else this.stack.push(this.stack.pop()(fn));
		};
		
		//FIXME should this include 'Name#' and ':' which are not lambdas by themself?
		//a lone token is push and pop of itself, so is 1 less params after it than isUnaryToken.
		//FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
		//The unaryTokens include '_' (aka Seq) and ',' (aka T)
		//and maybe '?' but that might be more similar to # syntax and related to <...>.
		//See vm.opInfo for those strings.
		//return token.length != 1 || '_?,(){}[]<>'.includes(token);
		//
		vm.isLoneToken = token=>(!vm.strIsAllWhitespace(token) && !vm.isListBorderToken[token]);
		
		//token is ignored other than to stop the text before and after it from being merged into 1 token,
		//like X:Y:hello is parsed as (X (Y hello)) instead of XYhello, for unary syntax starting from the right and going left.
		//Normally that syntax is used with , _ and a few others, like ,hello is (, hello) or _[a b c] is (_ [a b c]),
		//but that built in syntax only works for a few symbols. For others you can use : or ( ).
		vm.isIgnoreToken = token=>(token==':');
			
		vm.Parsing.prototype.isLoneToken = function(token){
			return vm.isLoneToken(token);
		};
		
		//a lone token is push and pop of itself, so is 1 less params after it than isUnaryToken.
		//FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
		//The unaryTokens include '_' (aka Seq) and ',' (aka T)
		//and maybe '?' but that might be more similar to # syntax and related to <...>.
		//See vm.opInfo for those strings.
		//
		vm.Parsing.prototype.isLoneToken = function(token){
			//include whitespace (FIXME theres lots of kinds of unicode whitespace, but those 4 '\t\r\n ' are usually enough. Default: \n instead of \r or \r\n.
			
			//Example: vm.ops.S and vm.opAbbrevs._->ops.Seq and vm.opAbbrevs[',']->ops.T
			//return token.length != 1 || '\t\r\n _?,'.includes(token) || vm.ops[token] || vm.opAbbrevs[token] || token.endsWith('#'); //TODO get these from vm.opInfo.prefix
			//return token.length != 1 || '\t\r\n _?,'.includes(token) || vm.ops[token] || vm.opAbbrevs[token] || token.endsWith('#'); //TODO get these from vm.opInfo.prefix
			return !vm.strIsAllWhitespace(token) && !vm.isListBorderToken[token];
			//return token.length != 1 || '_?,(){}[]<>'.includes(token);
		};
		
		vm.Parsing.prototype.isPushToken = function(token){
			//return this.isUnaryToken(token) || token=='(' || token=='{' || token=='[' || token == '<';
			//FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
			return token=='(' || token=='{' || token=='[' || token == '<';
		};

		//TODO this shouldnt be needed in vm, instead just in vm.Parsing, but 2022-7-30 added vm.filterTokens func that needed to call this. Its getting tangled. Organize it.
		vm.isPopToken = token=>(token==')' || token=='}' || token==']' || token == '>');
		
		vm.Parsing.prototype.isPopToken = function(token){
			return vm.isPopToken(token);
			//return token==')' || token=='}' || token==']' || token == '>';
		};
		
		//Examples: 'S', 'Pair' (which are builtInName), or TODO if its a localName.
		//TODO make all builtInName be localName, and just derive those names instead of hardcoding them.
		vm.Parsing.prototype.loneTokenToFn = function(loneToken){
			if(loneToken == 'U') return vm.u;
			//FIXME TODO also localNames, and use the names in Viewer not in vm.ops,
			//and dont have builtInNames and instead derive all builtInNames as localNames.
			//builtInNames and localNames dont change ids. globalIds are computed deterministicly from forest shape only.
			//local ids (such as idA idB blobFrom blobTo (128 bits)) are computed nondeterministicly from forest shape as optimization.
			if(ops[loneToken]) return ops[loneToken]; //Example: T Seq
			if(opAbbrevs[loneToken]) return opAbbrevs[loneToken]; //Example: , instead of T, _ instead of Seq
			if(loneToken == 0){ //is all whitespace
				throw 'Dont call loneTokenToFn if its all whitespace cuz theres no fn for it. Its part of syntax between fns etc. loneToken=['+loneToken+'] inside the [...]'
			}
			
			//FIXME For now just do builtInName
			//let ret = ops[loneToken];
			//TODO theres some field in ops that gets the '_' '?' ',' etc. Which field? For now just hardcode those few here:
			//FIXME no these are unary tokens _ ? ,: if(loneToken == '_') return ops.Seq;
			//FIXME no these are unary tokens _ ? ,: //TODO if(loneToken == '?') return ops.GetVar; //FIXME theres a few kinds of getvar, such as get as double, ? vs ?2 etc.
			//FIXME no these are unary tokens _ ? ,: if(loneToken == ',') return ops.T;
			//if(!ret) throw 'FIXME do localNames too, loneToken='+loneToken;
			//return ret;
			
			//TODO if loneToken starts with a lowercase letter and has no whitespace, then its a string literal (utf8? utf16? TODO CHOOSE).
			
			throw 'TODO, loneToken='+loneToken;
		};
		

		
		vm.Parsing.prototype.pay1ParseStep = function(){
			if(this.maxParseSteps <= 0) throw 'Parser is broken. Ran out of parsing.maxParseSteps. If this isnt a call of vm.eval/vm.viewer.eval then caller should set maxParseSteps to vm.viewer.maxParseStepsForNumTokens(yourTokens.length). parsing='+this;
			this.maxParseSteps--;
		};
		
		//TODO reorganize similar code between here and in Parsing.
		vm.isPushToken = token=>!!vm.pushTokenToPopToken[token];
		
		vm.isPopToken = token=>!!vm.popTokenToPushToken[token];
		
		vm.pushTokenToPopToken = {
			'(': ')',
			'{': '}',
			'[': ']',
			'<': '>',
		};
		
		vm.popTokenToPushToken = {}; //inverse map of pushTokenToPopToken
		for(let pushToken in vm.pushTokenToPopToken){
			vm.popTokenToPushToken[vm.pushTokenToPopToken[pushToken]] = pushToken;
		}
		
		vm.isListBorderToken = {};
		for(let token in vm.pushTokenToPopToken){
			vm.isListBorderToken[token] = true;
			vm.isListBorderToken[vm.pushTokenToPopToken[token]] = true;
		}
		
		vm.syntaxNeedsColorBetween2Chars = (charA,charB)=>(!isListBorderToken[charA]&&!isListBorderToken[charB]);
		
		vm.Parsing.prototype.isMatchingPushAndPopTokens = function(pushToken, popToken){
			switch(pushToken){
				case '(':
					return popToken == ')';
				case '{':
					return popToken == '}';
				case '[':
					return popToken == ']';
				case '<':
					return popToken == '>';
				default:
					return false;
			}
		};
		
		vm.Parsing.prototype.pushFn = function(fn){
			if(2<=vm.loglev)console.log('pushFnSTART stackSize='+this.stack.length);
			this.stack.push(fn);
			if(2<=vm.loglev)console.log('pushFnEND stackSize='+this.stack.length);
			return undefined;
		};
		
		vm.Parsing.prototype.popFn = function(){
			if(this.stack.length < 2) throw 'About to popFn, and parsing.stack.length=='+this.stack.length+' but must always be at least 1.';
			return this.stack.pop();
		};
		
		//pops 2 fns. pushes 1 fn, by func(param)->ret, 3 fns.
		vm.Parsing.prototype.popPopPushFnByCall = function(){
			if(2<=vm.loglev)console.log('popPopPushFnByCallSTART stackSize='+this.stack.length);
			if(this.stack.length < 2) throw 'stack.length='+stack.length+' and cant pop last thing on stack';
			let param = this.stack.pop();
			let func = this.stack.pop();
			//console.log('parsing, about to call (look for ENDCALL) '+func+' on '+param);
			if(2<=vm.loglev)console.log('parsing, about to call (look for ENDCALL) func(param)');
			this.stack.push(func(param));
			if(2<=vm.loglev)console.log('ENDCALL');
			if(2<=vm.loglev)console.log('popPopPushFnByCallEND stackSize='+this.stack.length);
			return undefined;
		};
		
		//vm.Parsing.prototype.logStackSizeEtc = function(){
		//	console.log('STACKSIZE '+parsing.stack.length+' maxParseStepsLeft='+parsing.maxParseSteps);
		//};

		/*
		//string -> fn.
		vm.Viewer.prototype.eval = function(wikibinator203CodeString){
			let code = wikibinator203CodeString;
			let tokensStartAs = this.tokenize(code);
			if(!tokensStartAs.length) return Ident; //this should happen automatically? can this line be commentedout?
			tokens = ['(']; //Parser.parse needs this
			tokens.push(...tokensStartAs);
			tokens.push(')'); //Parser.parse needs this
			
			if(2<=vm.loglev)console.log('TOKENS: '+tokens.join(' .. '));
			let parsing = new vm.Parsing(tokens);
			//maxParseSteps is for things that dont parse at runtime in user code,
			//or bugs in the parser while I'm still designing the parser.
			parsing.maxParseSteps = this.maxParseStepsForNumTokens(tokens.length);
			if(2<=vm.loglev)console.log('eval starting, maxParseSteps='+parsing.maxParseSteps);
			this.parse(parsing);
			if(parsing.stack.length != 1) throw 'parsing.stack.length should be 1 but is '+parsing.stack.length;
			//this part of stack started as vm.identityFunc (F U) but should have replaced it,
			//unless the code is empty in which case its identityFunc aka vm.eval('')->vm.identityFunc.
			//Otherwise, identityFunc is called on whatever it does first/last on stack, so returns that.
			//TODO make an Evaler for identityFunc.
			
			//Remember, identityFunc is optimized by this, so its fast enough to use it and L R etc as lambdas.
			//This is code from near the end of this file.
			//l().pushEvaler((vm,func,param)=>(param().l));
			//r().pushEvaler((vm,func,param)=>(param().r));
			//vm.identityFunc().pushEvaler((vm,func,param)=>param);
			//TODO change to someFunc.n.stuff, instead of someFunc().stuff .
			
			return parsing.stack[0];
		};
		*/
		
		//TODO move this func to Parsing class?
		vm.Viewer.prototype.maxParseStepsForNumTokens = function(numTokens){ return 5+3*numTokens; };
		
		//FIXME what about λ (lowercase lambda) vs Λ (capital lambda) and other codepoints?
		vm.isCapitalLetter = x=>/^([A-Z]|Λ)$/.test(x);
		//vm.isCapitalLetter = x=>/^[A-Z]$/.test(x);
		
		//isCapitalLetter or 1 of these: ~ ! @ $ % ^ & * + =, or other chars on a common qwerty keyboard that arent syntax chars (# , etc)
		//If you want to use the many unicode chars as names, prefix it by any of those, such as Nこんにちは世界.
		//FIXME keep this in sync with vm.isUnaryToken or check that too.
		vm.charIsNamePrefix = x=>/^([A-Z]|\Λ|\λ|\~|\!|\@|\$|\%|\^|\&|\*|\+|\=|\,|\_)$/.test(x);
		//vm.charIsNamePrefix = x=>/^([A-Z]|\Λ|\λ|\~|\!|\@|\$|\%|\^|\&|\*|\+|\=|\,|\_|\?)$/.test(x);
		
		/*
		//such as 'Aname#' in 'AName#(S T T)'. It used to be #Aname, but cuz of the order of parsing in : syntax,
		//I'm putting name first, so can A#a:B#b:C#c, and in that case A means (a:b:c) and B means (b:c) and C means c.
		vm.numberOf
		vm.isDefineNameToken
		*/
		
		//This is for #Names. Theres no limit on names in a Lambda or MutLam param list,
		//as those can be any lambdas even if they arent strings. This takes a string param.
		//arbitrary length. TODO what should this be?
		//This is in units of utf16 chars like javascript and java strings use.
		vm.maxLocalNameChars = 65;
		
		//This is for #Names. Theres no limit on names in a Lambda or MutLam param list,
		//as those can be any lambdas even if they arent strings. This takes a string param.
		vm.isValidLocalName = name=>(0<name.length && name.length<=vm.maxNameChars && !vm.strContainsWhitespace(name) && vm.charIsNamePrefix(name[0]));
		
		//returns a [] of ints, same size as tokens list. The int at '(' points at index of ')'. The int at ')' points at index of '(',
		//and same for [ ] { } < > etc. Everything else points at itself, such as ' ', ':', or 'Name#'.
		vm.tokensListToPushPopPointers = tokens=>{
			let ints = [];
			for(let i=0; i<tokens.length; i++) ints.push(-1);
			vm.tokensListToPushPopPointers_internal(tokens, {i:0}, ints); //fill ints
			return ints;
		};
		
		//start with vars being {i:0} and it modifies that to count up to tokens.length while filling ints.
		//ints.length===tokens.length.
		vm.tokensListToPushPopPointers_internal = (tokens,vars,ints)=>{
			while(vars.i<tokens.length){
				/*while(vars.i<tokens.length && !vm.isListBorderToken[tokens[vars.i]]){ //listbordertokens as of 2022-12-14 are [ ] { } ( ) < >
					ints[vars.i] = vars.i; //"Everything else points at itself, such as ' ', ':', or 'Name#'."
					vars.i++;
				}*/
				if(vars.i === tokens.length){
					break;
				}
				if(vm.isPopToken(tokens[vars.i])){
					break;
				}else if(vm.isPushToken(tokens[vars.i])){
					let observedPushTokenI = vars.i;
					let observedPushToken = tokens[observedPushTokenI];
					vars.i++;
					let expectPopToken = vm.pushTokenToPopToken[observedPushToken];
					while(vars.i<tokens.length && !vm.isPopToken(tokens[vars.i])){
						if(vm.isPushToken(tokens[vars.i])){
							vm.tokensListToPushPopPointers_internal(tokens,vars,ints);
						}else if(vm.isPopToken(tokens[vars.i])){
							//throw 'Shouldnt be popToken='+tokens[vars.i]+' at i='+vars.i;
							break; //ok if its expectPopToken, else will throw
						}else{
							ints[vars.i] = vars.i; //point at itself. its a ' ', ':', or 'Name#' etc.
							vars.i++;
						}
					}
					let popI = vars.i;
					let observedPopToken = tokens[popI];
					vars.i++;
					if(observedPopToken != expectPopToken){
						throw 'for observedPushToken='+observedPushToken+' (i='+observedPushTokenI+'),'+
							observedPopToken+' == observedPopToken != expectPopToken == '+expectPopToken+' at popI='+popI;
					}
					ints[popI] = observedPushTokenI;
					ints[observedPushTokenI] = popI;
				}else{
					//throw 'Dont know what to do with tokens['+vars.i+']='+tokens[vars.i];
					ints[vars.i] = vars.i; //"Everything else points at itself, such as ' ', ':', or 'Name#'."
					vars.i++;
				}
			}
		};
		
		//2022-12-15 I'm going to add ParseTree.isUnaryRight = true or false, instead of using vm.expandTokensListForUnary.
		//
		//Preprocessing of tokens list from wikib code string, to make unary syntax look like (...) syntax. Doesnt modify param.
		//Cuz of this, there is no parsing.listType==':'.
		//Example: [',', ',', '_'] in ',,_[a b c]', should eval to (, (, (_ [a b c]))) but display as ,,_[a b c],
		//so if it sees [',', ':', ',', '_', '[', 'a', ' ', 'b', ' ', 'c', ']'] then it will put the extra '(' and ')' etc there.
		vm.expandTokensListForUnary = tokensIn=>{
			let tokensOutReverse = [];
			//goes backward from end of tokensIn cuz thats the order unary is computed
			let pushPopPtrs = vm.tokensListToPushPopPointers(tokensIn); //at a ( these ints tell where the matching ) is, for ( ) [ ] { } < >. Others point at self.
			vm.expandTokensListForUnary_internal(tokensIn, tokensIn.length-1, pushPopPtrs, tokensOutReverse);
			return tokensOutReverse.reverse(); //forward. modifies array.
		};
		
		//2022-12-15 I'm going to add ParseTree.isUnaryRight = true or false, instead of using vm.expandTokensListForUnary.
		//
		//vars.i starts as tokensIn.length-1 and decreases until -1 when it ends, just past the first input token.
		//vars starts as {i:(tokensIn.length-1)} and counts down, traversing the tree of ( ) [ ] { } < > etc,
		//until reaching -1 just before the first token.
		vm.expandTokensListForUnary_internal = (tokensIn, vars, pushPopPtrs, tokensOutReverse)=>{
			//pushPopPtrs has already done most of the work.
			//
			//Whats left is ':' (means same as no whitespace between them but still use them as separate tokens), ' ',
			//'Name#' (defining a name), 'Name' (using a name), and literals(such as 2.34 '"hello world"', 0b1101, 0x2233fcd9.
			//
			//'Name#' should be used as part of the same thing as to its right, like Name#[a b c].
			//':' should be skipped, have the same effect as if it wasnt there.
			//' ' or the matching start/end of a [ ] { } ( ) < > of the list we're inside now, means unary doesnt go past there.
			//Indexes of matching [ ] { } ( ) < > are in pushPopPtrs, and should be used to call this recursively.
			//Everything else is a literal (string, number, cbt/blob/bitstring, Name (without #)
			//	and is used the same as a matching (...) [...] etc, which unary can be between.
			//
			//The work expandTokensListForUnary_internal does is to recurse into the tree of (... [ ... ] ... ) etc,
			//and fill tokensOutReverse (in reverse order they occur in tokensIn, for efficiency),
			//while putting extra ( ... ) where unary happens. It doesnt put extra [ ] { } or < >, only extra ( ).
			//( ) is normal callpair. [ ] is infcur list. { } is sCurryList.
			//<a b c> means {,a b c} and is a shorter way to write some sCurryLists since that happens very often.
			//So expandTokensListForUnary_internal is creating normal callpairs, starting at the right 2 at a time,
			//wherever it finds unary syntax, such as [x y ,_[a b c]d z] becomes [x y (, (_ ([a b c] d))) z]
			//which evals to [x y (, (_ [a b c d])) z]
			//in that case cuz [] aka infcurList just keeps appending whatever its called on.
			
			throw 'FIXMEFIXME as its it has to know to insert ) or not, before it recurses. Maybe it should count the number of unary calls first using pushPopPtrs?';
			/*
			
			throw 'FIXMEFIXME';
			FIXMEFIXME
			
			//vm.isLoneToken(token) is true for all those except 
			fixmefixme
			
			while(i>=0 && vm.strIsAllWhitespace(tokensIn[i])){ //skip whitespace
				i--;
			}
			//FIXME dont allow "Name# [a b c]". It must be "Name#[a b c]" instead, cuz whitespace or the lack of it is part of unary syntax.
			//while(i>=0 && IsAllWhitespace(tokensIn[i]) || tokensIn[i].endsWith('#'))){ //skip Name#
			//	i--;
			//}
			if(vm.isLoneToken(tokensIn[i])){
				tokensOutReverse.push(tokensIn[i]);
			}else if(tokensIn[i] == ':'){
				throw 'TODO : syntax which is same as there not being whitespace to use unary syntax, which you need if its not _ , ? etc, such as +[?varX ?varY <* ...>]';
			}else{
				while(i>=0 && (vm.strIsAllWhitespace(tokensIn[i]) || tokensIn[i].endsWith('#'))){ //skip whitespace and Name#
				}
			}
			/*}else if(vm.isPopToken(tokensIn[i])){
				let popToken = tokensIn[i];
				let pushToken = vm.popTokenToPushToken(popToken);
				while(){
				}
				throw 'FIXMEFIXME';
			}else{
				throw 'Unknown what to do at tokensIn['+i+']='+tokensIn[i];
			}
			
			
			throw 'FIXMEFIXME';
			/*
			while(i>=0 && vm.strIsAllWhitespace(tokensIn[i])){ //skip whitespace
				i--;
			}
			//FIXME dont allow "Name# [a b c]". It must be "Name#[a b c]" instead, cuz whitespace or the lack of it is part of unary syntax.
			//while(i>=0 && IsAllWhitespace(tokensIn[i]) || tokensIn[i].endsWith('#'))){ //skip Name#
			//	i--;
			//}
			if(vm.isLoneToken(tokensIn[i])){
				tokensOutReverse.push(tokensIn[i]);
			}else if(tokensIn[i] == ':'){
				throw 'TODO : syntax which is same as there not being whitespace to use unary syntax, which you need if its not _ , ? etc, such as +[?varX ?varY <* ...>]';
			}else{
				while(i>=0 && (vm.strIsAllWhitespace(tokensIn[i]) || tokensIn[i].endsWith('#'))){ //skip whitespace and Name#
				}
			}
			/*}else if(vm.isPopToken(tokensIn[i])){
				let popToken = tokensIn[i];
				let pushToken = vm.popTokenToPushToken(popToken);
				while(){
				}
				throw 'FIXMEFIXME';
			}else{
				throw 'Unknown what to do at tokensIn['+i+']='+tokensIn[i];
			}*/
		};
		
		//returns a vm.Parsing or null. Returns null if its all whitespace from current position, so dont add that to childs list.
		//This is a redesign of parse function, to split it into 2 steps, parsing into tree, then evaling.
		//This is thue "parsing into tree" step. Param is list of string such as:
		//'{' or '[' or '(' or '<' or [loneTok where isLoneToken(loneTok) such as 'S' or '#AName' or '3.2'
		//or "'hello world'" or hello or world since starting with lowercase without whitespace means string literal.
		//
		//TODO??? Takes vm.Parsing as param.
		//OLD: 0 <= from && from < tokens.length.
		//returns a vm.ParseTree. Calls itself recursively.
		//
		//2022-12-14 this isnt handling the unary syntax, such as ,,_[a b c] means (, (, (_ [a b c]))) but displays as ,,_[a b c],
		//so I'm going to put that in a func called before this, which adds tokens in some cases.
		vm.Viewer.prototype.tokensToParseTree = function(parsing){
			//FIXME handle ':'/'' syntax.
			let toks = parsing.tokens;
			let firstToken = toks[parsing.from];
			let isUnaryRight = vm.isUnaryMiddleOrRight(toks,parsing.from);
			try{
				//let skippedWhitespace = false;
				/*vm.Parsing.prototype.isUnaryToken = function(token){
					//: is like not having whitespace between 2 things: _[a b c] vs _:[a b c] vs (_ [a b c]) are all equal. TODO add those syntaxes.
					return token=='_' || token=='?' || token==',' || token==':';
				};*/
				while(vm.strIsAllWhitespace(firstToken)){
					firstToken  = toks[++parsing.from]; //skip whitespace
					skippedWhitespace = true;
				}
				
				/*
				//Example: [',', ',', '_'] in ',,_[a b c]', should eval to (, (, (_ [a b c]))) but display as ,,_[a b c]
				//So if unaryPrefixes is nonempty, then whenever it finishes parsing whats after the unary stuff (or if the unary stuff is by itself),
				//makes callpair with the right 2, then makes callpair with the one just left of that and that callpair it just made, and so on,
				//but... since this returns a vm.Parsing, not an evaled form, its still strings, so make a new list type.
				let unaryPrefixes = [];
				while(1+parsing.from<toks.length){
					let token = toks[1+parsing.from];
					if(token == ':'){ //: is the same as having no whitespace between 2 tokens, to do them as unary, BUT it can only be used between 
						
					}else if(parsing.isUnaryToken(toks[1+parsing.from])){
					}else{
						break;
					}
				}
				//while(1+parsing.from<toks.length && parsing.isUnaryToken(toks[1+parsing.from])){
				//	unaryPrefixes.push(toks[++parsing.from]);
				//}
				*/
				
				if(parsing.from >= toks.length){
					//throw 'cant parse all whitespace at end. shouldnt have called tokensToParseTree that last time.';
					return null;
				}
				console.log('tokensToParseTree firstToken='+firstToken);
				let ret = new vm.ParseTree();
				if(firstToken.endsWith('#')){ //AName#
					if(firstToken.endsWith('##')){ //OpCommentedFuncOfOneParam and AName#
						//FIXME update comments in vm.Parsing cuz not including ## at end
						ret.defineCommentAndNameToken = firstToken.substring(0,firstToken.length-2);
					}else{
						//FIXME update comments in vm.Parsing cuz not including # at end
						ret.defineNameToken = firstToken.substring(0,firstToken.length-1);
					}
					firstToken = toks[++parsing.from]; //after the AName# or AName## is whatever its the name of.
				}
				if(parsing.isLoneToken(firstToken)){ //FIXME isLoneToken, should it match whitespace? if so, its only matching ' ' but not '\n' or '\t' etc.
					//if(vm.isCapitalLetter(firstToken[0])){
					if(vm.charIsNamePrefix(firstToken[0])){
						ret.useExistingNameToken = firstToken;
					}else{
						ret.literalToken = firstToken;
					}
				}else if(parsing.isPushToken(firstToken)){ //One of '{', '[', '(', '<', but doesnt handle ':'/'' here despite its also a listType.
					
					//OLD: The ':' listType will be used if 
					//pushToken. but ':' is not a push or pop token, despite its still a listType, so not doing that here.
					//Its OLD cuz... "Preprocessing of tokens list from wikib code string, to make unary syntax look like (...) syntax. Doesnt modify param.
					//Cuz of this, there is no parsing.listType==':'."
					
					let observePushToken = firstToken;
					let observePushToken_tokenIndex = parsing.from;
					if(vm.logTokensToParseTree) console.log('Start observePushToken='+observePushToken+' at observePushToken_tokenIndex='+observePushToken_tokenIndex);
					ret.listType = observePushToken;
					let expectPopToken = vm.pushTokenToPopToken[observePushToken]; //FIXME move pushTokenToPopToken into vm.Viewing or vm.Parsing etc, but consider what uses it might not be able to reach that.
					parsing.from++; //dont need parsing.toExcl in tokensToParseTree but may have needed it in the old design.
					//while(parsing.from < toks.length && toks[parsing.from] != popToken){
					let observedPopToken = null;
					//while(parsing.from < toks.length && !parsing.isPopToken(observedPopToken=toks[parsing.from])){
					while(true){
						
						//TODO? rename observedPopToken to popToken? cuz its every token until and including the popToken,
						//other than recursing in (...) [...] etc whic is handled by tokensToParseTree.
						observedPopToken = toks[parsing.from];

						if(vm.logTokensToParseTree) console.log('possible (looking for a) observedPopToken='+observedPopToken+' parsing='+parsing);
						if(observedPopToken === undefined){
							throw 'observedPopToken is undefined, parsing='+parsing;
						}
						if(parsing.from == toks.length){
							if(vm.vm.logTokensToParseTree) console.log('break while cuz, parsing.from == toks.length and observePushToken='+observePushToken+' ('+observePushToken_tokenIndex+') expectPopToken='+expectPopToken);
							break;
						}
						if(parsing.isPopToken(observedPopToken)){
							if(vm.logTokensToParseTree) console.log('break while cuz, observedPopToken is a pop token: '+observedPopToken+' ('+parsing.from+') and observePushToken='+observePushToken+' ('+observePushToken_tokenIndex+') expectPopToken='+expectPopToken+' parsing='+parsing);
							break;
						}

						if(vm.strIsAllWhitespace(observedPopToken)){
							if(vm.logTokensToParseTree) console.log('skipping whitespace at index '+parsing.from);
							parsing.from++;
						}else{
							let childParseTree = this.tokensToParseTree(parsing); //does parsing.from++ at end, so is just past what it parsed
							if(childParseTree){ //would be null if its all whitespace at end
								ret.childs.push(childParseTree);
							}else{
								throw 'No childParseTree';
							}
						}

					}
					if(vm.logTokensToParseTree) console.log('end loop, observePushToken='+observePushToken+' observedPopToken='+observedPopToken+' expectPopToken='+expectPopToken+' parsing='+parsing);
					if(parsing.isPopToken(observedPopToken) && expectPopToken != observedPopToken){
						throw observePushToken+' doesnt match '+observedPopToken+', expected '+expectPopToken+', parsedSoFar='+ret+', parsing='+parsing;
					}
					//parsing.from++;
					//console.log('increment parsing.from to '+parsing.from+' and setting observedPopToken to '+toks[parsing.from]);
					//observedPopToken = toks[parsing.from];
				}
				parsing.from++; //does parsing.from++ at end, so is just past what it parsed
				if(!ret.defineCommentAndNameToken && !ret.defineNameToken && !ret.listType && !ret.literalToken && !ret.useExistingNameToken){
					throw 'Didnt set any of the fields, retParsing=['+ret+']';
				}
				ret.isUnaryRight = isUnaryRight;
				return ret;
			}catch(e){
				console.log('tokensToParseTree error '+e);
				throw e;
			}
		};
		
		//internal datastruct of Viewer.
		//
		//alert('TODO for vm.eval, make another layer, of vararg tree, for [] {} () <> a:b:c:d syntaxs,
		//before evaling anything, which means it wont merge duplicate fns in code string at this level
		//(and at lazyDedup level it will mostly except for some blobs, and at globalId256 level
		//everything is deduped). Make that tree so can look at it in browser debugger to make sure
		//it parsed right before evaling its parts, since thats unnecessary extra work to do at
		//once when tracking down bugs. Eventually the eval func will be derived from combos of
		//U/TheUniversalLambda, so you can make new syntaxes at the same level as the default
		//syntax. Do that in vm.ParseTree. ParseTree comment, add a fifth kind of list, \':\'
		//where literal \':\' or \'\' (as in \'a(b c)d\' or \'M[...]\') is the fifth kind,
		//< [ { (. It evals a:b:c:d as (a (b (c d))), unlike (a b c d) means (((a b) c) d).');
		vm.ParseTree = function(){
			//todo from and toExcl?
			//is '{' or '[' or '(' or '<' or [loneTok where isLoneToken(loneTok) such as 'S' or '#AName' or '3.2'
			//or "'hello world'" or hello or world since starting with lowercase without whitespace means string literal]
			//this.defineNameToken = null; //like 'AName#' or 'AName##', or null.
			this.defineNameToken = null; //like 'AName' of 'AName#', or null. null if defineCommentAndNameToken is not null, etc.
			this.defineCommentAndNameToken = null; //'AName' of 'AName##', or null. OpCommentedFuncOfOneParam.
			this.useExistingNameToken = null; //like 'AName', or null.
			//like '2.34e-5' or '12' or '\'hello world\'' or '\'hello\'' or 'hello', since if it doesnt start with capital letter
			//and has no whitespace and is small enough, you dont need the quotes.
			//If its like that but starts with capital letter, its a useExistingNameToken.
			this.literalToken = null;
			this.isUnaryRight = false;
			this.listType = null; //One of '{', '[', '(', '<', ':', or null.
			this.childs = [];
		};
		//vm.Tree.prototype.parseToMakeChilds = function(){
			
		vm.ParseTree.prototype.shallowCopy = function(){
			let ret = new vm.ParseTree();
			ret.defineNameToken = this.defineNameToken;
			ret.defineCommentAndNameToken = this.defineCommentAndNameToken;
			ret.useExistingNameToken = this.useExistingNameToken;
			ret.literalToken = this.literalToken;
			ret.isUnaryRight = this.isUnaryRight;
			ret.listType = this.listType;
			ret.defineCommentAndNameToken = this.defineCommentAndNameToken;
			ret.childs = [...this.childs];
			return ret;
		};
		
		
		//as of 2022-12-16 only vm.namesAttachRightToLeftInUnary of true works, and thats the better syntax so just leave it that way.
		//If left to right then AA#,BB#(* *) means (AA#, BB#(* *) aka names attach to what they're directly touching.
		//If right to left then AA#,BB#(* *) means AA#(, BB#(* *)) aka names attach to bigger thing from what they're touching to farther to the right.
		vm.namesAttachRightToLeftInUnary = true;
		//vm.namesAttachRightToLeftInUnary = false;
			
		//This is unaryLeft. Param is unaryRight. Returns new ParseTree of the normal callpair of those. Does not modify this or unaryRight.
		vm.ParseTree.prototype.mergeUnary = function(unaryRight){
			let ret = this.shallowCopy();
			
			unaryRight = unaryRight.shallowCopy();
			//cuz merging it into a (left right) thats not unary, like ',hello' becomes (, hello),
			//and without this, recursion of foldUnaryDeep would (TODO verify thats whats causing the bug 2022-12-16) fold it again.
			//Ret/parent (, hello) for example, copies isUnaryRight from left child aka this,
			//so foldUnaryDeep would keep folding unary to the left, and the left of that... until find whitespace or a push token etc.
			unaryRight.isUnaryRight = false;
			
			ret.listType = '('; //normal callpair (of unaryLeft and unaryRight)
			ret.literalToken = null;
			if(vm.namesAttachRightToLeftInUnary){ //names attach right to left
				let newLeft = this.shallowCopy();
				
				ret.defineNameToken = this.defineNameToken;
				newLeft.defineNameToken = null;
				
				ret.defineCommentAndNameToken = this.defineCommentAndNameToken;
				newLeft.defineCommentAndNameToken = null;
				
				ret.childs = [newLeft, unaryRight];
			}else{ //names attach left to right
				throw 'This never worked, and I dont really want this syntax anyways. maybe will fix it later for completeness, but just leave vm.namesAttachRightToLeftInUnary as true and its not a problem.';
				/*2022-12-16... Its not displaying AA cuz its name of , (aka T) in this case,
				maybe cuz of syty or related to displayChilds etc in ParseTree.
				...
				Wikibinator203VM.js:10326 Uncaught Test namingWithUnarySyntax 1tf failed cuz ,BB#(* *) != AA#,BB#(* *)
				vm.test @ Wikibinator203VM.js:10326
				(anonymous) @ Wikibinator203VM.js:10462
				(anonymous) @ Wikibinator203VM.js:10511
				*/
				ret.defineNameToken = null;
				ret.defineCommentAndNameToken = null;
				ret.childs = [this, unaryRight];
			}
			ret.useExistingNameToken = null;
			return ret;
		};
			
		//Where ParseTree.isUnaryRight is true (which tokensToParseTree sets to true or false),
		//turn 2 siblings into a normal callpair, and continue left of that if still unary.
		//,,_[a b c] and ,:,:_:[a b c] and ,:,_:[a b c] should be parsed as (, (, (_ [a b c]))). Return ParseTree.
		vm.ParseTree.prototype.foldUnaryDeep = function(){
			if(this.childs.length === 0) return this;
			//cant do this cuz if theres 1 child, it might still have unary stuff to fold deeper inside: if(this.childs.length < 2) return this;
			let newChildsReverse = []; //reverse for efficiency
			for(let c=this.childs.length-1; c>=0; c--){
				let x = this.childs[c];
				x = x.foldUnaryDeep();
				while(x.isUnaryRight){
					if(c === 0){
						throw 'Cant isUnaryRight when its first child';
					}
					let unaryLeft = this.childs[--c];
					x = unaryLeft.mergeUnary(x);
				}
				newChildsReverse.push(x);
			}
			let ret = this.shallowCopy();
			ret.childs = newChildsReverse.reverse(); //modifies newChildsReverse
			return ret;
		};

			
		vm.ParseTree.prototype.toString = function(){
			let s = '';
			if(this.defineNameToken){
				s += this.defineNameToken+'#';
			}else if(this.defineCommentAndNameToken){
				s += this.defineNameToken+'##';
			}
			//if it defines a name, the (...) etc comes after it.
			if(this.useExistingNameToken){
				s += this.useExistingNameToken;
			}else if(this.literalToken){
				s += this.literalToken;
			}else if(this.listType){
				if(this.listType == ':'){
					for(let i=0; i<this.childs.length; i++){
						let nextChildStr = this.childs[i].toString(); //aka child+'', but avoid extra concat
						if(i && vm.syntaxNeedsColorBetween2Chars(s[s.length-1],nextChildStr[0])){
							//Example that needs colon: a:b
							//Example that doesnt need colon: (S T T)b(hello world)
							//Example that doesnt need colon: {T T}b(hello world)
							//Example that doesnt need colon: M[hello world]
							s += ':';
						}
						s += nextChildStr;
					}
				}else{
					s += this.listType; //{ [ ( <
					for(let i=0; i<this.childs.length; i++){
						if(i) s += ' ';
						s += this.childs[i];
					}
					s += vm.pushTokenToPopToken[this.listType]; //} ] ) >
				}
			}
			return s;
		};

		//vm.length
		//vm.regexForLiteralTypeWord = FIXME allow unicode but also 

		//lang means programming language strings.
		//for the default syntax (or you could derive any syntax using lambdas,
		//but have to start somewhere for it to be Human readable in early experiments).
		//
		//TODO If it starts with a lowercase letter, does not contain whitespace or other certain symbols, and is small enough,
		//then its a string literal of those utf8 bytes.
		//TODO If it starts with ' (or maybe " or allow both?) then its a string literal,
		//but there should be a size limit on those too, else display it as callpairs the normal way, and it would still be a string.
		//TODO If it starts with 0b then its a cbt literal written as bits.
		//TODO If it starts with 0x then its a cbt literal written as hex digits.
		//TODO also literal for float64 andOr int32 etc.
		//FIXME which of these does a raw cbt, of a certain size mean. For example, should a cbt32 display as int32 or 32 bits or float32 or what?
		/*vm.langLiteralType = str=>{
			fixmefixme
			if(!str.length) throw 'Empty string';
			
			throw 'TODO';
		};*/

		/*
		//which chars can be in a langLiteralType of 'word', such as helloworld234 means 'helloworld234'
		vm.isLangLiteralWordChar = char=>{
			TODO
		};*/

		//vm.maxCharsInWordLiteral = 50; //FIXME how much?
		vm.maxCharsInWordLiteral = 10000000; //FIXME how much? Will probably make this 66 so 0x then 64 hex digits for 256 bits, but want big 0x literals 2023-8-19 cuz not splitting them into call pairs of smaller cbts yet
		
		vm.isGetterToken = function(literalToken){
			//ends with ^ is ops.Du
			//ends with $ is ops.D
			//starts and ends with ' or " (todo choose one or both?) is string literal.
			//Small string with no whitespace that starts with lowercase letter is also string literal,
			//but theres other rules for that too, todo define those.
			let startsWithQuote = literalToken[0] == "'" || literalToken[0] == '"';
			return /*literalToken.endsWith('^') ||*/ literalToken.endsWith('$') || literalToken.endsWith('%') || //Du/^ D/$ Da/% as in vm.ops.Du .D .Da and DuGo DGo (but not DaGo). UPDATE: merge Da with P?
				literalToken.endsWith('@') || (!startsWithQuote && literalToken.includes('/') ||
				(!startsWithQuote && literalToken.includes('^')) //ops.G or ops.GGo
			);
		};
		
		vm.ParseTree.prototype.literalTokenToFn = function(literalToken){
			//if(literalToken[0] == literalToken[0].toUpperCase()){ //if first char is capital
			if(vm.isCapitalLetter(literalToken[0])){
				//TODO optimize.
				throw 'literal cant start with capital. Those are Names#. literalToken='+literalToken;
			}
			//FIXME check for whitespace. Throw if there is any.
			//TODO optimize
			if(literalToken.startsWith('0x')){ //cbt literal as hex like 0xab44ff09, always a powOf2 size.
				let hex = literalToken.substring(2);
				return vm.hexToCbt(hex);
				//if(!vm.isPowOfTwo(hex)){
				//	throw 'Not a powOf2 number of hex digits in: '+literalToken;
				//}
				//throw 'TODO parse 0x literals';
			}else if(literalToken.startsWith('0b')){ //cbt literal as bits, normally only used up to 2 bits since after that use 0x for hex, always a powOf2 size.
				let bits = literalToken.substring(2);
				if(bits.length == 0){
					throw 'No bits like 0b1 0b1101, just a lone 0b: '+literalToken;
				}else if(bits.length == 1){
					return bits=='1' ? ops.Bit1 : ops.Bit0;
				}else if(bits.length == 2){
					return vm.cbt2[Number.parseInt(bits,2)];
				}else if(bits.length == 4){
					return vm.cbt4[Number.parseInt(bits,2)];
				}else if(bits.length == 8){
					return vm.cbt8[Number.parseInt(bits,2)];
				}else if(bits.length == 16){
					return vm.cbt16(Number.parseInt(bits,2));
				}else if(bits.length == 32){
					return vm.cbt32(Number.parseInt(bits,2));
				}else{
					throw 'When 4 bits or bigger, use hex 0x3345.. instead of 0b11101010... (but am parsing it anyways up to 32 bits for now), token='+literalToken;
				}
			}else if(literalToken.startsWith('"')){
				throw 'TODO quoted string literals';
			}else if(literalToken.startsWith('\'')){
				throw 'TODO quoted string literals';
			}else if('0' <= literalToken[0] && literalToken[0] <= '9'){ //if first char is a baseTen number and its not 0x or 0b
				/*
				js parseFloat seems to never throw, ignore leading whitespace, ignore anything after non-number-chars (except e in some cases),
				and return NaN for anything its confused by, and never return undefined.
				..
				parseFloat('342534.435abc')
				342534.435
				parseFloat('342534.435e50')
				3.42534435e+55
				parseFloat('342534.435e50aa')
				3.42534435e+55
				parseFloat('342534.435e+50aa')
				3.42534435e+55
				parseFloat('a342534.435e+50aa')
				NaN
				parseFloat('ba342534.435e+50aa')
				NaN
				parseFloat('14b2534.435e+50aa')
				14
				*/
				let num = parseFloat(literalToken);
				return vm.wrapDouble(num); //vm.wrap would do same thing but with extra steps to check if its a double.
			}else if(vm.isGetterToken(literalToken)){ //Examples: a/b/sum$ or a$ or a^
				if(literalToken.startsWith('/')){
					throw 'Cant start with /: '+literalToken;
				}

				let lastG = literalToken.lastIndexOf('^');
				if(lastG != -1){ //has ^ as in picA^width or things/pics/picA^width , means ops.G or ops.GGo
					let prefix = literalToken.substring(0,lastG);
					let suffix = literalToken.substring(lastG+1);
					if(prefix.length == 0){
						throw 'starts with ^: '+literalToken;
					}
					if(suffix.length == 0){
						throw 'ends with ^: '+literalToken;
					}
					let prefixFn = this.literalTokenToFn(prefix);
					//FIXME what if suffix is more complex than width such as picA^a/b/c$ (TODO display not as literal, just normal callpairs if so)
					let suffixFn = this.literalTokenToFn(suffix);
					//picA is a string in picA^width so should become (G picA width).
					//pics/picA is not a string, is (OO pics picA) so pics/picA^width should become (GGo pics/picA width).
					let isGo = !prefixFn.n.isString();
					let op = isGo ? ops.GGo : ops.G;
					return op(prefixFn)(suffixFn); //next param is normally a ns, so (GGo pics/picA width TheNs) would get that pic's width.
				}

				//was: literalToken.containsliteralToken.startsWith('/'), but changing it to exclude the first /, like a/b/sum$ or a$ or a^
				//OLD: like /a/b/sum$ means (D (GoO (OO a b) sum))
				//NEW: like a/b/sum$ means (D (GoO (OO a b) sum))
				let ret = null;
				let end = '';
				//if(literalToken.endsWith('$') || literalToken.endsWith('^') || literalToken.endsWith('%')){ //$ does vm.ops.D, and ^ does vm.ops.Du. Da/%.
				if(literalToken.endsWith('@') || literalToken.endsWith('$') || literalToken.endsWith('%')){ //$ does vm.ops.D, and ^ does vm.ops.Du (UPDATE: ^ is ops.G and .GGo). Da/%.

					//TODO merge duplicate code between here and that other code that checks for % $ %.
					end = literalToken[literalToken.length-1];
					literalToken = literalToken.substring(0,literalToken.length-1);
				}
				let partStrings = literalToken.split('/');
				console.log('literalTokenToFn partStrings='+JSON.stringify(partStrings));
				//skip i==0 the empty string since we know it starts with / and was split by / theres '' before it.
				//if(partStrings.length == 1){
				if(partStrings.length == 0){
					throw 'No parts, something like $ or emptyString(how would that happen?) maybe, literalToken='+literalToken;
				//}else if(partStrings.length == 2){ //is only 1 part, like /a
				}else if(partStrings.length == 1){ //is only 1 part, like a$ or a^
					console.log('literalTokenToFn partStrings0='+partStrings[0]+' Leaving it as literal. literalToken='+literalToken);
					//ret = ops.O(this.literalTokenToFn(partStrings[0]));
					ret = vm.wrap(partStrings[0]);
					//FIXMEFIXME get rid of ops.O cuz the first part of x/y/z (the x) is just literal string x.
				//}else{ //is at least 2 parts like /a/b or /a/b/c/a/a
				}else{ //is at least 2 parts like a/b or a/b/c/a/a
					console.log('literalTokenToFn partStrings0='+partStrings[0]+' partStrings1='+partStrings[1]+' literalToken='+literalToken);
					ret = ops.OO(this.literalTokenToFn(partStrings[0]))(this.literalTokenToFn(partStrings[1]));
					for(let i=2; i<partStrings.length; i++){
						console.log('literalTokenToFn partStrings'+i+'='+partStrings[i]+' literalToken='+literalToken);
						ret = ops.GoO(ret)(this.literalTokenToFn(partStrings[i])); //the cde then a then a in a/b/cde/a/a
					}
				}
				if(end){
					let isGo = partStrings.length > 1; // a/b$ is (DGo (OO a b)). a/b/c$ is (DGo (GoO (OO a b) c)). a$ is (D a).
					//FIXME what about a$$$ (more than 1 $ or ^ suffix)? Or $ or ^ in middle like a/b$/c ?
					if(end == '$'){
						let op = isGo ? ops.DGo : ops.D;
						ret = op(ret); //double/float64
					/*}else if(end == '^'){
						throw '^/Du is replaced by P, and DuGo replaced by PGo';
						let op = isGo ? ops.DuGo : ops.Du;
						ret = op(ret); //the dup fn of vm.Mut optimization (or interpreted form)
					*/
					}else if(end == '%'){
						let op = isGo ? ops.PGo : ops.P;
						ret = op(ret); //a Lambda or Mutlambda param if varname%, or can have x/y/varname/z% in.... the dup fn of vm.Mut optimization (or interpreted form)

						/*
						if(!partStrings.length){
							throw 'Empty partStrings before %';
						//if(partStrings.length != 1){
							//throw 'partStrings='+JSON.stringify(partStrings)+' but must be just 1 part before the Da/% cuz LamNs doesnt have a/b/sum recursion but maybe later TODO a%/b/sum later?';
						//	throw 'partStrings='+JSON.stringify(partStrings)+' but must be just 1 part before the P/% cuz LamNs doesnt have a/b/sum recursion but maybe later TODO a%/b/sum later?';
						}else if(partStrings.length == 1){
							//ret = ops.Da(ret); //a lambda/mutlambda readOnly param for vm.Mut optimization (or interpreted form)
							ret = ops.P(ret); //a lambda/mutlambda readOnly param for vm.Mut optimization (or interpreted form)
						}else{
							
						}*/
					}else if(end == '@'){ //blob. varname@, or can have x/y/varname/z@ in.... the dup fn of vm.Mut optimization (or interpreted form)
						let op = isGo ? ops.BlGo : ops.Bl;
						ret = op(ret);
					}else{
						throw 'end='+end;
					}
				}
				return ret;
			}else{
				return vm.wrap(literalToken);
			}
		};
		
		//TODO hook into Viewer or Viewing or parsing.loneTokenToFn, for AName#/AName##.
		//Skip names for now. FIXME
		//TODO using Name# Fills optionalMapOfStringToFn as mutable {}. Creates optionalMapOfStringToFn if one isnt given.
		//If you want names like 'S' and 'U' and 'Pair' to work, put them in that param.
		vm.ParseTree.prototype.eval = function(optionalMapOfStringToFn){
			//FIXME use vm.stackTime and vm.stackMem etc, in case parsing costs too much compute resources (such as infinite loop cuz of parser bug, or if it looks things up that somehow (maybe in future version)
			//causes looking them up on harddrive or internet (constants only by merkle hash id, not something that changes,
			//except MutableWrapperLambda isnt strongly enforced that it doesnt change and is an incomplete design as of 2022-4.
			if(!this.fn){
				let map = optionalMapOfStringToFn || {};
				let ret;
				if(this.useExistingNameToken){
					ret = map[this.useExistingNameToken];
					if(!ret){
						throw 'Name not found: '+this.useExistingNameToken;
					}
				}else if(this.literalToken){
					if(
						(this.literalToken.length <= vm.maxCharsInWordLiteral) //max word literal length
						&& /^\S*$/.test(this.literalToken) //no whitespace allowed in word literal
						&& !/\(\)\{\}\[\]\<\>\'\"\#\\\:\,/.test(this.literalToken) //FIXME find the other syntax chars not allowed in a word literal
					){
						console.log('Found word literal (or maybe its a number or 0x or 0b cbt literal, FIXME adding more kinds of literals): '+this.literalToken);
						//ret = vm.wrap(this.literalToken);
						ret = this.literalTokenToFn(this.literalToken);
					}else{
						throw 'TODO other kinds of literal. Also, if its too long or not a literal, then shouldnt have entered this if(this.literalToken). literalToken['+this.literalToken+']';
					}

					//else display it normally as call pairs etc.

					/*FIXME check literal length, but is it allowed to have longer length if its quoted than if its word?
					let lity = vm.langLiteralType(this.literalToken);
					switch(lity){
						case 'word':
							throw 'TODO word';
						break;case 'quote':
							throw 'TODO quote';
						break;case '0b':
							throw 'TODO 0b';
						break;case '0x':
							throw 'TODO 0x';
						default: 
							throw 'TODO literalToken='+this.literalToken;
					}*/
				}else if(this.listType){
					if(this.listType == '('){ //curryList, just call them left to right. (a b c d) means (((a b) c) d).
						ret = Ident;
						for(let childParseTree of this.childs){
							ret = ret(childParseTree.eval(map));
						}
					}else if(this.listType == ':'){ //a:b:c:d means (a (b (c d)))
						if(this.childs.length < 2) throw 'The : syntax (which also occurs when theres no space between some things) requires at least 2 childs but found '+this.childs.length;
						ret = this.childs[this.childs.length-1].eval(map);
						for(let c=this.childs.length-2; c>=0; c--){ //eval in reverse order than (...).
							ret = childParseTree.eval(map)(ret);
						}
					}else if(this.listType == '{'){ //sCurryList. {a b c d} means (S (S (S a b) c) d)
						if(!this.childs.length) return Ident; //FIXME is that what empty {} means?
						ret = this.childs[0].eval(map);
						for(let c=1; c<this.childs.length; c++){
							ret = S(ret)(this.childs[c].eval(map));
						}
					}else if(this.listType == '<'){ //<a b c> means {,a b c}.
						if(!this.childs.length) return Ident; //FIXME is that what empty <> means? Should this infloop (cuz ur not supposed to write that)?
						ret = vm.ops.T(this.childs[0].eval(map));
						for(let c=1; c<this.childs.length; c++){
							ret = S(ret)(this.childs[c].eval(map));
						}
						//NEW, YES: throw 'TODO I might use <a b c> to mean {,a b c}';
						//OLD: throw 'TODO <...>/?GetVarDeep syntax, this='+this;
					}else if(this.listType == '['){ //incur list. [a b c d] means (Infcur a b c d).
						ret = ops.Infcur;
						for(let childParseTree of this.childs){
							ret = ret(childParseTree.eval(map));
						}
					}else{
						throw 'Unknown listType='+this.listType;
					}
				}
				if(this.defineNameToken){
					map[this.defineNameToken] = ret;
				}else if(this.defineCommentAndNameToken){
					throw 'TODO defineCommentAndNameToken OpCommentedFuncOfOneParam, must get strings (use Node.blob) working first, this='+this;
					//let defineCommentAndNameToken_asFn = TODO
					//ret = ops.OpCommentedFuncOfOneParam(defineCommentAndNameToken_asFn)(ret);
					//map[this.defineCommentAndNameToken] = ret;
				}
				if(!ret){
					throw 'No ret. I saw ret===undefined here 2022-4-30. What caused it?';
				}
				this.fn = ret;
				
				
				//FIXME should Node.localName be modified? Or keep it in ParseTree andOr View Viewing Viewer etc?
				//ignore this.useExistingNameToken cuz that would have been defined earlier
				let name = this.defineNameToken || this.defineCommentAndNameToken || null;
				if(name) this.fn.localName = name;
				
				
				//loneTokenToFn
			}
			return this.fn;
		};
		
		//In the list of strings (tokens), there cant, for example, be 'Abc#' twice.
		//Anything that ends with # is a name (the part before #) and can only be defined once per code string
		//cuz theres only constants, not variables, in wikibinator
		//(at deferministic level, see vm.mask_* for where there can be a little mutable stuff such as MutableWrapperLambda and Solve).
		vm.verifyTokensListHasNoDuplicateNames = tokens=>{
			let foundNameDefiners = {}; //map of 'Abc#' to true, etc.
			for(let token of tokens){
				if(token.endsWith('#')){
					if(foundNameDefiners[token]){
						throw 'Duplicate name token: '+token;
					}
					foundNameDefiners[token] = true;
				}
			}
		};

		/*
		//2022-12-13 is this func being used? It appears not.
		//
		//reads a list of js strings (parse.tokens) and evals the combo of lambdas it means,
		//and returns it (whatevers at top parsing.stack[parsing.stack.length-1] at end of this parse call,
		//including calling itself recursively while modifying fields in the Parsing.
		//
		//FIXME??? Might need to have '(' and ')' as first and last tokens, in this.tok for the outermost call,
		//so if its a lone token such as 'S' or 'Pair', theres a parent parse call to popPopPushFnByCall it at the end?
		//All parse calls other than an outermost call are a smaller range in this.tok.
		//
		//If all those lambdas dont have enough params yet then evaling them halts instantly
		//by creating a halted call pair (see Node.evaler such as vm.rootEvaler) so just normal evaling.
		//Reads parse.tokens and parse.from. Writes parse.to when whatever parse.tokens[parse.from] opens is closed, such as ( and ) or { and },
		//or a lone token may be its own open and close such as hello or 'hello'.
		vm.Viewer.prototype.parse = function(parsing){
			//FIXME replace this with 2 steps, as explained in tokensToParseTree which is the first of 2 steps.
			
			
			let tok = parsing.tokens;
			
			vm.verifyTokensListHasNoDuplicateNames(tok);
			
			/*let fromTok = tok[parsing.from]; //Examples: ( { [ < hello 'hello world' 3.45 , _
			if(fromTok === undefined) throw 'parsing, frokToKE==undefined. This might happen if parser is broken (are you changing the syntax by modifying a parser? If so, you should do that at user level, lambdas that make lambdas, but just needed 1 syntax to boot that process.). Or maybe the code isnt valid wikibinator203 code.';
			console.log('PARSING====fromTok='+fromTok);
			*
			parsing.toExcl = parsing.from+1;
			let nextFn = null;
			let toTok;
			do{
				if(2<=vm.loglev)console.log('parse top of loop, stack: '+parsing.stackToString());
				let fromTok = tok[parsing.from]; //Examples: ( { [ < hello 'hello world' 3.45 , _
				if(fromTok === undefined) throw 'MOVEDTOINWHILE: parsing, frokTok===undefined. This might happen if parser is broken (are you changing the syntax by modifying a parser? If so, you should do that at user level, lambdas that make lambdas, but just needed 1 syntax to boot that process.). Or maybe the code isnt valid wikibinator203 code.';
				if(2<=vm.loglev)console.log('MOVEDTOINWHILE: PARSING====fromTok='+fromTok);
				toTok = tok[parsing.toExcl-1]; //-1 makes it inclusive, unless a range of 0 tokens (or less) is selected
				if(toTok === undefined){
					throw 'toTok is undefined. maybe reached the end of parsing the wrong way?';
				}
			
				parsing.pay1ParseStep();
				if(vm.strIsAllWhitespace(fromTok)){
					//TODO Any 2 fns with no whitespace or { [ ( < between eachother,
					//like a[b c], means (a [b c]). means call one on another left to right.
					//
					//FIXME, is this code (push then popPopPush) at end of loop(s),
					//doing that "call one on aother left to right"?
					//Or where should that be done instead?
					//parsing.pushFn(nextFn);
					//parsing.popPopPushFnByCall();
					if(2<=vm.loglev)console.log('parsing, all whitespace, fromTok['+fromTok+'] from['+parsing.from+'] toExcl['+parsing.toExcl+'] typeof(fromTok)['+typeof(fromTok)+']');
					parsing.from++;
					if(2<=vm.loglev)console.log('increased from['+parsing.from+'], toExcl['+parsing.toExcl+']');
					
					//FIXME more code to write
				}else if(parsing.isLoneToken(toTok)){ //this token alone
					//lone token might be #SomeName or ( or ) or { etc.
					if(2<=vm.loglev)console.log('    parsingA, is lone token, toTok='+toTok);
					//FIXME also handle stringliterals, #Names, numberliterals, etc here.
					nextFn = parsing.loneTokenToFn(toTok);	
					if(2<=vm.loglev)console.log('parsing.pushFn of fn, loneToken, toTok='+toTok);
					parsing.pushFn(nextFn);
				/*}else if(parsing.isLoneToken(fromTok)){ //this token alone
					//lone token might be #SomeName or ( or ) or { etc.
					console.log('    parsingA, is lone token: '+fromTok);
					//FIXME also handle stringliterals, #Names, numberliterals, etc here.
					nextFn = parsing.loneTokenToFn(fromTok);	
					console.log('parsing.pushFn of fn, loneToken='+fromTok);
					parsing.pushFn(nextFn);
				/*}else if(parsing.isUnaryToken(fromTok)){ //this token and recurse on next objects
					//FIXME remove isUnaryToken syntax and make a lack of space between things, or : between things if they cant have a space, mean (a (b (c d))) such as a(b c)d  or a(b)(c)d or (a b)c:d all mean the same thing.
					//unaryToken parses like __x is (_ (_ x)).
					console.log('parsing, isUnaryToken fromTok='+fromTok);
					//throw 'TODO';
					nextFn = parsing.loneTokenToFn(fromTok);
					let rememberFrom = parsing.from;
					parsing.from = parsing.toExcl; //start at the next token
					this.parse(parsing);
					parsing.from = rememberFrom;
					//leave parsing.toExcl as the recursion left it, possibly higher than it started but cant be lower.
					//parsing.toExcl++; //FIXME remove this line?
				*
				}else{ //this token and recurse on variable number of next objects: {...}, [...], (...), or <...>.
					//while(parsing.toExcl < tok.length && !parsing.isMatchingPushAndPopTokens(fromTok,tok[parsing.toExcl-1])){
					let isPop;
					let listOfFns = []; //whats between { and }, [ and ], ( and ), or < and >, similar to sexp/s-expression.
					while(
						parsing.toExcl < tok.length
						&& !(isPop=parsing.isMatchingPushAndPopTokens(fromTok,toTok=tok[parsing.toExcl-1]))
					){
						parsing.pay1ParseStep();
						//let tk = tok[parsing.toExcl-1];
						toTok = tok[parsing.toExcl-1]; //-1 makes it inclusive, unless a range of 0 tokens (or less) is selected
						if(parsing.isPushToken(toTok)){
							if(2<=vm.loglev)console.log('parsingB, is push token, toTok='+toTok);
							//Example: tok[fromTok] is '(' and toExcl has found another '(' or a '{' etc, so recurse.
							let rememberFrom = parsing.from;
							parsing.from = parsing.toExcl;
							this.parse(parsing);
							parsing.from = rememberFrom;
							//leave parsing.toExcl as the recursion left it, possibly higher than it started but cant be lower.
							parsing.toExcl++; //FIXME remove this line?
						}else if(isPop){
							if(2<=vm.loglev)console.log('parse, about to pop, fromTok='+fromTok+' toTok='+toTok);
							break;
						}else{
							if(2<=vm.loglev)console.log('parsing, its not push or pop. is literal or look up by #Name or .abc.def etc. tk='+tk);
							let rememberFrom = parsing.from;
							parsing.from = parsing.toExcl;
							//let fn = this.parse(parsing); //like U in [U U U] or (U U U) or for <> or {}
							this.parse(parsing); //like U in [U U U] or (U U U) or for <> or {}
							let fn = this.popFn(); //this.parse(parsing) also returns it, but popFn removes it from this.stack
							listOfFns.push(fn);
							//FIXME also pop here (from parsing.stack)?
							parsing.from = rememberFrom;
							//throw 'TODO its not push or pop. is literal or look up by #Name or .abc.def etc.';
						}
					}
					toTok = tok[parsing.toExcl-1]; //-1 makes it inclusive, unless a range of 0 tokens (or less) is selected
					if(toTok === undefined){
						//throw 'toTok===undefined';
						if(2<=vm.loglev)console.log('toTok===undefined so past the end (todo use from and toExcl and tok.length instead');
						break;
					}
					if(2<=vm.loglev)console.log('fromTok switch [](){}<>, fromTok='+fromTok+' toTok='+toTok);
					switch(toTok){
						case ']': //Infcur list
							if(2<=vm.loglev)console.log('parse [...] aka infcur-list, size '+listOfFns.length);
							nextFn = ops.Infcur;
							for(let fn of listOfFns)  nextFn = nextFn(fn);
						break;case ')': //curry list
							if(2<=vm.loglev)console.log('parse (...) aka curry-list');
							nextFn = vm.identityFunc; //(F U) aka I
							for(let fn of listOfFns)  nextFn = nextFn(fn);
						break;case '}': //sCurry list
							if(2<=vm.loglev)console.log('parse {...} aka s-curry-list, size '+listOfFns.length);
							//syntax {} means S. {x} means S(x). {x y} means s(x)(y). {x y z} means s(s(x)(y))(z). and so on.
							if(!listOfFns.length) return ops.S;
							nextFn = listOfFn[0];
							for(let i=0; i<listOfFns.length; i++)  nextFn = ops.S(nextFn)(fn);
						break;case '>': //opmut getter list
							if(2<=vm.loglev)console.log('parse <...> aka opmut-getter-list, size '+listOfFns.length);
							//nextFn = TODO
							throw 'TODO what exactly does the < syntax do? look up that ?2 ?1 syntax (where did i put that?) - aka opmut getter list syntax. Normally only used to get from a [...] in an opmut.';
						break;default:
							throw 'Unknown pop token: '+toTok;
					}
					
					//nextFn = some interpretation of the range tok[parsing.from .. parsing.toExcl-1]
					parsing.pushFn(nextFn);
					parsing.popPopPushFnByCall();
					//TODO parsing.pushFn(nextFn); parsing.popPopPushFnByCall(); depending on if is push, pop, or loneToken etc above.
				}
				
				//FIXME pop parsing.from and parsing.toExcl to pop. FIXME thats confusing. did i mean pop 2 and push calling one on the other?
				
				//Do these depending on if is push, pop, or loneToken etc above.
				//parsing.pushFn(nextFn);
				//parsing.popPopPushFnByCall();
				
				parsing.toExcl++;
			}while(parsing.stack.length > 1); //when theres 1 thing on stack left, return it.
			//console.log('parsing, about to call '+parsing.fn+' on '+nextFn);
			//parsing.fn = parsing.fn(nextFn);
			if(!parsing.stack.length) throw 'parsing.stack is empty but should never have less than 1 fn in it';
			if(2<=vm.loglev)console.log('PARSEEND');
			return parsing.stack[parsing.stack.length-1]; //Parsing.parse returns return whatever on top of Parsing.stack at end
		};*/
		
		
		
		
		//TODO use vm.viewer.eval
		
		
		/*let testViewer = ()=>{
			TODO names like S and Pair in vm.ops.S and vm.ops.Pair, where to store those?
			in param of some instance func in Viewer, or in the fns? Or in View.localName?
			
			let code = '{}';
			
			throw 'TODO';
		};*/
		
		/*
		Add 2 more int fields, for size of val_dupDoubles and val_dupMuts,
		and include wikibinator203 ops (which can have a max of 128 ops) to,
		given a Mut, pop 2 doubles off its stack then push a multiply, UNLESS the Float64Array in the Mut is not big enough and in that case
		use something like objectThatReturns0ForAllFieldValues for all doubles outside its range etc is constant 0,
		and let stackSize wrap as twosComplement of int32, or something like that. i dont want to auto enlarge the array
		cuz that might slow it down when doing a sequence of such ops.
		Similar, some ops for copying between the double or Mut stacks in multiple Muts.
		Could use a Mut as an array of such "multiple Muts" such as having 3 stacks which is a simple way to do permutations.
		TODO figure out details of that while using it to derive (from these up to 128 ops) the y10x10rgb12 voxel system,
		or y10x10bright4 or y9x9rgb6 etc would fit in a float32 which GPU.js is limited to but CPU can do ints such as y10x10rgb12.




		TODO use 1 char long field names, but other than that, I like this design,
		and it will go in vm.ops.Mut which has these 5 things (excluding whichOpmutSpace cuz fns cant see that),
		and TODO make a hashtable in it, as a proofofconcept, combining val_dupMuts and val_dupDoubles (or maybe Int32Array view of it?).
		FIXME would it cause a problem to have to allocate dedupedFn for each potentially nondedupedFn?
		You could, in the worst case, dedup that same fn and use it as its own key,
		or simpler would be to just count doubles up from 0 to use as keys since every double can be viewed as a dedupedFn.
		TODO allocate range of idA_idB for dedupedFns, and that range will be a subset of nonnormedNaNs
			(or maybe the nonnormed negative infinities) where idA is high 32 bits idB is low 32.
		Mut = function(dedupedFn, whichOpmutSpace){
			this.key_dedupedFn = dedupedFn;
			this.key_whichOpmutSpace = whichOpmutSpace;
			
			//this.val_dedupedNum = 0;
			//this.val_dupFn = u;
			//this.val_dupDoubles = emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) and Object.setPrototypeOf null of it.
			//this.val_dupMuts = emptyFrozenMutsArray; //can replace with new Array() and Object.setPrototypeOf null of it.
			
			//TODO objectThatReturns0ForAllFieldValues andOr Object.setPrototypeOf(this.m,null); etc, for sandboxing.
		};
		Mut.prototype.val_dedupedNum = 0;
		Mut.prototype.val_dupFn = u;
		Mut.prototype.val_dupDoubles = emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) and Object.setPrototypeOf null of it.
		Mut.prototype.val_dupMuts = emptyFrozenMutsArray; //can replace with new Array() and Object.setPrototypeOf null of it.
		freeze the above few default vals somehow.
		..
		[
			(Mut [...theMutsAsInfcurList...] cbt num fn fnAsKeyA)
			(Mut [...theMutsAsInfcurList...] cbt num fn fnAsKeyB)
			(Mut [...theMutsAsInfcurList...] cbt num fn fnAsKeyA)
			...
		]
		*
		vm.Mut = function(dedupedFn, whichOpmutSpace){
			this.k = dedupedFn; //(dedupedFn,whichOpmutSpace) is primaryKey. If you call opmut stuff from inside opmut stuff, it will alloc another whichOpmutSpace recursively.
			this.o = whichOpmutSpace;
			this.a = null;
			//this.keyFn = dedupedFn;
			//this.keyNum = whichOpmutSpace;
			//can have instance fields of e (double), j (dup fn), m (dup Array of Mut), i (dup Int32Array that shares buffer with field d).
		};
		
		
		//FIXME make sure these prototype field vals get frozen so forexample, aMut.e = 5, doesnt change aMut.prototype.e to 5.
		//Test that.
		//Also test that cant get to things like __proto__ etc by generated code, so can prove its sandboxed.
		
		vm.Mut.prototype.e = 0; //a double (which implies its normed form is Node.idA and Node.idB in fn form).
		
		vm.Mut.prototype.j = u; //a dup (not necessarily deduped) fn. can replace with any fn in Mut instance //Mut.prototype.j = u; //a dup (not necessarily deduped) fn. can replace with any fn in Mut instance
		//vm.Mut.prototype.jj = vm.emptyFrozenArray; //Mut.prototype.j = u; //a dup (not necessarily deduped) fn. can replace with any fn in Mut instance //Mut.prototype.j = u; //a dup (not necessarily deduped) fn. can replace with any fn in Mut instance
		
		vm.Mut.prototype.mm = vm.emptyFrozenArray; //list of Mut. can replace with new Array(someNumber) in Mut instance
		
		vm.Mut.prototype.ii = vm.emptyFrozenIntArray; //can replace with new Int32Array(someNumber) in Mut instance. must be even size cuz shares buffer with Float64Array.
		vm.Mut.prototype.dd = vm.emptyFrozenDoublesArray; //can replace with new Float64Array(someNumber) in Mut instance
		*/
		
		vm.isMut = function(x){
			return typeof(x)=='object' && x.isWikibinator203Mut;
		};
		
		vm.defaultArrayForMut = vm.emptyFrozenDoubleArray;
		
		//fn is any deduped fn. Optional param whichOpmutSpace is any mutable js {}.
		vm.Mut = function(fn,whichOpmutSpace){
			//for vm.isMut, but you must also check typeof(thing)=='object'
			//since {isWikibinator203Mut:true, hello:'world'} is not a vm.Mut instance but is a valid js {}.
			this.isWikibinator203Mut = true;
			
			//FIXME keyNs should be the rootM from vm.startMut
			this.keyNs = whichOpmutSpace || {}; //js map {} of fn to Mut. FIXME make fn.toString give the [string id, or if small string literal then prefix concat that] of that fn.
			
			//(fn,whichOpmutSpace) is primaryKey. If you call opmut stuff from inside opmut stuff, it will alloc another whichOpmutSpace recursively.
			this.keyFn = fn; //cant be replaced (except maybe by deduping it?)
			
			//id is either 'λ' concat hex of its marklar203bId, OR a small literal string if no whitespace or syntax chars etc, or maybe other small literals.
			//TODO Might use base58 or base64 later instead of hex.
			this.fnId = fn.n.id();
			
			//ops.D
			//double val. mutable.
			//this.valNum = 0;
			//this.d = 0;
			this.d = undefined; //so its not included in vm.endMut unless something sets it first
			
			//ops.Du
			//A fn that doesnt have to be deduped, but isnt used as a key here (may be used as a key other places),
			//so it can do fast things like 
			//this.valFn = U;
			//this.p = U;
			this.p = undefined; //so its not included in vm.endMut unless something sets it first
			
			/*
			//UPDATE: 2023-5 this is supposed to be replaced by using the keys directly in mut. mutA[mutB][mutC].d for example, and can optimize as mutA.shortIdOfMutB.shortIdOfMutC.d
			//
			//map of Mut to Mut.
			//this.map = {};
			//
			//TODO key in this map is node.id() which is either a full id as string or a small
			//string (with a prefix?), either way uniquely identifies that fn.
			//
			//TODO way to lookup node and node.lam and Mut wrapper of it, look up by node.id() aka key in this map,
			//but only certain strings can be ids, make sure to exclude those that are fields in js [] etc
			//so "length" cant be an id but λlength could be,
			//and FIXME if a string is all digits such as 42 then make sure λ42 is not ambiguous,
			//whether thats node.locid() (128 bit local id in hex excluding leading zeros, prefixed by λ)
			//vs node.id() being '42' or 'λ42'.
			//
			this.valMap = []; //map and list. careful about certain keys such as length and __prototype__ or those similarly named
			Object.setPrototypeOf(this.map,null);
			*/
			
			//list of Mut
			//this.list = [];
			
			//TODO which op is this, for cbt or typevalC or typevalD of cbt, similar to ops.D or ops.Du but for cbt?
			//
			//Any primitive array, such as Uint8Array, Int32Array, Float32Array, Float64Array. Mutable if nonempty.
			//Can be replaced after the mut is created.
			//Depending on what type this is, values put in it will be truncated or dropped (TODO make it deterministic).
			//
			//Stored in [...state...] this would be a TypevalB (bitstring) or TypevalC (cbt). TODO which?
			//this.valArr = vm.emptyFrozenDoubleArray;
			this.arr = vm.defaultArrayForMut; //TODO rename .arr to .bl to match ops.Bl ops.Bli ops.Blie?

			/*
			Planned solution: picA^width etc, see below.

			Also, do I want other changes to Mut while I'm at it? How about a js list of muts, list of fns (instead of just .p), etc? js map {}. js list []. for all of those.
			mut.d -> double/number.
			mut.p -> fn
			mut.arr -> Float64Array or Int32Array or Uint8Array etc.
			mut[otherMut] -> mut.

			Now that I'm using wikib more (Im trying to generate basic canvas graphics, copying subrects of canvas to other canvas etc), i have more of a feel for how I want Mut to work. But its a hard puzzle, some things will have to be slow so other things can be fast, balance of sacrificing designs etc.

			I want to keep the "mut[otherMut] -> mut" cuz thats important for chaining x/y/z$ etc.
			I also want  new opcodes and syntax for making the last in such a chain be a $ key. Maybe x/y/$z ? x/y$z (no cuz x/y$ means something else)?
			Whatever syntax I choose, in that example it would mean go to x/y (aka (OO x y)) and in that get the value of the z key in the js {} of mut to double.

			How should the "js {} of mut to double" be stored in Treemap (after Mut stuff)? An opcode similar to OO and GoO? Vs a value of treemap or Lambda ns etc? Lets go with the "opcode similar to OO and GoO".

			Do I need to loop over them? If so, to do it deterministicly, i'd need to sort the keys, so 

			^ symbol is available. How about x/y^z ?
			picA^width
			picA^height
			I like it. Do that.

			Might also want the js[] list, which will also be a wikib[] list, of Muts, in each mut, so basically map of int to mut in a dense range, but I dont think i need a syntax just for that. Opcodes yes, syntax no.

			.............

			Naming it G cuz that letter is not used yet in single char opcode names. See addOp('G' and addOp('GE' etc.
			OLD: Naming it f for fields, like {width: 30, height: 20}, and this.arr could be a Uint8Array of this.f.width*this.f.height*4 bytes
			if its 4 bytes per canvas pixel, or whatever the array and f/fields are used for.

			No strings allowed. If you want strings, put their contents in this.arr. Cuz otherwise its hard to limit memory.
			*/
			this.g = vm.newExtraEmptyJsMap();
			//this.f = vm.newExtraEmptyJsMap();
			
		};
		
		vm.Mut.prototype.hasD = function(){
			return this.d !== undefined;
		};
		
		vm.Mut.prototype.hasP = function(){
			return this.p !== undefined;
		};
		
		//This might also be called hasArr. TODO rename mut.arr to mut.bl (arr is array, bl is blob, lazy-evaledoverlappable powOf2 aligned ranges of a Uint8Array.buffer).
		vm.Mut.prototype.hasBl_hasArr_todoRenameArrToBl = function(){
			return this.arr !== vm.defaultArrayForMut;
		};
		
		/*vm.makeMutId = fn=>{
			throw 'TODO check if its a small string literal and prefix it if so';
			//return vm.bytesToHex(fn.n.marklar203bId());
			return fn.n.id();
		};*/
		
		/*//TODO in what order? Or only caller sorts by putting in Treemap that has a comparator?
		vm.Mut.prototype.allMuts = function(){
			let map = new Map();
			this.allMutsInternal(map);
			let ret = [];
			for(let mut of map.keys()){
				ret.push(mut);
			}
			return ret;
		};*/
		
		//m is a js {} of mut.n.id() to mut. Returns js [] of instances of vm.Mut
		//TODO??? optimize this by just copying from js {} to js []? What if it misses some? this could help find the bugs.
		vm.allMuts = function(m){
			let map = new Map();
			for(let id in m){
				if(vm.isMut(m[id])){
					m[id].allMutsInternal(map);
				}
			}
			let ret = [];
			for(let mut of map.keys()){
				ret.push(mut);
			}
			return ret;
		};
		
		//fills a js Map with keys of vm.Mut instance and vals of true, as a set, to find all the Muts.
		vm.Mut.prototype.allMutsInternal = function(map){
			if(!map.has(this)){
				map.set(this,true);
				for(let id in this){
					let val = this[id];
					//UPDATE: rootM/rootMut is a js {}, not an instance of vm.Mut. Either way its keys include (tostring of) Muts.
					//mutX[mutY] = mutZ; uses mutY.n.id() as key since js {} only takes string keys. mutZ is val here.
					//In a root mut (see vm.rootMutSymbol), all muts (in same whichOpmutIndex) map to themself,
					//like rootMut[Pair(S)(T)] === Pair(S)(T), so in that case val would be Pair(S)(T)
					//and key would be Pair(S)(T).n.id(). Mut.prototype.toString returns this.n.id() so it works that way.
					if(vm.isMut(val)){
						val.allMutsInternal(map); //recurse
					}
				}
			}
			
		};
		
		vm.Mut.prototype.toString = function(){
			return this.fnId;
			//is cached there, though caching it again in Mut.fnId might be a little faster. It will usually get compiled so this isnt even called often.
			//return 'Mut_'+this.keyFn.n.id();
		};
		
		//given a fn/lambda, returns the Mut wrapper for it in this same whichOpmutSpace, and adds it to that whichOpmutSpace js {}.
		vm.Mut.prototype.fnToMut = function(fn){
			return this.keyNs[fn] || (this.keyNs[fn] = new vm.Mut(fn,this.keyNs));
		};
		
		//Call Mut on Mut to get Mut, using the fns they contain, in this same whichOpmutSpace,
		//but if this.k (the caller fn) is an opcode that allocates a new whichOpmutSpace
		//then does that recursively before returning back to this whichOpmutSpace.
		vm.Mut.prototype.call = function(mut){
			return this.fnToMut(this.keyFn(mut.keyFn));
		};
		
		
		
		
		
		
		//FIXME use variants of objectThatReturns0ForAllFieldValues?
		/*//returns a number (this.e) in case you do aMut+someNumber you get a number instead of it throwing.
		vm.Mut.toString = function(){
			return this.e;
		};*/
		vm.Mut.prototype.E = function(){
			this.e = 0;
		};
		
		vm.Mut.prototype.J = function(){
			this.j = [];
		};
		
		vm.Mut.prototype.M = function(){
			this.m = [];
		};
		
		//this.i and this.d overlap same memory
		vm.Mut.prototype.D = function(numDoubles){
			this.i = new Int32Array(numDoubles<<1);
			this.d = new Float64Array(this.i.buffer);
		};
		
		
		
		/*
		//snapshot of this Mut as a fn, to be put in a [...] as stream.
		vm.Mut.prototype.toFn = function(){
			return ops.Mut(this.mm)(this.ii)(this.e)(this.j)(this.k);
		};*/

		//get a js list of all params after 7th param, since op is known at 7 params. If has 7 or less params, the returned js list is empty.
		//vm.eval('[a (Pair S T) c]').n.params() returns [vm.eval('a'), vm.eval('(Pair S T)'), vm.eval('c')].
		vm.Node.prototype.params = function(){
			let list = this.lam;
			let jsList = [];
			while(list.n.hasMoreThan7Params()){
				jsList.push(list.n.R());
				list = list.n.L();
			}
			jsList.reverse();
			return jsList;
		};
		
		//exponential size, with just '(' 'U' and ')'.
		vm.Node.prototype.toStringOnlyParensAndU = function(){
			if(this.lam === U){
				return 'U';
			}else{
				let l = this.L().n.toStringOnlyParensAndU();
				let r = this.R().n.toStringOnlyParensAndU();
				if(l != 'U' || r != 'U'){
					return '('+l+r+')';
				}else{
					return '('+l+' '+r+')';
				}
			}
		};
		
		//FIXME use [(ObKeyVal keyA valA) (ObKeyVal keyB valB) ...] instead of [keyA valA keyB valB ...],
		//cuz thats what 
		//
		//z is (LazyEval (Lambda FuncBody [x y z] valX valY) valZ) or (Lambda FuncBody [x y z] valX ...).
		//Returns an infcurStream, in those 2 cases, [y valY x valX] or [y valY x valX],
		//since the reverse order is faster and order of the key/vals only matters if theres duplicate keys.
		//There could be duplicate keys like (Lambda FuncBody [y x y y z] ...)
		//but thats only allowed since its faster than checking for duplicates,
		//and I dont expect people to want to do that.
		//If they do, the first y in [y x y y z] becomes the last y in [z val y val y val x val y val].	
		//throw 'TODO';
		//vm.addOp('lambdaParams',false,1,'Used with (Lambda FuncBody [x y z] valX valY valZ) -> (FuncBody (LazyEval (Lambda FuncBody [x y z] valX valY) valZ)). (LambdaParams (LazyEval (Lambda FuncBody [x y z] valX valY) valZ)) -> [x valX y valY z valZ], but it can be a different number of params. Lambda takes up to (TODO find exact number) around 240-something or 250-something params.');
		vm.lambdaParamsInfcurInReverseOrder = function(z){
			//let Infcur = OP('infcur');
			
			//FIXME...
			//(Lambda FuncBody [x y z]) is 7 params of u. Lambda is 5 params of u.
			/*let Infcur = OP('infcur'), Lambda = OP('lambda'), LazyEval = OP('lazyEval');
			FIXME since Lambda is 5 params of u, there are 4 Lambda ops, not just 1,
			so the above Lambda = OP('Lambda') wont work. Also, fix that in addOp, needs to be 4 calls of addOp.
			Can check if o8 has a certain 5 bits in it and is in the right range.
			if(vm.lambdasAreSameOp(z,Lambda)){
				FIXME
				Also need to check z().curriesLeft() and compare that to the size of the [x y z] that is 7th param.
				Also what if that 7th param is not a [...] or is a [...] but with more params than lambda allows (250-somethign)? At 7th param, it must always be halted and curriesLeft known.
			}else if(vm.lambdasAreSameOp(z,LazyEval)){
			*/
				let ret = ops.Infcur;
				//let exceptLastParam = z().l().r; //(Lambda FuncBody [x y z] valX valY) without the LazyEval and valZ
				let keys = exceptLastParam;
				let vals = z;
				//FIXME if keys already has less than 7 params (so is not a Lambda call)???
				while(keys().hasMoreThan7Params()) keys = keys().l;
				//except a few edge cases (TODO), keys is [x y z] for example.
				//FIXME if its a LazyEval that was not created by Lambda reaching its last param.
				
				//FIXME is either of these right?
				//ret = ret(keys().r, vals().r); //z and valZ. get past the LazyEval, so can loop over the rest.
				ret = ret(keys().r)(vals().r); //z and valZ. get past the LazyEval, so can loop over the rest.
				
				
				keys = keys().l;
				vals = vals().l().r; //get past the LazyEval, so can loop over the rest.
				while(vals().hasMoreThan7Params()){
					ret = ret(keys().r)(vals().r);
					keys = keys().l;
					vals = vals().l;
				}
				return ret;
			/*else{
				return ops.Infcur; //empty
			}*/
		};
		
		//UPDATE: this is the old [key val key val...] way, which instead would be [(ObVal keyA valA) (ObVal keyB valB)] etc. Also see ObKeyVal and ObCbt etc.
		//reverses an infcur-like thing (normally just an infcur), 2 curries at a time,
		//like [x xval y yval z zval] vs [z zval y yval x xval].
		//FIXME what if it has even/odd the wrong number of params for key/val pairs?
		//or what if its not an infcur?
		vm.reverseStream = function(z){
			//let ret = OP('Infcur');
			let ret = ops.Infcur
			while(z().hasMoreThan7Params()){
				let key = z().r;
				z = z().l;
				let val = z().r;
				z = z().l;
				ret = ret(key)(val);
			}
			return ret;
		};
		
		vm.lambdaParamsInfcur = function(z){
			return vm.reverseStream(vm.lambdaParamsInfcurInReverseOrder());
		};
		
		vm.reverseInfcurlikeList = function(infcurlikeList){
			vm.prepay(1,1);
			//TODO optimize by using funcall caching (which an op would automatically do). Call an op that reverses an infcurlikelist. TODO make such an op.
			//let ret = OP('infcur');
			let ret = ops.Infcur;
			//let ret = vm.ops.infcur;
			//if(!ret) throw 'FIXME theres no infcur op, Im probably still building the VM';
			while(infcurlikeList().hasMoreThan7Params()){
				ret = ret(infcurlikeList().r); //does vm.prepay
				infcurlikeList = infcurlikeList().l;
			}
			return ret;
		};
		
		//let prevProto = vm.Node.prototype;
		//prevProto
		//vm.Node.prototype.prototype = vm;
		
		/*
		opcodeToO8 doesnt exist anymore
		//map of op name (such as 's' or 'pair' to lambda
		vm.ops = {};
		for(let opName in vm.opcodeToO8){
			let o8 = vm.opcodeToO8[opName];
			let lambda = vm.o8ToLambda(o8);
			lambda.localName = opName;
			vm.ops[opName] = lambda;
		}*/
		
		vm.defaultTyFunc = fn=>(fn.n.opInfo().compileMap.ty || 'unknown'); //default is just get .ty (such as 'bit' or 'num' or 'key') thats parallel to .tyFunc.
		let updateOp = o8=>{
			let lambda = vm.o8ToLambda(o8);
			//The difference between a builtInName and a localName is the builtInName can be used the first time it occurs,
			//but the localName has to be displayed as expanded once, then #ItsLocalName, before the next time just append 'ItsLocalName'.
			let opInfo = vm.opInfo[o8];
			lambda.builtInName = lambda.localName = opInfo.name;
			lambda.opAbbrev = vm.opInfo[o8].prefix; //TODO rename prefix to opAbbrev
			vm.ops[lambda.localName] = lambda; // -> fn
			vm.opAbbrevs[lambda.opAbbrev] = lambda; //Example: T is , and Seq is _. -> fn
		};
		
		for(let o8=1; o8<256; o8++){ //excludes o8 of 0 aka evaling.
			updateOp(o8);
		}

		//happens later in VM boot for all 256 opcodes
		let updateOp2 = o8=>{
			let opInfo = vm.opInfo[o8];
			if(!opInfo.compileMap){
				throw 'No compileMap for o8='+o8;
			}
			if(!opInfo.compileMap.langs){
				throw 'No compileMap.langs for o8='+o8;
			}
			if(!opInfo.compileMap.tyFunc){ //Dont replace if it already has one, like ops.T has a tyFunc that returns 'bit' for T and 'key' for anything else such as ,x aka (T x).
				opInfo.compileMap.tyFunc = vm.defaultTyFunc;
			}
		};
		
		//The Lambda and MutLam ops are updated after the main loop^ that makes ops,
		//cuz most ops start with 7 params but Lambda and MutLam start with 6.
		//TODO also do this for MutLam when get that op working.
		


		let lamMsg = 'Updating vm.opInfo of ops that read more about their 7th param than Isleaf or not about it. Lambda and Mutlambda are both 6 params and use the list size of 7th param to choose their number of curries left.';
		console.log('START: '+lamMsg);

		//Lambda is 6 params waiting for a [...]. Lambdo has 7th param of (U U).
		//(Doing same thing for MutLam but it has 1 more param that is a namespace)
		console.log('vm.o8OfLambda='+vm.o8OfLambda);
		//let Lambda = vm.o8ToLambda(vm.o8OfLambda);
		//Lambda.localName = Lambda.builtInName = 'Lambda';
		let lamOpInfo = vm.opInfo[vm.o8OfLambda];
		//lamOpInfo.name = 'Lambda';
		lamOpInfo.name = 'λ'; //instead of Lambda
		//lamOpInfo.description = lamOpInfo.name+'/'+lamOpInfo.description;
		updateOp(vm.o8OfLambda);
		console.log('Updated Lambda op: '+JSON.stringify(vm.opInfo[vm.o8OfLambda]));


		//Mutlambda is 6 params waiting for a [...]. Mutlambdo has 7th param of (U U).
		console.log('vm.o8OfMutlambda='+vm.o8OfMutlambda);
		let mutlamOpInfo = vm.opInfo[vm.o8OfMutlambda];
		mutlamOpInfo.name = 'Λ'; //instead of Mutlambda
		updateOp(vm.o8OfMutlambda);
		console.log('Updated Mutlambda op: '+JSON.stringify(vm.opInfo[vm.o8OfMutlambda]));

		console.log('END: '+lamMsg);




		
		//prefix of normal (utf8) text
		vm.utf8Prefix = vm.ops.TypevalB(U);
		
		//cuz vm.bit func needs these. todo opcode order.
		//vm.t = TODO;
		//vm.f = TODO;
		
		vm.isPowOfTwo = i=>!(i&(i-1));
		
		vm.log2OfPowOf2ThatFitsInInt = powOf2=>(31-Math.clz32(powOf2));

		vm.verifyPowOf2BytesElseThrowTodo = num=>{
			if(!vm.isPowOfTwo(num)) throw 'TODO allow non-power-of-two number of bytes (by setting its prototype to something like objectThatReturns0ForAllFieldValues but that pads a 1 bit first then all 0s): '+num;
		};
		
		
		
		
		
		
		/* FIXME theres only sizes cbt1 cbt2 cbt4 cbt8 cbt16 in this, not for example cbt15. So I'm splitting those into separate vars,
		and to keep it loading fast (as the VM is not well optimized yet 2022-7) I'm just doing up to cbt8.
		
		//Flyweight design pattern for all possible cbt1 to cbt16.
		//Each of these cbt1 to cbt16 can be half of an int, 1/4 of a double, etc.
		//TODO in more optimized code it will wrap Float64Array, Int32Array, etc, without deduping it down to 16 bits, can handle bigdata.
		//vm.cacheSmallCbt[(1<<16)+any16Bits] is a fn of those bits.
		//It has all possible cbt1 cbt2 ... cbt16 values. That includes every utf16 char and uint16 or int16 etc.
		//Its binheap indexing but does not use index 1 cuz ops.Bit0 and ops.Bit1 are its 2 roots, at indexs 2 and 3.
		//How many fns per binheaplike layer?: 2 4 8 16 32 ... 65536, so dont use index 1 (and as usual in binheap dont use index 0).
		//FIXME if this doesnt let it load fast, then lazy eval those, leaving most of the size (1<<17) list as nulls until used,
		//but probably it will be fast enough to always preload 1<<17 fns when the VM loads,
		//which should in theory only delay page load by a small fraction of a second when the VM is well optimized (TODO).
		vm.cacheSmallCbt = [null, null, ops.Bit0, ops.Bit1];
		if(!ops.Bit0) throw 'No ops.Bit0 to make cacheSmallCbt';
		for(let i=4; i<(1<<17); i++){
			let j = Math.floor(i/2);
			let parent = vm.cacheSmallCbt[j];
			if(!parent){
				throw 'cacheSmallCbt error i='+i+' j='+j+' parent='+parent;
			}
			vm.cacheSmallCbt[i] = parent(vm.bit(i&1)); //call parent on ops.Bit0 or ops.bit1
		}
		*/
		vm.cbt1 = [ops.Bit0, ops.Bit1]; //the 2 bits
		for(let i=0; i<vm.cbt1.length; i++) vm.cbt1[i].localName = '0b'+i;
		vm.cbt2 = [ vm.cbt1[0](vm.cbt1[0]), vm.cbt1[0](vm.cbt1[1]), vm.cbt1[1](vm.cbt1[0]), vm.cbt1[1](vm.cbt1[1]) ]; //all possible 2 bits
		for(let i=0; i<4; i++) vm.cbt2[i].localName = '0b'+(''+(4+i).toString(2)).substring(1); //0b00 0b01 0b10 0b11
		vm.cbt4 = []; //all possible 4 bits
		for(let high=0; high<4; high++) for(let low=0; low<4; low++) vm.cbt4.push(vm.cbt2[high](vm.cbt2[low]));
		for(let i=0; i<16; i++) vm.cbt4[i].localName = '0b'+(''+(16+i).toString(2)).substring(1); //0b0000 to 0b1111
		vm.cbt8 = []; //all possible bytes
		for(let high=0; high<16; high++) for(let low=0; low<16; low++) vm.cbt8.push(vm.cbt4[high](vm.cbt4[low]));
		for(let i=0; i<256; i++) vm.cbt8[i].localName = '0b'+(''+(256+i).toString(2)).substring(1); //0b00000000 to 0b11111111
		vm.cbt16 = []; //all possible 16 bits. starts null. created when observed.
		vm.Cbt16 = i=>(vm.cbt16[i] || (vm.cbt16[i] = vm.cbt8[(i>>8)&255](vm.cbt8[i&255])));
		vm.Cbt32 = i=>(vm.Cbt16((i>>16)&0xffff)(vm.Cbt16(i&0xffff))); //uses funcall caching as usual, which is slower than the caching in vm.cbt1 .. vm.cbt16.
		
		//index is in units of hex digits so 4 bits each
		vm.hexToCbtII = (hex,from,toExcl)=>{
			let len = toExcl-from;
			if(len == 1){
				return vm.cbt4[vm.mapOfHexDigitToInt[hex[from]]];
			}else if(len == 2){
				return vm.cbt8[vm.mapOfDoubleHexDigitsToInt[hex.substring(from,toExcl)]];
			}else{
				let mid = (from+toExcl)>>1;
				return vm.hexToCbtII(hex,from,mid)(vm.hexToCbtII(hex,mid,toExcl)); //Example: 512 bits called on 512 bits is 1024 bits.
			}
		}
		
		vm.hexToCbt = hex=>{
			if(!vm.isPowOfTwo(hex.length)){
				throw 'Not a powOf2 number of hex digits in: '+hex;
			}
			return vm.hexToCbtII(hex,0,hex.length);
		};
		
		//wraps in a Typeval.
		vm.wrapDouble = d=>vm.typeDouble(vm.wrapDoubleRaw(d));
		
		//Returns a cbt64 of the double bits.
		//FIXME norm the double (infinities, nans, etc) Does js already do that?
		//FIXME node.idA and node.idB should be copied from the double bits, and also exist in node.blob as Uint8Array(8) (or an 8 byte range in a bigger one).
		//but for now I'm just calling Cbt32 twice.
		vm.wrapDoubleRaw = d=>{
			vm.overlappingBufferDouble[0] = d;
			let low32 = vm.overlappingBufferInts[0];
			let high32 = vm.overlappingBufferInts[1];
			//let high32 = vm.overlappingBufferInts[0];
			//let low32 = vm.overlappingBufferInts[1];
			return vm.Cbt32(high32)(vm.Cbt32(low32));
		};
		
		vm.twoIntsToDouble = function(high32, low32){
			//FIXME bigEndian or littleEndian and of ints or bytes etc?
			vm.overlappingBufferInts[0] = low32;
			vm.overlappingBufferInts[1] = high32;
			//vm.overlappingBufferInts[0] = high32;
			//vm.overlappingBufferInts[1] = low32;
			return vm.overlappingBufferDouble[0];
		};
		
		//see vm.Node.prototype.d to get double
		
		//FIXED by verifying littleEndian at VM boot. console.log("FIXME 'Typed array views are in the native byte-order (see Endianness) of your platform' -- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays . It has to be consistent across all wikibinator203 VMs.");
		
		//vm.cbt1 to vm.Cbt32 refer to 1-32 bits, not bytes.
		vm.mustDedupIfAtMostThisManyBytes = 32; //Any wrapper of a Uint8Array this size or smaller must be deduped. Others can be lazy-deduped (which may happen later or never).

		//vm.xt('NewBl 3 make empty byte array, FIXME should the padding be 1 bit long or 1 byte long?', Evv('(NewBl b* 0)'), Evv('(TypevalB b* Bit1)'));
		vm.minPaddingBits = 1;
		//vm.minPaddingBits = 8;
		
		
		
		//from and to are optional
		vm.CbtOfBytesDedup = (bytes,from,to)=>{
			if(from>=to){
				throw from+' == from >= to == '+to;
			}
			if(from === undefined) from = 0;
			if(to === undefined) to = bytes.length;
			vm.verifyPowOf2BytesElseThrowTodo(to-from);
			switch(to-from){
				case 1: return vm.cbt8[bytes[from]];
				case 2: return vm.Cbt16((bytes[from]<<8)|bytes[from+1]);
				case 4: return vm.Cbt32((bytes[from]<<24)|(bytes[from+1]<<16)|(bytes[from+2]<<8)|bytes[from+3]);
				default:
					let mid = (from+to)>>1; //FIXME this should always be an integer. is it?
					let left = vm.CbtOfBytesDedup(bytes,from,mid);
					let right = vm.CbtOfBytesDedup(bytes,mid,to);
					return left(right);
			}
		};
		
		//from and to are optional
		vm.CbtOfBytes = (bytes,from,to)=>{
			if(from === undefined) from = 0;
			if(to === undefined) to = bytes.length;
			if(bytes.length <= vm.mustDedupIfAtMostThisManyBytes){
				//does verifyPowOf2BytesElseThrowTodo
				return vm.CbtOfBytesDedup(bytes,from,to);
			}else{
				vm.verifyPowOf2BytesElseThrowTodo(to-from);
				//not deduped:
				return vm.lambdize(new vm.Node(vm,null,null,bytes,from,to)); //can lazy-eval create its l and r childs pointing into subranges of from and to, if observed (FIXME todo).
				//FIXME if theres a null l or l in node and that fails (such as "null is not a function" thrown maybe) then its cuz of the above line,
				//which is correct but code that calls .l or .r should change, OR maybe define the .l and .r fields using javascript getters and setters if its not slow.
			}
		};

		//finds or creates .l (lazyEval), especially for wrappers of Uint8Array in .blob which start with .l and .r being null.
		vm.Node.prototype.L = function(){
			if(!this.l){
				if(this.blob){
					//If its a byte or smaller its already preallocated in vm.cbt8[...] etc, so dont check size here.
					this.l = vm.CbtOfBytes(this.blob, this.blobFrom, (this.blobTo+this.blobFrom)/2); //has same .idA and .idB (of the Uint8Array) but different range
				}else{
					throw 'Not a blob. What kind of lazyeval (of L) is this?';
				}
			}
			return this.l;
		};

		//finds or creates .r (lazyEval), especially for wrappers of Uint8Array in .blob which start with .l and .r being null.
		vm.Node.prototype.R = function(){
			if(!this.r){
				if(this.blob){
					//If its a byte or smaller its already preallocated in vm.cbt8[...] etc, so dont check size here.
					this.r = vm.CbtOfBytes(this.blob, (this.blobTo+this.blobFrom)/2, this.blobTo); //has same .idA and .idB (of the Uint8Array) but different range
				}else{
					throw 'Not a blob. What kind of lazyeval (of R) is this?';
				}
			}
			return this.r;
		};
		
		//Thats 1 double. For array use vm.typeDoubles(TheArrayToWrap) aka {TypevalC application/x-IEEE754-doubles TheArrayToWrap}.
		//(((new syntax: {} call. () infcur. [] sCurryListButTOfFirst. <> sCurryList))).
		//If its just the 64 bits of a double, it will display as 0x0000000000000000 (whatever 64 bits), without an interpretation of the bits.
		//let isDoubleLiteral = FN.l===vm.typeDouble && FN.r.cbtHeight()===6;
		vm.Node.prototype.isDouble = function(){
			//If !this.l, like if this.blob exists but its childs are lazyEvals, then its not a double, since a double is a call of TypevalC.
			return this.l===vm.typeDouble && this.r.n.cbtHeight()===6;
		};
		
		
		/*
		//from and to are optional
		vm.CbtNodeOfBytesDedup = (bytes,from,to)=>{
			if(from>=to){
				throw from+' == from >= to == '+to;
			}
			if(from === undefined) from = 0;
			if(to === undefined) to = bytes.length;
			vm.verifyPowOf2BytesElseThrowTodo(to-from);
			switch(to-from){
				case 1: return vm.cbt8[bytes[from]];
				case 2: return vm.Cbt16((bytes[from]<<8)|bytes[from+1]);
				case 4: return vm.Cbt32((bytes[from]<<24)|(bytes[from+1]<<16)|(bytes[from+2]<<8)|bytes[from+3]);
				default:
					let mid = (from+to)>>1; //FIXME this should always be an integer. is it?
					let left = vm.CbtOfBytesDedup(bytes,from,mid);
					let right = vm.CbtOfBytesDedup(bytes,mid,to);
					return left(right);
			}
		};
		
		vm.CbtOfBytesDedup = (bytes,from,to)=>vm.lambdize(vm.CbtNodeOfBytesDedup(bytes,from,to));
		
		//from and to are optional
		vm.CbtNodeOfBytes = (bytes,from,to)=>{
			if(from === undefined) from = 0;
			if(to === undefined) to = bytes.length;
			if(bytes.length <= vm.mustDedupIfAtMostThisManyBytes){
				//does verifyPowOf2BytesElseThrowTodo
				return vm.CbtNodeOfBytesDedup(bytes,from,to);
			}else{
				vm.verifyPowOf2BytesElseThrowTodo(to-from);
				//not deduped:
				return new vm.Node(vm,null,null,bytes,from,to); //can lazy-eval create its l and r childs pointing into subranges of from and to, if observed (FIXME todo).
				//FIXME if theres a null l or l in node and that fails (such as "null is not a function" thrown maybe) then its cuz of the above line,
				//which is correct but code that calls .l or .r should change, OR maybe define the .l and .r fields using javascript getters and setters if its not slow.
			}
		};
		
		vm.CbtOfBytes = (bytes,from,to)=>vm.lambdize(vm.CbtNodeOfBytes(bytes,from,to));
		*/
		


		
		vm.contentTypeBitstring = ct=>vm.ops.TypevalB(ct);

		vm.contentTypeCbt = ct=>vm.ops.TypevalC(ct);
		
		console.log('FIXME type application/x-IEEE754-double (UPDATE: its just d now) vs type application/x-IEEE754-doubles (UPDATE: its just d* now) has a problem that one is a raw cbt and the other is a bitstring cbt. Maybe there should be 2 typeval opcodes, one for raw cbt (thats always a powOf2) and one for bitstring? But, they are interchangible in that if you know the bitstring content you can generate the padding and therefore the rest of the double, so its probably ok.');
		
		vm.typeByte = vm.contentTypeCbt('b'); //TypevalB
		
		vm.typeInt = vm.contentTypeCbt('i'); //TypevalC
		
		//a cbt64 of the double bits, without padding.
		//The -cbt64 ending means its only the bits before the padding,
		//and the padding (which may or may not be stored),
		//as usual in cbt is a 1 bit then 0s until next powOf2 size.
		//This means that with padding, its always exactly 64 bits,
		//but as a bitstring, to fit with the model of contentTypes being of a bitstring,
		//part of the content is viewed as padding, whichever part would be rebuilt by padding whats left.
		//FIXME it might be breaking when type doesnt fit in a literal (has to callpair it),
		//since stringLiterals arent fully working yet 2022-8-18.
		//vm.typeDouble = vm.contentType('application/x-IEEE754-double-cbt64');
		//vm.typeDouble = vm.contentTypeCbt('application/x-IEEE754-double'); //TypevalC
		vm.typeDouble = vm.contentTypeCbt('d'); //TypevalC
		//vm.typeFloat = vm.contentType('application/x-IEEE754-float-cbt64');
		vm.typeFloat = vm.contentTypeCbt('f'); //TypevalC
		
		//TODO typeBytes but is it Uint8Array, Int8Array, or Uint8ClampedArray?
		
		vm.typeBytes = vm.contentTypeBitstring('b*'); //TypevalB
		
		vm.typeInts = vm.contentTypeBitstring('i*'); //TypevalB

		//a bitstring of 0 or more doubles. Bitstring means it has padding (a 1 then 0s until next powOf2 size).
		//vm.typeDoubles = vm.contentTypeBitstring('application/x-IEEE754-doubles'); //TypevalB
		vm.typeDoubles = vm.contentTypeBitstring('d*'); //TypevalB
		vm.typeFloats = vm.contentTypeBitstring('f*'); //typevalB
		
		/* just use cbt by itself.
		//FIXME if its a powOf2 number of bytes, especially 2**22 bytes for 1024x1024 graphics and 4 bytes per pixel,
		//then the cbt will normally be a raw cbt (no padding) instead of twice that size (to pad a 1 bit then 0s until next powOf2),
		//so need a contentType for that?
		vm.typeBytes = vm.contentType('application/octet-stream');
		*/
		
		//Its suggested this be the only contentType whose first param is not a string, is how to make a utf8 string,
		//though other combos can happen since the math allows it.
		//Other contentTypes use such a string in their first param, like (Typeval application/x-IEEE754-float 0x40490fdb) is float pi.
		vm.typeUtf8 = vm.contentTypeBitstring(U); //TypevalB. This is normally the only TypevalB whose content is not a cbt (its U), but any combo is technically allowed, within same number of params.
		
		
		for(let o8=0; o8<256; o8++){
			updateOp2(o8);
		}
		
		
		//if(l != L) throw 'with(ops) isnt working for L';
		//console.log('testing with(ops): L='+L+' l='+l);	
		
		//FIXME rename s to S, r to R, t to T, etc, in vm "let" vars, since in the default wikibinator203 syntax
		//starting with a capital letter means #Name of a fn,
		//and starting with lowercase (if no whitespace) means string literal.
		//but it will take time to find single letter like that, or a good regex.
		//For now I'm making both vars, s and S, t and T, so I can at least stop using the lowercase one in new code.
		let s = ops.S;
		let S = ops.S;
		let l = ops.L;
		let L = ops.L;
		let r = ops.R;
		let R = ops.R;
		let t = ops.T;
		let T = ops.T;
		let f = ops.F;
		let F = ops.F;
		let pair = ops.Pair;
		let Pair = ops.Pair;
		let ident = F(U);
		let Ident = ident;
		
		//let E = vm.eval; //lambda eval, string->fn
		
		vm.test = (testName, a, b)=>{
			if(a == b){
				if(0<=vm.loglev)console.log('Test pass: '+testName+', both equal '+a);
			}else{
				throw ('Test '+testName+' failed cuz '+a+' != '+b);
			}
		};
		
		vm.testEval = (wikibinator203Code, shouldReturnThis)=>{
			vm.test('testEval '+wikibinator203Code, vm.eval(wikibinator203Code), shouldReturnThis);
		};
		
		vm.temp = {};
		vm.temp.breakpointOn = false; //used in some browser debugger conditional breakpoints
		vm.temp.skipTestEval = true; //FIXME
		
		vm.test('test_tokensListToPushPopPointers',
			vm.tokensListToPushPopPointers(['(','hello',' ','[','(',')','a',' ','b','c',']',')','world'])+'',
			'11,1,2,10,5,4,6,7,8,9,3,0,12');
		//'(','hello',' ','[','(',')','a',' ','b','c',']',')','world'
		//11 ,1      ,2  ,10 ,5  ,4  ,6  ,7  ,8  ,9  ,3  ,0  ,12
		
		//a few basic tests...
		vm.test('tie the quine knot', vm.identityFunc, l(u));
		vm.test('tie the quine knot 2', vm.identityFunc, f(u));
		vm.test('tie the quine knot 3', l(u), u(u)(u)(u)(u)(u)(u)(u)(u));
		vm.test('tie the quine knot 4', r(u), u);
		vm.test('tie the quine knot 5 aka l(x)(r(x)) equals x, for any x (in this case x is u)', l(u)(r(u)), u);
		vm.test('tie the quine knot 6', u().idA, 0);
		vm.test('tie the quine knot 7', u().idB, 0); //TODO replace all someLambda().something with someLambda.n.something, and remove the === undefined check in lambdize.
		vm.test('tie the quine knot 8', u().blobFrom, 0);
		vm.test('tie the quine knot 9', u().blobTo, 0);
		vm.test('tie the quine knot 10', u.hashInt, 1);
		vm.test('tie the quine knot 11', vm.hash2Nodes(l(u)(), r(u)()), u.hashInt);
		vm.test('l(x)(r(x)) equals x, for any x (in this case x is s)', l(s)(r(s)), s);
		vm.test('l(x)(r(x)) equals x, for any x (in this case x is l)', l(l)(r(l)), l);
		vm.test('l(x)(r(x)) equals x, for any x (in this case x is r)', l(r)(r(r)), r);
		vm.test('s(t)(t)(l) which should be an identityFunc', s(t)(t)(l), l);
		vm.test('check dedup of s(t)(t)', s(t)(t), s(t)(t));
		vm.test('s(t)(t) called on itself returns itself since its an identityFunc', s(t)(t)(s(t)(t)), s(t)(t));
		vm.test('o8/opcode of u', u().o8(), 1);
		vm.test('o8/opcode of u(u)', u(u)().o8(), 2);
		vm.test('check dedup of u(u)', u(u), u(u));
		let uu = u(u);
		vm.test('o8/opcode of u(uu)', u(uu)().o8(), 3);
		vm.test('o8/opcode of u(uu)(uu)(uu)(uu)(u)(uu)().o8()', u(uu)(uu)(uu)(uu)(u)(uu)().o8(), 125);
		vm.test('o8/opcode of u(uu)(uu)(uu)(uu)(uu)(uu)', u(uu)(uu)(uu)(uu)(uu)(uu)().o8(), 127);
		vm.test('(l x (r x)) equals x forall x, deeper', l(l)(r(l))(s)(l(r)(r(r))(s)), s);
		vm.test('(l x (r x)) equals x forall x, deeper 2', l(l)(r(l))(pair(s)(l))(l(r)(r(r))(pair(s)(l))), pair(s)(l));
		vm.test('callParamOnItself(pair)->pair(pair)', s(ident)(ident)(pair), pair(pair));
		vm.test('callParamOnItself(pair)->pair(pair) 2 different identityFuncs', s(ident)(s(t)(t))(pair), pair(pair));
		
		let tt = ["(","Tm#","(","Treemap"," ","GodelLessThan",")"," ","Em#","(","EmptyTreemap"," ","GodelLessThan",")"," ","hello"," ","world"," ","Em"," ","hello",")"];
		vm.test('test_isUnaryMiddleOrRight_Tm_1 should be false', vm.isUnaryMiddleOrRight(tt, 1), false);
		
		if(1<=vm.loglev)console.log('Starting very basic vm.eval tests');
		
		vm.temp.breakpointOn = true;

		if(!vm.temp.skipTestEval){		
			vm.testEval('U',U);
			vm.testEval('S',S);
			vm.testEval('T',T);
			vm.testEval('L',L);
			vm.testEval('R',R);
			vm.testEval('Pair',Pair);
			
			vm.testEval('(S T)',S(T));
		}
		
		
		
		
		/*
		if(vm.identityFunc != l(u)) throw 'Failed to tie the quine knot. identityFunc != l(u)';
		if(l(s)(r(s)) != s) throw 'Failed l(x)(r(x)) equals x, for any x (in this case x is s)';
		if(l(u)(r(u)) != u) throw 'Failed l(x)(r(x)) equals x, for any x (in this case x is u)';
		if(l(l)(r(l)) != l) throw 'Failed l(x)(r(x)) equals x, for any x (in this case x is l)';
		if(l(r)(r(r)) != r) throw 'Failed l(x)(r(x)) equals x, for any x (in this case x is l)';
		if(s(t)(t)(l) != l) throw 'Failed s(t)(t)(l) which should be an identityFunc';
		if(s(t)(t) != s(t)(t)) throw 'Failed s(t)(t) == s(t)(t)';
		if(s(t)(t)(s(t)(t)) != s(t)(t)) throw 'Failed s(t)(t)(s(t)(t))';
		if(vm.identityFunc != f(u)) throw 'vm.identityFunc != f(u)';
		*/
		
		
		//This optimization makes it fast enough to use l(lambda) and r(lambda) instead of lambda().l and lambda().r.
		//dont FuncallCache things that instantly return and cant make an infinite loop.
		l.n.pushEvaler((vm,func,param)=>(param.n.l || param.n.L())); //param.n.L() triggers lazyEval of viewing the left or right half of range of a wrapped Uint8Array.
		r.n.pushEvaler((vm,func,param)=>(param.n.r || param.n.R()));
		vm.identityFunc().pushEvaler((vm,func,param)=>param); //FIXME wrap param in case its number or string
		//TODO change to someFunc.n.stuff, instead of someFunc().stuff .
		//vm.identityFunc().pushEvaler((vm,func,param)=>{ console.log('optimizedIdentityFunc'); return param; });
		//TODO pushEvaler for isleaf etc
		
		ops.Jit.n.pushEvaler(vm.evalers.evalerByJsTranspile);
		
		
		
		
		//'TODO TDD for Names# etc, but get the basics of parsing, eval, (Lambda [x y z] ...) MutLam, etc, working first.'()
		
		if(1<=vm.loglev)console.log('TODO run a few more tests after these pushEvaler optimizations since in some fns (aNode.evaler) they replace vm.rootEvaler (which becomes aNode.evaler.prev, but you can still use rootEvaler there by setting aNode.evaler.on=false; and would still use whichever evaler, per node, has evaler.on==true, which is designed that way to make testing of combos of evalers easy at runtime.');
		

		//vm.stack* (stackTime stackMem stackStuff) are "top of the stack", used during calling lambda on lambda to find/create lambda.
		//vm.stackTime = 1000000; //fill these back up before starting another call at bottom of stack, to avoid running out, but not until the stack becomes empty.
		//vm.stackMem = 1000000;
		//vm.stackStuff = vm.defaultStackStuff;
		vm.refill();
		
		//TODO tests...
		//vm.eval('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) hello world Em)')+''

		
		
		vm.booted = true;
		console.log('vm.booted = true; About to run more tests.');
		
		vm.test('Treemap size 1 hello returns world', vm.eval('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) hello world Em hello)'), vm.eval('world'));
		//GodelLessThan compares first by height, so im changing ghi to ghijk so its the same height as hello.
		//bitstrings go in cbt of powOf2 size, with the last 1 bit being the first bit of padding.
		//Theres also a (TypevalC U) prefix of that meaning utf8 text.
		vm.test('Treemap size 3 hello returns world', vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) abc 5 Em) ghijk 6 (Tm Em hello world Em) hello)'), vm.eval('world'));
		vm.test('Treemap size 3 ghijk returns 6',
			vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) abc 5 Em) ghijk 6 (Tm Em hello world Em) ghijk)'),
			vm.eval('6'));
		vm.test('Treemap size 3 bbb not found returns U', vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) abc 5 Em) ghijk 6 (Tm Em hello world Em) bbb)'), U);
		let Em = vm.ops.EmptyTreemap(vm.ops.GodelLessThan);
		vm.test('PutNoBal first key/val into an EmptyTreemap', vm.ops.PutNoBal(vm.ops.L)(vm.ops.R)(Em),
			vm.ops.Treemap(vm.ops.GodelLessThan)(Em)(vm.ops.L)(vm.ops.R)(Em));
			
		vm.test('treemapHeight of (EmptyTreemap GodelLessthan)', Em.n.treemapHeight(), vm.eval('1'));
			
		let CD = vm.ops.PutNoBal('c')('d')(Em);
		vm.test('treemapHeight of CD', CD.n.treemapHeight(), 2);
		let CDEF = vm.ops.PutNoBal('e')('f')(CD);
		vm.test('treemapHeight of CDEF', CDEF.n.treemapHeight(), 3);
		let ABCDEF = vm.ops.PutNoBal('a')('b')(CDEF);
		//TODO test this treemapHeight when DoAvlBal is working and is used.
		vm.ABCDEF = ABCDEF; //an example treemap
		vm.test('ABCDEF a -> b', ABCDEF('a'), vm.eval('b'));
		vm.test('ABCDEF c -> d', ABCDEF('c'), vm.eval('d'));
		vm.test('ABCDEF e -> f', ABCDEF('e'), vm.eval('f'));

		vm.test('content-type of double is d and goes in a TypevalC', vm.ops.L(3), vm.ops.TypevalC('d'));
		
		let AABB = vm.eval('AA#,BB#(* *)');
		vm.test('namingWithUnarySyntax 1tf', AABB+'', 'AA#,BB#(* *)');
		vm.test('Before naming it Abc: eval of ,,_[a b c] tostring is same', vm.eval(',,_[a b c]')+'', ',,_[a b c]');
		if(vm.namesAttachRightToLeftInUnary){
			console.log('Doing vm.namesAttachRightToLeftInUnary==true tests');
			vm.test('namingWithUnarySyntax 2t', AABB.localName, 'AA');
			vm.test('namingWithUnarySyntax 3t', L(AABB).localName, 'T');
			vm.test('namingWithUnarySyntax 4t', L(AABB).opAbbrev, ',');
			vm.test('namingWithUnarySyntax 5t', vm.eval('[AA#,BB#(* *) AA]'), vm.eval('[(T (* *)) (T (* *))]'));
			vm.test('namingWithUnarySyntax 6t',
				vm.eval('[Comcomundabc#,Commaunderscoreabc#,_Abc#[a b c] Abc left (L Commaunderscoreabc) right (R Commaunderscoreabc) labc (L Abc) rabc (R Abc)]')+'',
				'[Comcomundabc#,Commaunderscoreabc#,_Abc#[a b c] Abc left T right _Abc labc [a b] rabc c]');
				//FIXME 2022-12-16 The T was ( instead: [Comcomundabc#,Commaunderscoreabc#,_Abc#[a b c] Abc left ( right _Abc labc [a b] rabc c]
		}else{
			console.log('Doing vm.namesAttachRightToLeftInUnary==false tests (these dont work as of 2022-12-16 but they dont need to, just use vm.namesAttachRightToLeftInUnary==true which is the better syntax and I plan to use it from now on.');
			vm.test('namingWithUnarySyntax 2f', L(AABB).localName, 'AA');
			vm.test('namingWithUnarySyntax 3f', AABB.localName, null);
			vm.test('namingWithUnarySyntax 5f', vm.eval('[AA#,BB#(* *) AA]'), vm.eval('[(T (* *)) T]'));
		}
		vm.test('namingWithUnarySyntax 25tf', R(AABB).localName, 'BB');
		vm.test('namingWithUnarySyntax 26tf', L(AABB), vm.ops.T);
		vm.test('namingWithUnarySyntax 27tf', R(AABB), vm.ops['*'](vm.ops['*']));
		vm.test('namingWithUnarySyntax 28tf', L(R(AABB)), vm.ops['*']);
		
		vm.test('lambda tostring name of prefix with childs, (Pl#(Pair L) Pl)', vm.eval('(Pl#(Pair L) Pl)')+'', '(Pl#(Pair L) Pl)');
		vm.test('lambda tostring name of prefix with childs, (Pm#(Pair L) x)', vm.eval('(Pm#(Pair L) x)')+'', '(Pm#(Pair L) x)');
		vm.test('lambda tostring name of prefix with childs, (Pn#[Pair R] x)', vm.eval('(Pn#[Pair R] x)')+'', '[Pn#[Pair R] x]');
		
		vm.test('6*6+8*8===10**2', vm.eval('(+ (* 6 6) (* 8 8))'), vm.eval('(** 10 2)'));
		
		vm.test('[ and ] display in {[hello world] abc}. It was displaying as {hello world abc}', vm.eval('{[hello world] abc}')+'', '{[hello world] abc}');
		
		vm.test('<a> becomes ,a', vm.eval('<a>')+'', ',a');
		
		let code345 = '<a b>';
		vm.test(code345+' parses and tostrings to itself', vm.eval(code345)+'', code345);
		
		let code525 = '<<a b c> d e>';
		vm.test(code525+' parses and tostrings to itself', vm.eval(code525)+'', code525);
		
		let code535 = '<,,,,,<a b c> d e>';
		vm.test(code535+' parses and tostrings to itself', vm.eval(code535)+'', code535);
		
		let code545 = '<,<a b c> d e>';
		vm.test(code545+' parses and tostrings to itself', vm.eval(code545)+'', code545);
		
		let code3434345 = '<hello world <<<a b c [d e] f> g> zz>>';
		vm.test(code3434345+' parses and tostrings to itself', vm.eval(code3434345)+'', code3434345);
		
		vm.test('{,a b c d} becomes <a b c d>', vm.eval('{,a b c d}')+'', '<a b c d>');
		
		vm.test('{,a b c d} becomes <a b c d>', vm.eval('{,a b c d}')+'', '<a b c d>');
		
		vm.test('(<+ <* I#(F U) I> ,3> 10)', vm.eval('(<+ <* I#(F U) I> ,3> 10)'), '103');
		
		//FIXME this broke around 2023-3-8 when changing some opcodes, might have removed vm.ops.KE and been planning to replace it with O or Put or something. See O OO GoO D Dup Blob ops etc.
		//Moving this to an extraTest.
		//vm.test('treemap in _[] with KE, basics. FIXME it shouldnt keep the Tm name from earlier tests.', vm.eval('(_[ (KE hello world) (KE whats up) (KE [this is some words] yo) (KE 2 3) ] (EmptyTreemap GodelLessThan))')+'',
		//	'(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) (KE hello) world (Tm Em (KE whats) up (Tm (Tm Em (KE 2) 3 Em) (KE [this is some words]) yo Em)))');
		
		
		//FIXME this broke around 2023-3-8 when changing some opcodes, might have removed vm.ops.KE and been planning to replace it with O or Put or something. See O OO GoO D Dup Blob ops etc.
		//Moving this to an extraTest.
		//
		//OLD: vm.test('Fo loop with Treemap state', vm.eval('[the number of unique binary trees at most height 5 is (Fo y 5 <DE ,x <+ <* (D x) (D x)> ,1> I#(F U)> (EmptyTreemap GodelLessThan) (DE x))]')+'', '[the number of unique binary trees at most height 5 is 677]');
		//Moving this test: vm.test('Fo loop with Treemap state', vm.eval('[the number of unique binary trees at most height 4 is (Fo y 4 <DE ,x <+ <* (D x) (D x)> ,1> I#(F U)> (DE x 1 (EmptyTreemap GodelLessThan)) (DE x))]')+'', '[the number of unique binary trees at most height 4 is 677]');
		//throw 'FIXME start at 1 instead of 0. it goes height0=1 2 5 26 height4=677. The map is empty so starts as double value of U being 0.';
			
		/*[TheLoop#<Fo ,y ,20 <KE ,x <+ <K? ,x> ,100>>>
		(KE x 333 (EmptyTreemap GodelLessThan))
		(TheLoop U (EmptyTreemap GodelLessThan))
		yo yo
		(TheLoop U (KE x 333 (EmptyTreemap GodelLessThan)))
		]
		*/

		console.log('Starting to define vm.extraTests (each vm.xt adds one), which wont run automatically in this Wikibinator203VM.js file and are normally run in a html UI as vm.htmlForExtraTests() generates buttons html.');
		
		vm.extraTests = [];

		let Ev = vm.eval; //eval of that wikibinator code
		let Evv = code=>{
			let ret = ()=>Ev(code); //lazyeval of that wikibinator codr
			ret.toString = ()=>code;
			return ret;
		};
		
		vm.Test = function(name, getX, getY){
			this.name = name;
			this.getX = getX;
			this.getY = getY;
		};
		vm.Test.prototype.run = function(){
			vm.test(this.name, this.getX(), this.getY());
		};
		vm.Test.prototype.toString = function(){
			return '[vm.Test name['+this.name+'] getX['+this.getX+'] getY['+this.getY+']]';
		};
		
		//create a lazyevaled extraTest to be done later if user pushes button made by vm.htmlForExtraTests()
		vm.xt = function(name, getX, getY){
			vm.extraTests.push(new vm.Test(name, getX, getY));
		};

		vm.xtTodo = function(name){
			if(!name.startsWith('TODO ')){
				name = 'TODO '+name; //so can count todos in the "count fails" button.
			}
			vm.xt(name, ()=>true, ()=>false);
		};
		
		//TODO fix wikibTostringBugTheOldNamesArentGettingClearedAndAppearInNewCodeThatHasntDefinedThemYet then uncomment the next 2 tests.
		//vm.extraTests.push(()=>vm.test('Trivial test to make sure the extraTest buttons work, always passes', 1, 1));
		vm.xt('Trivial test to make sure the extraTest buttons work, always passes', ()=>1, ()=>1);
		//vm.extraTests.push(()=>vm.test('After naming it Abc: eval of ,,_[a b c] tostring is same', vm.eval(',,_[a b c]')+'', ',,_[a b c]'));
		vm.xt('After naming it Abc: eval of ,,_[a b c] tostring is same', ()=>(vm.eval(',,_[a b c]')+''), ()=>',,_[a b c]');
		//vm.extraTests.push(()=>vm.test('After naming it Abc: eval of [,,_[a b c]d Pair:x] tostring is [,,_[a b c d] (Pair x)]', vm.eval('[,,_[a b c]d Pair:x]')+'', '[,,_[a b c d] (Pair x)]'));
		vm.xt('After naming it Abc: eval of [,,_[a b c]d Pair:x] tostring is [,,_[a b c d] (Pair x)]', ()=>vm.eval(('[,,_[a b c]d Pair:x]')+''), ()=>'[,,_[a b c d] (Pair x)]');
		//vm.extraTests.push(()=>vm.test("Del('e')(Del('c')(ABCDEF)) leaves a treemap of a->b", vm.ops.Treemap(vm.ops.GodelLessThan)(Em)('a')('b')(Em), vm.ops.Del('e')(vm.ops.Del('c')(ABCDEF))));
		vm.xt("A Del('e')(Del('c')(ABCDEF)) leaves a treemap of a->b", ()=>(vm.ops.Treemap(vm.ops.GodelLessThan)(Em)('a')('b')(Em)), ()=>(vm.ops.Del('e')(vm.ops.Del('c')(ABCDEF))));
		//TODO vm.eval('(Fo i 5 (EmptyTreemap GodelLessThan))')+''

		vm.xt('(Abz#[a b z] Abz) displays that way instead of as [Abz#[a b z] Abz] which it did 2023-5-24', ()=>(vm.eval('(Abz#[a b z] Abz)')+''), ()=>'(Abz#[a b z] Abz)');
		
		//vm.extraTests.push(()=>vm.test('treemap in _[] with KE, basics. FIXME it shouldnt keep the Tm name from earlier tests.', vm.eval('(_[ (KE hello world) (KE whats up) (KE [this is some words] yo) (KE 2 3) ] (EmptyTreemap GodelLessThan))')+'',
		//	'(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) (KE hello) world (Tm Em (KE whats) up (Tm (Tm Em (KE 2) 3 Em) (KE [this is some words]) yo Em)))'));
		vm.xt('treemap in _[] with KE, basics. FIXME it shouldnt keep the Tm name from earlier tests.',
			()=>(vm.eval('(_[ (KE hello world) (KE whats up) (KE [this is some words] yo) (KE 2 3) ] (EmptyTreemap GodelLessThan))')+''),
			()=>'(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) (KE hello) world (Tm Em (KE whats) up (Tm (Tm Em (KE 2) 3 Em) (KE [this is some words]) yo Em)))');

		//vm.extraTests.push(()=>vm.test('Fo loop with Treemap state', vm.eval('[the number of unique binary trees at most height 4 is (Fo y 4 <DE ,x <+ <* (D x) (D x)> ,1> I#(F U)> (DE x 1 (EmptyTreemap GodelLessThan)) (DE x))]')+'', '[the number of unique binary trees at most height 4 is 677]'));
		vm.xt('Fo loop with Treemap state',
			()=>(vm.eval('[the number of unique binary trees at most height 4 is (Fo y ,4 (DE ,x <+ <* x$ x$> ,1>) (DE ,x ,1 (EmptyTreemap GodelLessThan)) x$)]')+''),
			//()=>(vm.eval('[the number of unique binary trees at most height 4 is (Fo y 4 <DE ,x <+ <* (D x) (D x)> ,1> I#(F U)> (DE x 1 (EmptyTreemap GodelLessThan)) (DE x))]')+''),
			()=>'[the number of unique binary trees at most height 4 is 677]');
		//(DE ,x <+ <* x$ x$> ,1> (DE ,x ,1 (EmptyTreemap GodelLessThan)))

		vm.xt('a map test simpler than loop but with 2 DE updates',
			Evv('(DE ,x <+ x$ ,1000000> (DE ,x <+ <* x$ x$> ,1> (DE ,x ,10 (EmptyTreemap GodelLessThan))))'),
			Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) x$ 1000101 Em)'));
		
		/*vm.xt('λ/lambda get param by P x, the old way before 2023-4', Evv('(λ [x y] comment (P x) valX valY)'), Evv('valX'));
		vm.xt('λ/lambda get param by P y, the old way before 2023-4', Evv('(λ [x y] comment (P y) valX valY)'), Evv('valY'));
		vm.xt('λ/lambda get param not found by P z, the old way before 2023-4', Evv('(λ [x y] comment (P z) valX valY)'), ()=>U);
		*/

		vm.xt('λ/lambda get param by P x, the new way after 2023-4 direct', Evv('(λ [x y (P x)] valX valY)'), Evv('valX'));
		vm.xt('λ/lambda get param by P y, the new way after 2023-4 direct', Evv('(λ [x y (P y)] valX valY)'), Evv('valY'));
		vm.xt('λ/lambda get param by P x, the new way after 2023-4 P LamNs', Evv('(P x (LamNs (λ [x y I#(F U)] valX) valY))'), Evv('valX'));
		vm.xt('λ/lambda get param by P x, the new way after 2023-4 P LamNs', Evv('(P y (LamNs (λ [x y I#(F U)] valX) valY))'), Evv('valY'));
		vm.xt('λ/lambda get param not found by P z, the new way after 2023-4 direct', Evv('(λ [x y (P z)] valX valY)'), ()=>U);
		vm.xt('λ/lambda get param by P x, the new way after 2023-4 P LamNs', Evv('(P z (LamNs (λ [x y I#(F U)] valX) valY))'), ()=>U);
		
		//vm.xt('Du aka ^ as in (Du x) is x^, should not exist, cuz replace it with P aka x%.', ()=>!!vm.ops.Du, ()=>false);
		//Du replaced by P: vm.xt('DuGo as in ^ (DuGo (OO x y) is x/y^, should not exist, cuz replace it with PGo aka x/y%.', ()=>!!vm.ops.DuGo, ()=>false);
	
		vm.xt('P as in x%', Evv('x%'), Evv('(P x)'));
		vm.xt('PGo as in x/y%', Evv('x/y%'), Evv('(PGo (OO x y))'));
		vm.xt('PGo as in x/y/z%', Evv('x/y/z%'), Evv('(PGo (GoO (OO x y) z))'));
		vm.xt('PGo as in x/y/z/x/x%', Evv('x/y/z/x/x%'), Evv('(PGo (GoO (GoO (GoO (OO x y) z) x) x))'));
		
		vm.xt('TODO NGo or N, for getting stuff in namespace in namespace such as Treemap in Treemap in Treemap by syntax a;b;c but maybe combinable with syntaxes like a;b;c;x/y/z/x/x%', ()=>false, ()=>true);

		vm.xt('λ/lambda HAS j NOT FOUND', Evv('(Has j% (λ [x y z (P z)] valX valY))'), Evv('F'));
		vm.xt('λ/lambda HAS x FOUND', Evv('(Has x% (λ [x y z (P z)] valX valY))'), Evv('T'));
		vm.xt('λ/lambda HAS y FOUND', Evv('(Has y% (λ [x y z (P z)] valX valY))'), Evv('T'));
		vm.xt('EmptyTreemap HAS y NOT FOUND', Evv('(Has y% (EmptyTreemap GodelLessThan))'), Evv('F'));
		vm.xt('EmptyTreemap HAS hundred$ FOUND', Evv('(Has hundred$ (DE ,hundred ,100 (EmptyTreemap GodelLessThan)))'), Evv('T'));
		vm.xt('EmptyTreemap HAS hundred NOT FOUND cuz thats different than hundred$ aka (D hundred)', Evv('(Has hundred (DE ,hundred ,100 (EmptyTreemap GodelLessThan)))'), Evv('F'));
		//TODO test Has for other kinds of ns, including Ns and Treemap and EmptyTreemap

		/*2023-5-30
		Here's the planned solution: (Lambda[x y z funcbody] valX valY) is viewed as having keys x% (aka (P x)) and y%, not x and y. (P x ns) will get the value of key (P x), not the value of key x. So use x% and y% and z% in funcbody. x% in Ns, LamNs, Treemap, EmptyTreemap, Lambda, and Mutlambda works the same way for READ. For WRITE (by forkedit) Im still undecided if (Put x% ns) should work for LamNs, Lambda, and Mutlambda, to forkedit the valX valY etc, vs if it should in Ns skip LamNs that doesnt have x% and go to the next ns in it.
		-- x$ gets from non-Lam, normally float64. (D x)
		-- x% gets from any namespace. (P x). //maybe merge (Du x) into this?
		-- x@ gets from non-Lam, normally typed cbt.
		*/
		//throw 'FIXME should (Has x% (LamNs (Λ [x I#(F U)]) 2)) be T or F? x% is (P x) which looks for x as key. But in Treemap, (P x) puts (P x) as key instead of x as key. See mm:wikibChooseDesign_(P x) aka x%, in Treemap vs Lambdo/Mutlambdo';
		//vm.xt('EmptyTreemap HAS z% NOT FOUND', Evv('(Has z% (LamNs (Λ [x I#(F U)]) 2))'), Evv('F'));

		vm.xt('λ/lambda get param by P x, the new way after 2023-4 with comment', Evv('(λ [x y (CC comment (P x))] valX valY)'), Evv('valX'));
		vm.xt('λ/lambda get param by P y, the new way after 2023-4 with comment', Evv('(λ [x y (CC comment (P y))] valX valY)'), Evv('valY'));
		vm.xt('λ/lambda get param not found by P z, the new way after 2023-4 with comment', Evv('(λ [x y (CC comment (P z))] valX valY)'), ()=>U);

		vm.xt('Λ/mutlambda get param by P x, the new way after 2023-4', Evv('(Λ [x y (P x)] valX valY (EmptyTreemap GodelLessThan))'), Evv('valX'));
		vm.xt('Λ/mutlambda get param by P y, the new way after 2023-4', Evv('(Λ [x y (P y)] valX valY (EmptyTreemap GodelLessThan))'), Evv('valY'));
		vm.xt('Λ/mutlambda get param not found by P z, the new way after 2023-4', Evv('(Λ [x y (P z)] valX valY (EmptyTreemap GodelLessThan))'), ()=>U);

		vm.xt('FIXME verify FuncBody is not viewed as a param name even though it goes at end of same list like [..paramNames.. FuncBody].', ()=>false, ()=>true);


		vm.xt('_[] sets 2 vars in treemap using DE', Evv('(_[(DE ,x ,2) (DE ,ret ,1)] (EmptyTreemap GodelLessThan))'),
			Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) x$ 2 (Tm Em ret$ 1 Em))'));
		
		vm.xt('while loop with treemap state',
			()=>(vm.eval('[the number of unique binary trees at most height 4 is (_[(DE ,x ,0) (DE ,ret ,1) (While <Lt x$ ,4> _[(DE ,x <+ x$ ,1>) (DE ,ret <+ <* ret$ ret$> ,1>)])] (EmptyTreemap GodelLessThan) ret$)]')+''),
			//()=>(vm.eval('[the number of unique binary trees at most height 4 is (Fo y 4 <DE ,x <+ <* (D x) (D x)> ,1> I#(F U)> (DE x 1 (EmptyTreemap GodelLessThan)) (DE x))]')+''),
			()=>'[the number of unique binary trees at most height 4 is 677]');

		vm.xt('for loop with treemap state',
			()=>vm.eval('[the number of unique binary trees at most height 4 is (For _[(DE ,x ,0) (DE ,ret ,1)] <Lt x$ ,4> (DE ,x <+ x$ ,1>) (DE ,ret <+ <* ret$ ret$> ,1>) (EmptyTreemap GodelLessThan) ret$)]'),
			()=>vm.eval('[the number of unique binary trees at most height 4 is 677]'));
		
		//vm.extraTests.push(()=>{throw 'TODO test syntaxs like /a/b/sum$ and O OO GoO D Dup Blob ops etc, and replace the KE opcode with combos of that as it occurs in 2 of the other extraTests. i changed things ~2023-3-8 and broke that.'});
		vm.xtTodo('this is a TODO about /a/b/sum$ syntax etc, TODO test syntaxs like /a/b/sum$ and O OO GoO D Dup Blob ops etc, and replace the KE opcode with combos of that as it occurs in 2 of the other extraTests. i changed things ~2023-3-8 and broke that.');
		
		/*Opcode: (Du a SomeMap) -> (SomeMap (Du a)) //get dup fn
		Opcode: (Bl a SomeMap) -> (SomeMap (Bl a)) //get typed blob
		Opcode: (D a SomeMap) -> (SomeMap (D a))
		Opcode: (O a SomeMap) -> (SomeMap (O a))
		Opcode: (OO a b SomeMap) -> (SomeMap (OO a b))
		Opcode: (GoO go c SomeMap) -> (SomeMap (OO (go SomeMap) c))
		*/
		
		vm.mapABCD = vm.eval('(Put c d (Put a b (EmptyTreemap GodelLessThan)))');
		vm.xt('Treemap Put, get a returns b', ()=>vm.mapABCD('a'), ()=>vm.eval('b'));
		vm.xt('Treemap Put, get c returns d', ()=>vm.mapABCD('c'), ()=>vm.eval('d'));
		vm.xt('Treemap Put, z not found so returns U', ()=>vm.mapABCD('z'), ()=>U);
		
		vm.xt('a/b/sum$ evaled then tostringed looks like itself, but it could still be a single string which it shouldnt be', ()=>(vm.eval('a/b/sum$')+''), ()=>'a/b/sum$');
		vm.xt('a/b/sum$ evaled', ()=>(vm.eval('a/b/sum$')+''), ()=>vm.eval('(D (GoO (OO a b) sum))'));
		
		//First param is literal, not pointer. vm.xt('/a called on a map gets b', ()=>(vm.eval('(/a (Put (O a) b (EmptyTreemap GodelLessThan)))')), ()=>vm.eval('b'));
		
		vm.xt('a/b called on a map gets c', ()=>(vm.eval('(a/b (Put (OO a b) c (EmptyTreemap GodelLessThan)))')), ()=>vm.eval('c'));
		
		vm.xt('a/b/a called on a map gets d', ()=>(vm.eval('(a/b/a (Put (OO c a) d (Put (OO a b) c (EmptyTreemap GodelLessThan))))')), ()=>vm.eval('d'));

		vm.xt('(D a (Put (D a) 5 (EmptyTreemap GodelLessThan))) -> 5', ()=>vm.eval('(D a (Put (D a) 5 (EmptyTreemap GodelLessThan)))'), ()=>vm.eval('5'));

		vm.xt('a/b/a$ called on a map gets 4.5', ()=>(vm.eval('(a/b/a$ (Put (D d) 4.5 (Put (OO c a) d (Put (OO a b) c (EmptyTreemap GodelLessThan)))))')), ()=>vm.eval('4.5'));

		vm.xt('FIXME DGo vs D, similar to GoO vs OO. The Go part means get from the map instead of use as literal. (a$ (Put (O a) b (Put (D b) 5 (EmptyTreemap GodelLessThan)))) etc', ()=>true, ()=>false);
		//vm.xt('FIXME DGo vs D, similar to GoO vs OO.... do i want a xyz$ syntax available, not just xyz$ ? Or at least some way to not need to put 2 keys and 2 vals in the map just to put 1 number var.', ()=>true, ()=>false);
		//vm.xt('Removed op O. FIXME DGo vs D, similar to GoO vs OO.... Should the first thing b, in b/c/d, always be a literal, the fn b instead of what (O b) maps to or what (OO b c) maps to?', ()=>true, ()=>false);
		//vm.xt('Removed op O. FIXME GoD vs D, similar to GoO vs OO.... What should happen if theres (OO b c) as key in map, but you ask for /b$ ? /b is (O b).', ()=>true, ()=>false);
		vm.xt('TODO tree UI should display a/b/sum$ as a/b/sum$ using the dom nodes in dom nodes and with / and $ going at the left/top middle andOr right/bottom dom nodes, but wait til get (D ...) worked out', ()=>true, ()=>false);
		vm.xt('TODO simple 2d game with destructible 2d voxel terrain and fun kinds of monsters and vehicles etc, see pics of some of the ideas (todo)', ()=>true, ()=>false);

		//vm.xt('(/a/b (Put (OO a b) c (EmptyTreemap GodelLessThan))) -> c', ()=>(vm.eval('(/a/b (Put (OO a b) c (EmptyTreemap GodelLessThan)))')), ()=>vm.eval('c'));
		
		vm.xt('a/b/sum$ called on a map gets 3.5',
			()=>(vm.eval('(a/b/sum$ (Put (OO a b) c (Put (D numberHolder) 3.5 (Put (OO c sum) numberHolder (EmptyTreemap GodelLessThan)))))')), ()=>vm.eval('3.5'));
			//()=>(vm.eval('(/a/b/numberHolder$ (Put (OO a b) c (Put (D numberHolder) 3.5 (Put (OO c sum) numberHolder (EmptyTreemap GodelLessThan)))))')), ()=>vm.eval('3.5'));
		
		vm.xt('(GoO (GoO (OO a b) c) d) displays as a/b/c/d', ()=>(vm.eval('(GoO (GoO (OO a b) c) d)')+''), ()=>'a/b/c/d');
		vm.xt('(D (GoO (GoO (OO a b) c) d)) displays as a/b/c/d$', ()=>(vm.eval('(D (GoO (GoO (OO a b) c) d))')+''), ()=>'a/b/c/d$');
		vm.xt('(D (D (D (GoO (GoO (OO a b) c) d)))) displays as a/b/c/d$$$', ()=>(vm.eval('(D (D (D (GoO (GoO (OO a b) c) d))))')+''), ()=>'a/b/c/d$$$');
		//FIXME should it allow or not, the syntax  /a/b$/c/d to mean (GoO (GoO /a/b$ c) d)?
		//Probably should throw cuz /a/b/c is only for strings that could be literals, not for evaling between 2 / /.
		//If you want to do /a/b$/c/d write it out the long way: (GoO (GoO /a/b$ c) d).
		//Even though 2023-3-11 (vm.ops.L(vm.eval('/a/b$/c'))+' -- '+vm.ops.R(vm.eval('/a/b$/c'))) returns '(GoO /a/b$) -- c'
		//and vm.eval('/a/b$/c')+'' returns '/a/b$/c', which is parsing it correctly, it opens the door to /a/(Pair S T)/c etc
		//and that syntax is harder to read and harder to display in tree UI html, so just make it do it the longer way, at least for now.
		//If you dont like the syntax, you can derive a new one as a lambda at runtime eventually.
		vm.xt('verify a/b$/c throws cuz cant eval stuff between 2 / /, just string literals between them',
			()=>{ try{ return vm.eval('a/b$/c'); }catch(e){ return 'threw'; } }, ()=>'threw');
		//Du/^ replaced by P/%. vm.xt('(Du (GoO (GoO (OO a b) c) d)) displays as a/b/c/d^', ()=>(vm.eval('(Du (GoO (GoO (OO a b) c) d))')+''), ()=>'a/b/c/d^');
		//Removed ops.O cuz first param is literal. vm.xt('(D (O a)) displays as a$', ()=>(vm.eval('(D (O a))')+''), ()=>'a$');
		//vm.xt('(L /a) is O', ()=>vm.eval('(L /a)'), ()=>ops.O);
		vm.xt('(L a$) is D', ()=>vm.eval('(L a$)'), ()=>ops.D);
		vm.xt('(R a$) is a', ()=>(vm.eval('(R a$)')+''), ()=>'a');

		vm.xtTodo('This comment in GoO js transpile: //FIXME idOf wont work if fn is an S2 cuz fnToJsList got contents of <...> (or {...} but that would have thrown cuz this optimization doesnt do that (yet? 2023-6-14))');
		
		/*
		//FIXME this tree is deeper on one side than the other, which is expected since 2023-3-13 vm.put uses vm.putNoBal (no avl balancing)
		//but I meant to write the balanced one here, and i might have misinterpreted what the 18 "for(let treemapCode of [" testcases generated.
		let tmCode = '[Tm#(Treemap GodelLessThan) (Put cc dd (Put aa bb (Put ee ff Em#(EmptyTreemap GodelLessThan))))]';
		vm.xt('Ascending order of treemap keys, and tostring, '+tmCode,
			()=>(vm.eval(tmCode)+''), ()=>'[Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) aa bb (Tm Em cc dd (Tm Em ee ff Em)))]');
		*/
		
		
		
		//vm.xt('(/a (Put (O a) b (EmptyTreemap GodelLessThan))) -> b', ()=>(vm.eval('(/a (Put (O a) b (EmptyTreemap GodelLessThan)))')+''), ()=>'b');
			
		let tmReverse = '(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) ee ff Em) cc dd (Tm Em aa bb Em))';
		let tmForward = '(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) aa bb Em) cc dd (Tm Em ee ff Em))';
		vm.xt('Verify treemap in descending order doesnt find leftmost key ee, '+tmReverse,
			()=>(vm.eval(tmReverse)('ee')), ()=>U);
		vm.xt('Verify treemap in descending order doesnt find rightmost key aa, '+tmReverse,
			()=>(vm.eval(tmReverse)('aa')), ()=>U);
		vm.xt('Verify treemap in descending order does find leftmost key aa, '+tmForward,
			()=>(vm.eval(tmForward)('aa')+''), ()=>'bb');
		vm.xt('Verify treemap in descending order does find rightmost key ee, '+tmForward,
			()=>(vm.eval(tmForward)('ee')+''), ()=>'ff');
		
		let i = 0;
		for(let treemapCode of [
			'(Put aa bb (Put cc dd (Put ee ff (EmptyTreemap GodelLessThan))))',
			'(Put aa bb (Put ee ff (Put cc dd (EmptyTreemap GodelLessThan))))',
			'(Put cc dd (Put aa bb (Put ee ff (EmptyTreemap GodelLessThan))))',
			'(Put ee ff (Put aa bb (Put cc dd (EmptyTreemap GodelLessThan))))',
			'(Put cc dd (Put ee ff (Put aa bb (EmptyTreemap GodelLessThan))))',
			'(Put ee ff (Put cc dd (Put aa bb (EmptyTreemap GodelLessThan))))'
		]){
			let treemap = vm.eval(treemapCode);
			vm.xt('treemap test i='+i+' 3keys treemapCode='+treemapCode+' aa -> bb', ()=>(vm.eval(treemapCode)('aa')+''), ()=>'bb');
			vm.xt('treemap test i='+i+' 3keys treemapCode='+treemapCode+' cc -> dd', ()=>(vm.eval(treemapCode)('cc')+''), ()=>'dd');
			vm.xt('treemap test i='+i+' 3keys treemapCode='+treemapCode+' ee -> ff', ()=>(vm.eval(treemapCode)('ee')+''), ()=>'ff');
		}
		/* This doesnt work cuz of treemap rotations andOr the innermost Put gets the top node, which ends up having 2 childs. Have to make the first node be
		let cccccaaaaaeeeee = '(Put ccccc ddddd (Put aaaaa bbbbb (Put eeeee fffff (EmptyTreemap GodelLessThan))))';
		vm.xt('Descending order of Treemap keys '+cccccaaaaaeeeee,
			()=>/eeeee.*fffff.*ccccc.*ddddd.*aaaaa.*bbbbb/.test(vm.eval(cccccaaaaaeeeee)+''),
			()=>true
		);
		vm.xt('Ascending order of Treemap keys '+cccccaaaaaeeeee,
			()=>/aaaaa.*bbbbb.*ccccc.*ddddd.*eeeee.*fffff/.test(vm.eval(cccccaaaaaeeeee)+''),
			()=>true
		);*/
		
		vm.xt('Parse 0x65658000', ()=>(vm.eval("0x25658000")+''), ()=>'0x25658000');
		vm.xt('L 0x65658000', Evv('(L 0x25658000)'), Evv('0x2565'));
		vm.xt('R 0x65658000', Evv('(R 0x25658000)'), Evv('0x8000'));
		vm.xt('(GodelLessThan 0x23638000 0x25658000) -> T', Evv("(GodelLessThan 0x23638000 0x25658000)"), Evv('T'));
		vm.xt('(GodelLessThan 0x25658000 0x23638000) -> F', Evv("(GodelLessThan 0x25658000 0x23638000)"), Evv('F'));
		vm.xt('(GodelLessThan 0x25658000 0x25658000) -> F', Evv("(GodelLessThan 0x25658000 0x25658000)"), Evv('F'));
		
		vm.xt('0b0011 does not equal 0b0101', ()=>(vm.eval('0b0011').n.eq(vm.eval('0b0101'))), ()=>false);
		vm.xt('0b0101 does equal 0b0101, a', ()=>(vm.eval('0b0101').n.eq(vm.eval('0b0101'))), ()=>true);
		vm.xt('0b0101 does equal 0b0101, b', Evv('0b0101'), Evv('0b0101'));
		//ret[31] = (fn.n.bitAt(0)<<3)|(fn.n.bitAt(1)<<2)|(fn.n.bitAt(2)<<1)|fn.n.bitAt(3); //TODO optimize
		vm.xt('Bit1 0th bit -> 1', ()=>vm.ops.Bit1.n.bitAt(0), ()=>1);
		vm.xt('Bit0 0th bit -> 0', ()=>vm.ops.Bit0.n.bitAt(0), ()=>0);
		vm.xt('0b0101 0th bit -> 0', ()=>(vm.eval('0b0101').n.bitAt(0)), ()=>0);
		vm.xt('0b0101 1th bit -> 1', ()=>(vm.eval('0b0101').n.bitAt(1)), ()=>1);
		vm.xt('0b0101 2th bit -> 0', ()=>(vm.eval('0b0101').n.bitAt(2)), ()=>0);
		vm.xt('0b0101 3th bit -> 1', ()=>(vm.eval('0b0101').n.bitAt(3)), ()=>1);
		//TODO optimize by not computing 32 byte id just to compare 4 bits to 4 bits. Compare the bits directly.
		//vm.eval('0b0011') != vm.eval('0b0101') are both giving same marklar203bId cuz the literal data is not in there as of 2023-3-22-1p.
		//y.n.eq(z)
		//vm.arraysEqual(vm.marklar203bId(this.lam),vm.marklar203bId(node.lam))
		
		let j = 0;
		for(let treemapCode of [
			'(Put ww xx (Put aa bb (Put cc dd (Put ee ff (EmptyTreemap GodelLessThan)))))',
			'(Put ww xx (Put aa bb (Put ee ff (Put cc dd (EmptyTreemap GodelLessThan)))))',
			'(Put ww xx (Put cc dd (Put aa bb (Put ee ff (EmptyTreemap GodelLessThan)))))',
			'(Put ww xx (Put ee ff (Put aa bb (Put cc dd (EmptyTreemap GodelLessThan)))))',
			'(Put ww xx (Put cc dd (Put ee ff (Put aa bb (EmptyTreemap GodelLessThan)))))',
			'(Put ww xx (Put ee ff (Put cc dd (Put aa bb (EmptyTreemap GodelLessThan)))))',
			
			'(Put aa bb (Put ww xx (Put cc dd (Put ee ff (EmptyTreemap GodelLessThan)))))',
			'(Put aa bb (Put ww xx (Put ee ff (Put cc dd (EmptyTreemap GodelLessThan)))))',
			'(Put cc dd (Put ww xx (Put aa bb (Put ee ff (EmptyTreemap GodelLessThan)))))',
			'(Put ee ff (Put ww xx (Put aa bb (Put cc dd (EmptyTreemap GodelLessThan)))))',
			'(Put cc dd (Put ww xx (Put ee ff (Put aa bb (EmptyTreemap GodelLessThan)))))',
			'(Put ee ff (Put ww xx (Put cc dd (Put aa bb (EmptyTreemap GodelLessThan)))))',
			
			'(Put aa bb (Put cc dd (Put ww xx (Put ee ff (EmptyTreemap GodelLessThan)))))',
			'(Put aa bb (Put ee ff (Put ww xx (Put cc dd (EmptyTreemap GodelLessThan)))))',
			'(Put cc dd (Put aa bb (Put ww xx (Put ee ff (EmptyTreemap GodelLessThan)))))',
			'(Put ee ff (Put aa bb (Put ww xx (Put cc dd (EmptyTreemap GodelLessThan)))))',
			'(Put cc dd (Put ee ff (Put ww xx (Put aa bb (EmptyTreemap GodelLessThan)))))',
			'(Put ee ff (Put cc dd (Put ww xx (Put aa bb (EmptyTreemap GodelLessThan)))))',
			
			'(Put aa bb (Put cc dd (Put ee ff (Put ww xx (EmptyTreemap GodelLessThan)))))',
			'(Put aa bb (Put ee ff (Put cc dd (Put ww xx (EmptyTreemap GodelLessThan)))))',
			'(Put cc dd (Put aa bb (Put ee ff (Put ww xx (EmptyTreemap GodelLessThan)))))',
			'(Put ee ff (Put aa bb (Put cc dd (Put ww xx (EmptyTreemap GodelLessThan)))))',
			'(Put cc dd (Put ee ff (Put aa bb (Put ww xx (EmptyTreemap GodelLessThan)))))',
			'(Put ee ff (Put cc dd (Put aa bb (Put ww xx (EmptyTreemap GodelLessThan)))))'
		]){
			let treemap = vm.eval(treemapCode);
			vm.xt('treemap test j='+j+' 4keys treemapCode='+treemapCode+' aa -> bb', ()=>(vm.eval(treemapCode)('aa')+''), ()=>'bb');
			j++;
			vm.xt('treemap test j='+j+' 4keystreemapCode='+treemapCode+' cc -> dd', ()=>(vm.eval(treemapCode)('cc')+''), ()=>'dd');
			j++;
			vm.xt('treemap test j='+j+' 4keys treemapCode='+treemapCode+' ee -> ff', ()=>(vm.eval(treemapCode)('ee')+''), ()=>'ff');
			j++;
			vm.xt('treemap test j='+j+' 4keys treemapCode='+treemapCode+' ww -> xx', ()=>(vm.eval(treemapCode)('ww')+''), ()=>'xx');
			j++;
		}

		vm.xt('treemap with lambdas as keys, (Pair S T)', ()=>vm.eval('(Put (Pair S T) itsIota (Put hello world (Put (S T T) itsSTT (EmptyTreemap GodelLessThan))) (Pair S T))'), ()=>vm.eval('itsIota'));
		vm.xt('treemap with lambdas as keys, hello', ()=>vm.eval('(Put (Pair S T) itsIota (Put hello world (Put (S T T) itsSTT (EmptyTreemap GodelLessThan))) hello)'), ()=>vm.eval('world'));
		vm.xt('treemap with lambdas as keys, (S T T)', ()=>vm.eval('(Put (Pair S T) itsIota (Put hello world (Put (S T T) itsSTT (EmptyTreemap GodelLessThan))) (S T T))'), ()=>vm.eval('itsSTT'));
		vm.xt('treemap with lambdas as keys, notThere', ()=>vm.eval('(Put (Pair S T) itsIota (Put hello world (Put (S T T) itsSTT (EmptyTreemap GodelLessThan))) notThere)'), ()=>U);

		vm.xt('wrongly sorted treemap with lambdas as keys, (Pair S T) not found despite being there but in wrong place',
			()=>vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (Pair S T) itsIota Em) {T T} itsSTT (Tm Em hello world Em) (Pair S T))'), ()=>U);
		vm.xt('wrongly sorted treemap with lambdas as keys, {T T} is found cuz dont use the wrongly sorted parts to find it',
			()=>vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (Pair S T) itsIota Em) {T T} itsSTT (Tm Em hello world Em) {T T})'), ()=>vm.eval('itsSTT'));
		vm.xt('wrongly sorted treemap with lambdas as keys, hello is found cuz dont use the wrongly sorted parts to find it',
			()=>vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (Pair S T) itsIota Em) {T T} itsSTT (Tm Em hello world Em) hello)'), ()=>vm.eval('world'));
		vm.xt('wrongly sorted treemap with lambdas as keys, notThere is not found cuz its not there',
			()=>vm.eval('(Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (Pair S T) itsIota Em) {T T} itsSTT (Tm Em hello world Em) notThere)'), ()=>U);

		//WARNING: make sure its not a string literal such as a/b$ should be (DGo (OO a b)) not "a/b$".
		vm.xt_testToString = code=>{
			vm.xt('xt_testToString '+code, ()=>(vm.eval(code)+''), ()=>code);
		};

		vm.xt('Parse a', Evv('a'), Evv('a'));
		vm.xt_testToString('a');
		vm.xt('Parse a$', Evv('a$'), Evv('(D a)'));
		vm.xt_testToString('a$');
		//Du replaced by P. vm.xt('Parse a^', Evv('a^'), Evv('(Du a)'));
		vm.xt('Parse a/b', Evv('a/b'), Evv('(OO a b)'));
		vm.xt_testToString('a/b');
		vm.xt('Parse a/a', Evv('a/a'), Evv('(OO a a)'));
		vm.xt_testToString('a/a');
		vm.xt('Parse a/b$', Evv('a/b$'), Evv('(DGo (OO a b))'));
		//vm.xt('Tostring a/b$', ()=>(vm.eval('a/b$')+''), ()=>'a/b$');
		vm.xt_testToString('a/b$');
		//Du/^ replaced by P/%. and PGo. vm.xt('Parse a/b^', Evv('a/b^'), Evv('(DuGo (OO a b))'));
		vm.xt('Parse a/b/c@', Evv('a/b/c@'), Evv('(BlGo (GoO (OO a b) c))'));
		//vm.xt('Tostring a/b/c@', ()=>(vm.eval('a/b/c@')+''), ()=>'a/b/c@');
		vm.xt_testToString('a/b/c@');
		vm.xt('Parse a/b@', Evv('a/b@'), Evv('(BlGo (OO a b))'));
		//vm.xt('Tostring a@', ()=>(vm.eval('a@')+''), ()=>'a@');
		vm.xt_testToString('a/b@');
		vm.xt_testToString('a@');
		vm.xt('(a/b []) -> [(OO a b)] as if [] was a map but its just a list', Evv('(a/b [])'), Evv('[(OO a b)]'));
		//vm.xt('(a$ []) -> [(D a)] as if [] was a map but its just a list', Evv('(a$ [])'), Evv('[(D a)]'));
		vm.xt('(a$ []) -> U cuz not found', Evv('(a$ [])'), Evv('[(D a)]'));
		vm.xt('(a$ [a valA]) -> U cuz not found. (a% would be found but not a$)', Evv('(a$ [])'), Evv('U'));
		//Du replaced by P vm.xt('(a^ []) -> [(Du a)] as if [] was a map but its just a list', Evv('(a^ [])'), Evv('[(Du a)]'));
		//vm.xt('(a% []) -> [(P a)] as if [] was a map but its just a list', Evv('(a% [])'), Evv('[(P a)]'));
		vm.xt('(a% []) -> U cuz [] is not a namespace type so doesnt contain key a%', Evv('(a% [])'), ()=>U);
		vm.xt('Parse a/b/c/b/b/a', Evv('a/b/c/b/b/a'), Evv('(GoO (GoO (GoO (GoO (OO a b) c) b) b) a)'));
		vm.xt_testToString('a/b/c/b/b/a');
		//^/Du replaced by P and PGo: vm.xt('Parse a/b/c/b/b/a^', Evv('a/b/c/b/b/a^'), Evv('DuGo (GoO (GoO (GoO (GoO (OO a b) c) b) b) a))'));
		//^/Du replaced by P and PGo: vm.xt_testToString('a/b/c/b/b/a^');
		vm.xt('Parse a/b/c$', Evv('a/b/c$'), Evv('(DGo (GoO (OO a b) c))'));
		vm.xt_testToString('a/b/c$');
		//^/Du replaced by P and PGo: vm.xt('Parse a/b/c^', Evv('a/b/c^'), Evv('(DuGo (GoO (OO a b) c))'));
		//^/Du replaced by P and PGo: vm.xt_testToString('a/b/c^');
		vm.xt('Parse yes/no', Evv('yes/no'), Evv('(OO yes no)'));
		vm.xt_testToString('yes/no');

		vm.xt('(+ 2 3)', Evv('(+ 2 3)'), Evv('5'));
		vm.xt('(* 2 3)', Evv('(* 2 3)'), Evv('6'));
		vm.xt('(+n [,2 ,3 ,10] ignore)', Evv('(+n [,2 ,3 ,10] ignore)'), Evv('15'));
		vm.xt('(+n [,2 x$ ,10] (DE ,x ,70 (EmptyTreemap GodelLessThan)))', Evv('(+n [,2 x$ ,10] (DE ,x ,70 (EmptyTreemap GodelLessThan)))'), Evv('82'));
		vm.xt('(*n [,2 x$ ,10] (DE ,x ,70 (EmptyTreemap GodelLessThan)))', Evv('(*n [,2 x$ ,10] (DE ,x ,70 (EmptyTreemap GodelLessThan)))'), Evv('1400'));

		//a/b/c$ is (DGo (GoO (OO a b) c)).
		//In treemap, it will map key (D y) to 5.5 if it maps (OO a b) to x and maps (OO x c) to y.
		//(a/b/c$ ThatTreemap) -> 5.5. So (<+ a/b/c$ ,100> ThatTreemap) -> 105.5.
		vm.xt('(<+ a/b/c$ ,100> ThatTreemap) -> 105.5', Evv('(<+ a/b/c$ ,100> ThatTreemap#(Put (D y) 5.5 (Put (OO a b) x (Put (OO x c) y (EmptyTreemap GodelLessThan)))))'), Evv('105.5'));

		//FIXME since what goes after OtherTreemap# is not halted, does OtherTreemap# get attached to what it evals to? Same question for ThatTreemap# above.
		vm.xt('(<+ a/b/c$ a$> OtherTreemap) -> 210', Evv('(<+ a/b/c$ a$> OtherTreemap#(Put (D a) 10 (Put (D y) 200 (Put (OO a b) x (Put (OO x c) y (EmptyTreemap GodelLessThan))))))'), Evv('210'));
		vm.xt('(<+ <* a/b/c$ a/b/c$> a$> OtherTreemap) -> 40010', Evv('(<+ <* a/b/c$ a/b/c$> a$> OtherTreemap#(Put (D a) 10 (Put (D y) 200 (Put (OO a b) x (Put (OO x c) y (EmptyTreemap GodelLessThan))))))'), Evv('40010'));
		vm.xt('(<+ <* a/b/c$ a/b/c$> a$> OtherTreemap2) -> 40011 but written using y$ instead of (D y)', Evv('(<+ <* a/b/c$ a/b/c$> a$> OtherTreemap2#(Put a$ 11 (Put y$ 200 (Put (OO a b) x (Put (OO x c) y (EmptyTreemap GodelLessThan))))))'), Evv('40011'));
		//https://twitter.com/wikibinator/status/1638600965535285256
		//New syntax is mostly working. (<+ <* a/b/c$ a/b/c$> a$> OtherTreemap#(Put a$ 10 (Put y$ 200 (Put (OO a b) x (Put (OO x c) y (EmptyTreemap GodelLessThan))))))
		//returns 40010 cuz as you'd write in javascript a.b.c.D*a.b.c.D+a.D is 200*200+10. The treemap is a fork-editable state.
		
		vm.xt("B Del('e')(Del('c')(ABCDEF)) leaves a treemap of a->b", ()=>(vm.ops.Treemap(vm.ops.GodelLessThan)(Em)('a')('b')(Em)), ()=>(vm.ops.Del('e')(vm.ops.Del('c')(ABCDEF))));

		vm.xt("comment a CC", Evv('(CC [the comment] Pair S T)'), Evv('(Pair S T)'));

		//vm.xt("TODO rename // cuz / is used for a/b/sum$ syntax", ()=>true, ()=>false);

		//vm.xt("Redesigning lambdas 2023-4+ parse a%", Evv('a%'), Evv('(Da a)')); //Du/^ D/$ Da/% a/b/sum$ a/b/possiblyNotDedupedFuncVar^
		//TODO replace Da with P. They are duplicates. P existed first.
		vm.xt("Redesigning lambdas 2023-4+ parse a%", Evv('a%'), Evv('(P a)')); //Du/^ D/$ P/% a/b/sum$ a/b/possiblyNotDedupedFuncVar^


		//FIXME is (P a) and a% the same?
		//"//varName% is (P varName). (P varName (LamNs...)) -> (LamNs (P varName))."
		//It is.
		vm.xt("(P a) is a%", Evv('(P a)'), Evv('a%'));
		vm.xt("Redesigning lambdas 2023-4+ normlam a 1 param ... but done as (P a) instead of a%", Evv('(P a (LamNs (λ [a (P a)]) valA))'), Evv('valA'));
		vm.xt("Redesigning lambdas 2023-4+ normlam a 1 param ... done as a%", Evv('(a% (LamNs (λ [a a%]) valA))'), Evv('valA'));

		vm.xt("Redesigning lambdas 2023-4+ normlam a 3 params", Evv('(λ [a b c a%] valA valB valC)'), Evv('valA'));
		vm.xt("Redesigning lambdas 2023-4+ normlam b", Evv('(λ [a b c b%] valA valB valC)'), Evv('valB'));
		vm.xt("Redesigning lambdas 2023-4+ normlam c", Evv('(λ [a b c c%] valA valB valC)'), Evv('valC'));
		vm.xt("Redesigning lambdas 2023-4+ normlam d not found", Evv('(λ [a b c d%] valA valB valC)'), ()=>U);

		vm.xt("vm.inMutlambdaLamnsIsInner is true", ()=>(vm.inMutlambdaLamnsIsInner), ()=>true);
		vm.xt("Redesigning lambdas 2023-4+ mutlam a - test Ns first, depends on vm.inMutlambdaLamnsIsInner is true",
			Evv('(Ns (LamNs (Λ [a b x I#(F U)] valA valB) valC) Em#(EmptyTreemap GodelLessThan) a%)'), Evv('valA'));

		vm.xt("(Λ [a b a%] valA valB (EmptyTreemap GodelLessThan))", Evv('(Λ [a b a%] valA valB (EmptyTreemap GodelLessThan))'), Evv('valA'));
		vm.xt("(Λ [a b b%] valA valB (EmptyTreemap GodelLessThan))", Evv('(Λ [a b b%] valA valB (EmptyTreemap GodelLessThan))'), Evv('valB'));
		vm.xt("(Λ [a b j%] valA valB (EmptyTreemap GodelLessThan)) not found so U", Evv('(Λ [a b j%] valA valB (EmptyTreemap GodelLessThan))'), ()=>U);
		//vm.xt("Mutlambdo get param a from 2 params", ()=>vm.eval('(Λ [a b ignore] valA valB)').n.p('a'), Evv('valA'));
		vm.xt("Mutlambdo get param a% from 2 params", ()=>vm.eval('(Λ [a b ignore] valA valB)').n.p(vm.eval('a%')), Evv('valA'));
		//vm.xt("Mutlambdo get param b from 2 params", ()=>vm.eval('(Λ [a b ignore] valA valB)').n.p('b'), Evv('valB'));
		vm.xt("Mutlambdo get param b% from 2 params", ()=>vm.eval('(Λ [a b ignore] valA valB)').n.p(vm.eval('b%')), Evv('valB'));
		vm.xt("Mutlambdo get param j (not found) from 2 params", ()=>vm.eval('(Λ [a b ignore] valA valB)').n.p(vm.eval('j')), ()=>U);
		vm.xt("Mutlambdo get param j% (not found) from 2 params", ()=>vm.eval('(Λ [a b ignore] valA valB)').n.p(vm.eval('j%')), ()=>U);

		let E = code=>vm.eval(code);

		//vm.xt("Mutlambdo get param a from 3 params", ()=>vm.eval('(Λ [a b x ignore] valA valB valX)').n.p('a'), Evv('valA'));
		vm.xt("Mutlambdo get param a% from 3 params 1", ()=>vm.eval('(Λ [a b x ignore] valA valB valX)').n.p(E('a%')), Evv('valA'));
		vm.xt("Mutlambdo get param a% from 3 params 2", Evv('(a% (Λ [a b x ignore] valA valB valX))'), Evv('valA'));
		//vm.xt("Mutlambdo get param b from 3 params", ()=>vm.eval('(Λ [a b x ignore] valA valB valX)').n.p('b'), Evv('valB'));
		vm.xt("Mutlambdo get param b% from 3 params 1", ()=>vm.eval('(Λ [a b x ignore] valA valB valX)').n.p(E('b%')), Evv('valB'));
		vm.xt("Mutlambdo get param b% from 3 params 2 ", Evv('(b% (Λ [a b x ignore] valA valB valX))'), Evv('valB'));
		//vm.xt("Mutlambdo get param x from 3 params", ()=>vm.eval('(Λ [a b x ignore] valA valB valX)').n.p('x'), Evv('valX'));
		vm.xt("Mutlambdo get param x% from 3 params 1", ()=>vm.eval('(Λ [a b x ignore] valA valB valX)').n.p(E('x%')), Evv('valX'));
		vm.xt("Mutlambdo get param x% from 3 params 2", Evv('(x% (Λ [a b x ignore] valA valB valX))'), Evv('valX'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam a - direct", Evv('(Λ [a b c a%] valA valB valC (EmptyTreemap GodelLessThan))'), Evv('valA'));
		vm.xt("Redesigning lambdas 2023-4+ mutlam b", Evv('(Λ [a b c b%] valA valB valC (EmptyTreemap GodelLessThan))'), Evv('valB'));
		vm.xt("Redesigning lambdas 2023-4+ mutlam c", Evv('(Λ [a b c c%] valA valB valC (EmptyTreemap GodelLessThan))'), Evv('valC'));
		vm.xt("Redesigning lambdas 2023-4+ mutlam d not found", Evv('(Λ [a b c d%] valA valB valC (EmptyTreemap GodelLessThan))'), ()=>U);

		vm.xt("Λ comment b CC", Evv('(Λ [a b c (CC [the comment] b%)] valA valB valC (EmptyTreemap GodelLessThan))'), Evv('valB'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam adding lambda param and var from treemap - A",
			Evv('(Ns (T U) (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 Em) e$)'), Evv('10'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam adding lambda param and var from treemap - B",
			Evv('(Ns (LamNs (Λ [x I#(F U)]) 2) (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 Em) e$)'), Evv('10'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam adding lambda param and var from treemap - C",
			Evv('(Ns (LamNs (Λ [x I#(F U)]) 2) (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 Em) x%)'), Evv('2'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam adding lambda param and var from treemap - D",
			Evv('(Λ [x <+ x% e$>] 2 (DE ,e ,10 (EmptyTreemap GodelLessThan)))'), Evv('12'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam adding lambda param and var from treemap - E",
			Evv('(Λ [x <+ e$ x%>] 3 (DE ,e ,9 (EmptyTreemap GodelLessThan)))'), Evv('12'));

		//bad syntax, the vm.xt("Redesigning lambdas 2023-4+ Fo loop of mutlam 4 times then get e$ sum out of treemap A (FIXME this one might have wrong number of parens)",
		//	Evv('(e$ (Fo y ,4 _[ (Λ [hundred (DE ,e <+ hundred% e$>)] 100) ]) (DE ,e ,10 (EmptyTreemap GodelLessThan)))'), Evv('410'));

		vm.xt("Redesigning lambdas 2023-4+ Fo loop of mutlam 4 times then get e$ sum out of treemap B (FIXME this one might have wrong number of parens)",
			Evv('(e$ (Fo y ,4 _[ (Λ [hundred (DE ,e <+ hundred% e$>)] 100) ] (DE ,e ,10 (EmptyTreemap GodelLessThan))))'), Evv('410'));

		vm.xt("Redesigning lambdas 2023-4+ Fo loop of mutlam 4 times then get e$ sum out of treemap C - this tests vm.putNoBal (FIXME should that be with balance?) of Ns of LamNs and Treemap",
			Evv('(e$ (Fo y ,4 (Λ [hundred (DE ,e <+ hundred% e$>)] 100) (DE ,e ,10 (EmptyTreemap GodelLessThan))))'), Evv('410'));
		
		vm.xt("add 100 to a 10 in a treemap with a 10 and a 3 treemap with 2 numbers in it",
			Evv('(<+ ,100 e$> (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 (Tm Em y$ 3 Em)))'), Evv('110'));

		vm.xt("add 1000 in <+ ,1000 e$> and a Treemap",
			Evv('((DE ,e <+ ,1000 e$>) (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 (Tm Em y$ 0 Em)))'),
			Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 1010 (Tm Em y$ 0 Em))'));

		vm.xt("get 100 thru Λ in Treemap",
			Evv('(Λ [hundred hundred%] 100 (Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) e$ 10 (Tm Em y$ 0 Em)))'), Evv('100'));

		vm.xt("Redesigning lambdas 2023-4+ normlam test what funcBody sees", Evv('(λ [a b (F U)] 10 20)'), Evv('(LamNs (λ [a b (F U)] 10) 20)'));

		vm.xt("Redesigning lambdas 2023-4+ mutlam test what funcBody sees",
			Evv('(Λ [a b (F U)] 10 20 (EmptyTreemap GodelLessThan))'), Evv('(Ns (LamNs (Λ [a b (F U)] 10) 20) (EmptyTreemap GodelLessThan))'));

		vm.xt("Ns with overlapping vars takes it from inner namespace as $",
			Evv('(x$ (Ns (DE ,x ,2 (EmptyTreemap GodelLessThan)) (DE ,x ,3 (EmptyTreemap GodelLessThan))))'), Evv('2'));
		vm.xt("Ns with overlapping vars takes it from inner namespace as %",
			Evv('(x% (Ns (PE ,x ,innerVal (EmptyTreemap GodelLessThan)) (PE ,x ,outerVal (EmptyTreemap GodelLessThan))))'), Evv('innerVal'));
		vm.xt("Ns with non-overlapping ($ inner, % outer) but similarl vars gets from outer",
			Evv('(x% (Ns (DE ,x ,100 (EmptyTreemap GodelLessThan)) (PE ,x ,outerVal (EmptyTreemap GodelLessThan))))'), Evv('outerVal'));
		vm.xt("Ns with non-overlapping ($/D inner, %/P outer) but similarl vars gets from inner",
			Evv('(x$ (Ns (DE ,x ,innerVal (EmptyTreemap GodelLessThan)) (PE ,x ,outerVal (EmptyTreemap GodelLessThan))))'), Evv('innerVal'));
		
		vm.xt("TODO test deeper Ns in Ns in Ns", ()=>true, ()=>false);

		vm.xt("LamNs a%", Evv('(LamNs (λ [a b (F U)] 10) 20 a%)'), Evv('10'));
		vm.xt("LamNs b% suffix", Evv('(LamNs (λ [a b (F U)] 10) 20 b%)'), Evv('20'));
		vm.xt("LamNs b% prefix", Evv('(b% (LamNs (λ [a b (F U)] 10) 20))'), Evv('20'));
		vm.xt("LamNs c% not found", Evv('(LamNs (λ [a b (F U)] 10) 20 c%)'), ()=>U);

		vm.xt("Λ Ns get hundred$ from outer treemap", Evv('(hundred$ (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), Evv('100'));
		vm.xt("Λ Ns get a% from inner LamNs", Evv('(a% (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), Evv('10'));
		vm.xt("Λ Ns get b% from inner LamNs", Evv('(b% (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), Evv('20'));
		vm.xt("Λ Ns add things from 2 namespaces a", Evv('(<+ a% hundred$> (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), Evv('110'));
		vm.xt("Λ Ns add things from 2 namespaces b", Evv('(<+ b% hundred$> (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), Evv('120'));
		vm.xt("Λ Ns c% not found", Evv('(c% (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), ()=>U);
		vm.xt("Λ Ns c$ not found", Evv('(c$ (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), ()=>U);
		vm.xt("Λ Ns a$ not found", Evv('(a$ (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), ()=>U);
		vm.xt("Λ Ns b$ not found", Evv('(b$ (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), ()=>U);
		vm.xt("Λ Ns hundred% not found", Evv('(b$ (Ns (LamNs (Λ [a b (F U)] 10) 20) (DE ,hundred ,100 (EmptyTreemap GodelLessThan))))'), ()=>U);

		//vm.xt("Test old kind of λ before 2023-4-11",
		//	Evv('(Hypot#(λ [x y] [this is [a comment] with a function Sqr#<* I#(F U) I> in it] <Sqrt <+ <Sqr (P x)> <Sqr (P y)>>>) 6 8)'), Evv('10'));

		vm.xt("Test new kind of λ after 2023-4-11, that it has less params 1", ()=>vm.eval('(λ [x (F U)])').n.curriesLeft(), ()=>1);
		vm.xt("Test new kind of λ after 2023-4-11, that it has less params 3", ()=>vm.eval('(λ [x y z (F U)])').n.curriesLeft(), ()=>3);
		vm.xt("Test new kind of λ after 2023-4-11, that it has less params 3-2", ()=>vm.eval('(λ [x y z (F U)] 10 20)').n.curriesLeft(), ()=>1);

		vm.xt("Test new kind of λ after 2023-4-11, basic call of derived Hypot function",
			Evv('(λ [x y (CC [this is [a comment] with a function Sqr#<* I#(F U) I> in it] <Sqrt <+ <Sqr (P x)> <Sqr (P y)>>>)] 6 8)'), Evv('10'));


		vm.xtTodo("Test new kind of Λ before 2023-4-11. TODO write this test.");

		vm.xt("TODO test all these suffixs: $/double ^/dupFn %/readOnlyNormlamOrMutlamParam", ()=>true, ()=>false);

		vm.xt("TODO test PushNs and PopNs and the opcodes that will define vars in inner namespace (of Ns (inner outer)) and which opcodes, such as Fo For automatically define their looping vars in a new innermost namespace (for better js optimize)", ()=>true, ()=>false);

		vm.xtTodo("Choose infcur/[] vs rucfni/-= list for lambda and mutlambda 7th param, considering might want to cache the first or last n things in the list at each next param deeper.");

		vm.xtTodo("optimization for local vars in js loops, Fo For PushNs etc.");

		vm.xt("TODO search for comment in VM '//FIXME add test case for lambda and mutlambda of max and near max and exceeding max number of params'", ()=>true, ()=>false);

		vm.xt('TODO some basic test cases for the second one in (cuz the first one requires running 2 browser tabs and messaging between, which u cant test from here)... Planning 2 kinds experimental turing-complete-challenge-response.. Call lambdaX on lambdaY returns lambdaZ, do that at various combos of peers in p2p net. The other is each (funcId,paramId,returnId) 3 lambdas are like 2d pixel here. But which energy func? The rule110 convolutional scalar field experiments. Read more at https://twitter.com/wikibinator/status/1649564981065646087');
		/*
		https://www.youtube.com/watch?v=ROF6ZtF3zVk
		"Painting Rule110 with the mouse as convolutional scalar field forming turing complete quasicrystal
		Its a realtime 4-SAT solver, but doesnt find exact local min of energy so forms crystal-defects. Rule110 as 4-SAT is left,self,right,down at each pixel, allowing 8 of the 16 combos of 4 bits. ConvfieldDemo4/ Painting rule110 with mouse. Turned up the speed. Now 128x128 pixels. 1 dimension per pixel. Convfield math. Gonna make some kind of neural painting or minecraftlike game with it. Try it at https://memecombinator.io/experiments... Paint white with left mouse button, black with right mouse button. On browser console you can adjust options.speed. Its just that 1 html file. Also some versions of it are at https://github.com/benrayfield/jsutil..."
		https://github.com/benrayfield/jsutils/tree/master/src

		2023-4-21 https://twitter.com/wikibinator/status/1649564981065646087
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		26m
		Planning 2 kinds experimental turing-complete-challenge-response.. Call lambdaX on lambdaY returns lambdaZ, do that at various combos of peers in p2p net. The other is each (funcId,paramId,returnId) 3 lambdas are like 2d pixel here. But which energy func?
		Quote Tweet
		Lambda Rick /acc
		@benrayfield
		·
		Apr 17
		Painting rule110 with mouse. Turned up the speed. Now 128x128 pixels. 1 dimension per pixel. Convfield math. Gonna make some kind of neural painting or minecraftlike game with it
		Show this thread
		Tip
		wikibinator swarm (a kind of number)
		@wikibinator
		Not that its made of rule110. Thats a high dimensional scalar field of as many dimensions as 2d pixels, converges to rule110 however you paint it with mouse. Expand that to 3d, in dimensions of which integer means each possible function, 3 of those. Nonhalting is 0. Halted is 1.
		8:05 PM · Apr 21, 2023
		·
		6
		Views
		View Tweet analytics

		wikibinator swarm (a kind of number)
		@wikibinator
		·
		18m
		Theres a statement you can make using the VarargAx opcode (might still make small adjustments to opcodes TODO), that lambdaX called on lambdaY returns LambdaZ, which can be derived by IsLeaf L R and basic logic and recursion. That lambda halts on itself if (x y)->z, else infloops

		
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		33s
		Incomplete.. (VarargAx FuncBody ..params... nextParam) is halted on itself if (FuncBody [(VarargAx FuncBody ...params...) nextParam]) -> U. If -> somethingElse, then returns (R somethingElse). It could form a parameter list can only contain prime numbers. Other calls dont halt
		
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		48s
		VarargAx is a turing-complete-type-system and will in theory be fast enuf for per-pixel canvas graphics, but when crossing an untrusted border like to/from other computers in the p2p net, takes finite time to repeat the calculation to verify, but infinite time to disprove a lie.

		-----

		https://twitter.com/wikibinator/status/1649584775085142019
		
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		1h
		Planning 2 kinds experimental turing-complete-challenge-response.. Call lambdaX on lambdaY returns lambdaZ, do that at various combos of peers in p2p net. The other is each (funcId,paramId,returnId) 3 lambdas are like 2d pixel here. But which energy func?
		Quote Tweet
		Lambda Rick /acc
		@benrayfield
		·
		Apr 17
		Painting rule110 with mouse. Turned up the speed. Now 128x128 pixels. 1 dimension per pixel. Convfield math. Gonna make some kind of neural painting or minecraftlike game with it
		Show this thread
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		1h
		Not that its made of rule110. Thats a high dimensional scalar field of as many dimensions as 2d pixels, converges to rule110 however you paint it with mouse. Expand that to 3d, in dimensions of which integer means each possible function, 3 of those. Nonhalting is 0. Halted is 1.
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		11m
		This theoretical data structure could be a bunch of partially overlapping 3d tensors that overlap on some dimensions and not others. It might create canvas bytes in realtime of "the matrix" but a matrix is a 2d tensor.
		wikibinator swarm (a kind of number)
		@wikibinator
		·
		5m
		I want to turn the space of all possible lambdas (of this kind) into a size infinity*infinity*infinity 3d tensor (viewed as many partially overlapping sparse 3d tensors), that converges to the constant correct infinity^3 tensor in a p2p network and swarms GPUs at low lag.
		wikibinator swarm (a kind of number)
		@wikibinator
		In this tensor the binary forest nodes map 1-to-1 with the integers at approx 1.5^(2^h) unique nodes up to lambda call pair height h. Exactly, start with 1 node at height 0, 2 nodes up to height 1, 5 up to height 2, then 26, 677, 458330... (practically, 256 bit ids) h => h*h+1
		*/



		/*FIXME its not evaling
		(λ [x y (CC [this is [a comment] with a function Sqr#<* I#(F U) I> in it] <Sqrt <+ <Sqr (P x)> <Sqr (P y)>>>)] 6 8 9 6 6 6 6 6 6 6)
		*/

		
		//if(Math.random() < .5) throw 'TODO Ok, now is 2023-3-8 and Im about to code these opcodes: Du Bl D O OO GoO';
		
		vm.xt('TODO when evaler (as in .pushEvaler) generates js code (which may be plain js or also use GPU.js), make it appear in debugger console sources tab like it does in AvmLambda, using # sourceURL= or something like that.', ()=>true, ()=>false);

		vm.xtTodo('search comments for //FIXME in case o.LamNs, add more than just (P a) aka a% here. Theres also a^ a$ a/b/c$, D, DGo, etc.');

		vm.xtTodo("TODO consider using js Proxy object to avoid the need for lambda.n.stuff and just do lambda.stuff. I want it to do that if it doesnt slow it down much.");

		vm.xtTodo("TODO search for comment in VM '//FIXME add test case for lambda and mutlambda of max and near max and exceeding max number of params'");

		vm.xtTodo("TODO update vm.opInfo descriptions, created by vm.addOp, of all 128 opcodes");

		vm.xt("TODO test cases that use a Fork containing a Fo loop and some IfElses etc, for what will be optimized in GPU.js but to start with just interpreted mode. Also mark where double turns to float32, maybe by another vm.mask_ bit with an opcode, or merge it with the Fork opcode as ForkAndDownToFloat32 i dont like that, make it separate.", ()=>true, ()=>false);

		vm.xt('TODO ops.Jit testcases', ()=>true, ()=>false);

		vm.xt('TODO search comments for: how should ops.Jit choose which of vm.evalers.evalerByJsTranspile vs vm.evalers.evalerByGpujsTranspile vs vm.evalers.rootEvaler to use?ops.Jit testcases', ()=>true, ()=>false);

		vm.xt('TODO test cases for node.bize when left child is a cbt and right child is not or when both are cbts but theyre different heights so .bize should be vm.BIZE_OF_NOT_A_CBT, and the other vm.something bize constants, and vm.maxBits (share branches so it fits in memory by duplication), etc', ()=>true, ()=>false);
		
		vm.xt('TODO should the order of (Ns innerNs outerNs) be swapped in Ns in general (change the Ns opcode) so innerNs takes 1 hop instead of 2 hops to reach as in (Ns a b) means ((Ns a) b)? Or do I want to keep it as the order vars are searched in it is the order its read left to right in text?', ()=>true, ()=>false);

		vm.xt('TODO??? should salt128 be 4 doubles so the ops.Sandbox and ops.GetSandbox* ops can represent everything as double vals, and just reduce each of them from (2**32)*0xffff+the32BitsUsedForDedup so can reduce it 65535 times, decrementing the high 16 bits and replacing the low 32 bits with anything, and you get that 65535 refilled when pop back to where it was already refilled lower on stack so its practically unlimited. This way, the permissions/sandbox system is completely a map of varname$ to uint48 and those uint48s can only decrease (recursively tightenable permissions system). Or how about 2**52. Go with 2**48 for now. Write testcases for those ranges and to make sure its only nonnegative integers. The 8 mask bits will be value 0 or 1 but still as doubles. The 128 bits stored in the low 32 bits of each of 4 vars salta$&0xffffffff saltb$&0xffffffff saltc$&0xffffffff saltd$&0xffffffff will still be used for dedup as part of vm.StackStuff, and the higher bits will be ignored for dedup but exist anyways to fit with the only ever reducing-or-not-changing the uint48s cuz those low 32 bits will increase sometimes but the total uint48 will still decrease when it does. FIXME if deterministic calls only depend on those 128 bits then the extra 16*4 high bits can only be seen in nondeterministic calls, so it seems this isnt going to work, cant put that in uint48s, have to keep it in vm.StackStuff as it is (32 bits in each of 4 vars). Or, could still put it in the limitsmap but allow those specific 4 vars to increase or decrease. Or maybe put them in salt@ var with cbt128 value. but it seems better to keep salt128 and the 8 mask bits together.', ()=>true, ()=>false);

		vm.xt('FIXME when copy/paste (Fo y ,4 (DE ,x <+ <* x$ y$> ,1>)) into code textarea, vm.stackTime=9904514 vm.stackMem=99982 (displayed above) reduces by about 10k. seems high. but bigger problem is it does that again when push space after it to eval it again. so its not deduping andOr funcallcaching it.', ()=>true, ()=>false);

		vm.xt('TODO add ops Iadd Imul Isub Idiv Imod, that take 2 doubles and give a double, but the returned double happens to be (todo choose one) an int32 or uint32 stored in a double, cuz the other similar ops are on doubles. This is for if + * sine etc arent easily simulatable deterministicly.', ()=>true, ()=>false);
		
		vm.xt('vm.Mut transpiler is in ops.Jit', ()=>(vm.eval('(Jit <* x$ x$>)').n.evaler), ()=>vm.evalers.evalerByJsTranspile);
		
		/*vm.xt('non-Jit-transpiled form of <* x$ x$> (DE ,x ,10 (EmptyTreemap GodelLessThan))', Evv('(<* x$ x$> (DE ,x ,10 (EmptyTreemap GodelLessThan)))'), Evv('100'));
		
		vm.xt('ops.Jit transpiler of <* x$ x$> (DE ,x ,5 (EmptyTreemap GodelLessThan))', Evv('(Jit <* x$ x$> (DE ,x ,5 (EmptyTreemap GodelLessThan)))'), Evv('25'));
		*/
		
		vm.xt('non-Jit-transpiled form of (DE ,x <* x$ x$>) (DE ,x ,20 (EmptyTreemap GodelLessThan))', Evv('((DE ,x <* x$ x$>) (DE ,x ,20 (EmptyTreemap GodelLessThan)))'), Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) x$ 400 Em)'));
		
		vm.xt('Jit-transpiled form of (DE ,x <* x$ x$>) (DE ,x ,30 (EmptyTreemap GodelLessThan))', Evv('(Jit (DE ,x <* x$ x$>) (DE ,x ,30 (EmptyTreemap GodelLessThan)))'), Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) x$ 900 Em)'));
		
		vm.xt('TODO search for this in code (part of Jit transpiler): if(!param.n.isValidNs()){ //cuz the vm.Mut optimization used in js transpile always takes a ns (Ns, LamNs, Treemap,', ()=>true, ()=>false);
		
		vm.xt('TODO for security, in vm.Mut, vm.startMut, vm.endMut, transpile code, rootM, etc, make sure not to leave any fields in Mut, rootM={}, etc, that could be overlapped by node.id() such as __proto__ or arr or p or d as in mut.d mut.p ({}).__proto__ etc. Part of this was fixed in vm.newExtraEmptyJsMap().', ()=>true, ()=>false);
		
		//vm.xt('Bli 1 get 0x35 as double 53', Evv('(Bli ,(TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) ,1 U)'), Evv('53'));
		vm.xt('Bli 1slow get 0x35 as double 53', Evv('(Bli ,arr ,1 (Put arr@ (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) (EmptyTreemap GodelLessThan)))'), Evv('53'));
		
		vm.xt('Bli 1jit get 0x35 as double 53+100=0x99', Evv('(Jit (Blie ,arr ,1 <+ ,100 (Bli ,arr ,1)>) (Put arr@ (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) (EmptyTreemap GodelLessThan)))'),
			Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) arr@ (TypevalB b* (0xff990fffffffffff00ff12ffffff00ff 0x80000000000000000000000000000000)) Em)'));
		
		vm.xt('Bli 1nojitButSameInputAsJit get 0x35 as double 53+100=0x99', Evv('(λ[x y {x% y%}] (Blie ,arr ,1 <+ ,100 (Bli ,arr ,1)>) (Put arr@ (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) (EmptyTreemap GodelLessThan)))'),
			Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) arr@ (TypevalB b* (0xff990fffffffffff00ff12ffffff00ff 0x80000000000000000000000000000000)) Em)'));
		
		//vm.xt('Bli 2 get 0x12 as double 18', Evv('(Bli ,(TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) ,10 U)'), Evv('18'));
		vm.xt('Bli 2 get 0x12 as double 18', Evv('(Bli ,arr ,10 (Put arr@ (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) (EmptyTreemap GodelLessThan)))'), Evv('18'));

		vm.xt('RawBli 1 get 0x35 as double 53 and get 0x12 as double 18', Evv('[(TheArray55#(RawBli (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000)))) 1) (TheArray55 10)]'), Evv('[53 18]'));

		vm.xt('RawBlie 1. Warning, lazyDedup settings might have these not equal by === but if you use .eq (equals) it will, so check vm.xt which it uses', Evv('(RawBlie (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff00ff (0x8000000000000000 0x0000000000000000))) 15 5)'),
			Evv('(TypevalB b* (0xff350fffffffffff 0x00ff12ffffff0005 (0x8000000000000000 0x0000000000000000)))'));

		vm.xt('Tylen 1', Evv('(Tylen (TypevalB b* (0xff350fffffffffff 0x00ff12ffffff0005 (0x3344800000000000 0x0000000000000000))))'), Evv('18'));
		
		vm.xt('Tylen 2', Evv('(Tylen (TypevalB i* (0xff350fffffffffff 0x00ff12ffffff0005 (0x3344556680000000 0x0000000000000000))))'), Evv('5'));

		vm.xt('bize31 instead of Tylen 2', Evv('(Bize31 (0xff350fffffffffff 0x00ff12ffffff0005 (0x3344800000000000 0x0000000000000000)))'), Evv('(* 8 18)'));
		
		vm.xt('bize31 instead of Tylen 2', Evv('(Bize31 (0xff350fffffffffff 0x00ff12ffffff0005 (0x3344556680000000 0x0000000000000000)))'), Evv('(* 32 5)'));

		vm.xt('bize31 of all 0s', Evv('(Bize31 (0x0000000000000000 0x0000000000000000 (0x0000000000000000 0x0000000000000000)))'), Evv(''+vm.BIZE_OF_IS_ALL_ZEROS_CBT));

		vm.xt('bize31 of not a cbt', Evv('(Bize31 (Pair S T))'), Evv(''+vm.BIZE_OF_NOT_A_CBT));

		vm.xt('TODO optimize by using hash buckets, instead of string key, for FuncallCache (like vm.cp already does), search for: dedupKeyOfFuncallCache', ()=>true, ()=>false);

		vm.xt('BlE to set array, and Bl/@ to get it, in Treemap', Evv('(pix@ (BlE ,pix ,(TypevalB b* 0x11223380) (EmptyTreemap GodelLessThan)))'), Evv('(TypevalB b* 0x11223380)'));

		vm.xt('TODO optimize by wrapping array instead of doing callpairs, when must dedup array cuz vm.mustDedupIfAtMostThisManyBytes, instead of doing it by callpairs. can still use the array as the normed form if know its size, but might be tricky if theres also dedups of its childs recursively from other lambda calls.', ()=>true, ()=>false);

		vm.xt('NewBl 1 make byte array of all 0s', Evv('(NewBl b* 32)'), Evv('(TypevalB b* 0x0000000080000000)'));
		vm.xt('NewBl 2 make byte array of all 0s', Evv('(NewBl b* 24)'), Evv('(TypevalB b* 0x00000080)'));
		vm.xt('NewBl 3 make empty byte array, FIXME should the padding be 1 bit long or 1 byte long?', Evv('(NewBl b* 0)'), Evv('(TypevalB b* Bit1)'));

		vm.xt('alloc double[3] of all 0s', Evv('(<NewBl ,d* <* ,64 doubleArrayLen$>> (DE ,doubleArrayLen ,3 (EmptyTreemap GodelLessThan)))'),
			Evv('(TypevalB d* (0x00000000000000000000000000000000 0x00000000000000008000000000000000))'));

		vm.xt('split big cbt literals', ()=>(vm.eval('0x0023450000000000000000000000000000000000000000008000000000000000')+''),
			()=>(vm.eval('(0x00234500000000000000000000000000 0x00000000000000008000000000000000)')+''));

		vm.xt('dont merge to big cbt literal', ()=>(vm.eval('(0x00234500000000000000000000000000 0x00000000000000008000000000000000)')+''),
			()=>(vm.eval('(0x00234500000000000000000000000000 0x00000000000000008000000000000000)')+''))

		vm.xtTodo('TODO find and handle the text: Maybe there should be 2 typeval opcodes, one for raw cbt (thats always a powOf2) and one for bitstring? But, they are interchangible in that');

		vm.xt('simple GE', Evv('(GE ,picA ,width ,30 (EmptyTreemap GodelLessThan))'), Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) (G picA width) 30 Em)'));

		vm.xt('vm.forceGEValToDouble is true (cuz GE uses it)', ()=>vm.forceGEValToDouble, ()=>true);

		vm.xt('Assuming vm.forceGEValToDouble is true (tested somewhere else), put a [hello world] val using GE and make sure it puts 0 instead',
			Evv('(GE ,picA ,width ,[hello world] (EmptyTreemap GodelLessThan))'), Evv('(Tm#(Treemap GodelLessThan) Em#(EmptyTreemap GodelLessThan) (G picA width) 0 Em)'));
		
		vm.xt('Test get 2 vars and multiply them using G - simple',
			Evv('(<* (G picA height) (G picA width)> (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))'),
			Evv('600'));

		vm.xt('picB^height syntax - simple', ()=>(vm.eval('(G picB height)')+''), ()=>'picB^height');

		vm.xt('picB^height syntax - normal', Evv('picB^height'), Evv('(G picB height)'));

		vm.xt('pics/picB^height syntax', Evv('pics/picB^height'), Evv('(GGo (OO pics picB) height)'));
		
		//vm.xt('things/pics/picB^height syntax', Evv('things/pics/picB^height'), Evv('(GGo things/pics/picB height)'));
		vm.xt('things/pics/picB^height syntax', Evv('things/pics/picB^height'), Evv('(GGo (GoO (OO things pics) picB) height)'));
		
		vm.xt('simpler get picA^width before - Test get 2 vars and multiply them using G - the ^ syntax but not deep',
			Evv('(picA^width (Put (OO id5 picB) picA (Put (OO things pics) id5 (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))))'),
			Evv('30'));
		
		vm.xt('simpler get id5/picB before - Test get 2 vars and multiply them using G - the ^ syntax but not deep',
			Evv('(id5/picB (Put (OO id5 picB) picA (Put (OO things pics) id5 (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))))'),
			Evv('picA'));

		vm.xt('simpler get id5/picB^width before - Test get 2 vars and multiply them using G - the ^ syntax but not deep',
			Evv('(id5/picB^width (Put (OO id5 picB) picA (Put (OO things pics) id5 (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))))'),
			Evv('30'));

		vm.xt('simpler get things/pics/picB^width before - Test get 2 vars and multiply them using G - the ^ syntax but not deep',
			Evv('(things/pics/picB^width (Put (OO id5 picB) picA (Put (OO things pics) id5 (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))))'),
			Evv('30'));

		vm.xt('Test get 2 vars and multiply them using G - the ^ syntax but not deep',
			Evv('(<* picA^height picA^width> (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))'),
			Evv('600'));

		vm.xt('Test get 2 vars and multiply them using G - the ^ syntax with deep',
			Evv('(<* things/pics/picB^height things/pics/picB^width> (Put (OO id5 picB) picA (Put (OO things pics) id5 (Tm#(Treemap GodelLessThan) (Tm Em#(EmptyTreemap GodelLessThan) (G picA height) 20 Em) (G picA width) 30 Em))))'),
			Evv('600'));

		vm.xtTodo('Search for this text: FIXME should it be (GoG GetOb GetField ns) or keep it as (GoG GetOb field ns)?');

		vm.xt('Foch on Lambda of 3 params with 1 curried a', Evv('(Foch [] (λ[a b c U] valA))'), Evv('[a% valA]'));

		vm.xt('Foch on Lambda of 3 params with 2 curried a b', Evv('(Foch [] (λ[a b c U] valA valB))'), Evv('[a% valA b% valB]'));

		vm.xt('Foch on Lambda of 3 params with 2 curried b a', Evv('(Foch [] (λ[b a c U] valB valA))'), Evv('[b% valB a% valA]'));

		vm.xt('LamNs testing before Foch', Evv('(λ[a b c (F U)] valA valB valC)'), Evv('(LamNs (λ [a b c I#(F U)] valA valB) valC)'));

		vm.xt('Foch on Lambda/λ of 3 params with 3 curried using LamNs', Evv('(Foch [] (LamNs (λ [a b c I#(F U)] valA valB) valC))'), Evv('[a% valA b% valB c% valC]'));

		vm.xt('Foch on Mutlambda/Λ of 3+1ns params with 3 curried', Evv('(Foch [] (Λ [a b c I#(F U)] valA valB valC))'), Evv('[a% valA b% valB c% valC]'));
		
		vm.xt('Foch on EmptyTreemap', Evv('(Foch [] (EmptyTreemap GodelLessThan))'), Evv('[]'));

		vm.xt('Foch on treemap of 4 things', Evv('(Foch [] (Tm#(Treemap GodelLessThan) (Tm (Tm Em#(EmptyTreemap GodelLessThan) id5/picB picA Em) picA^height 20 Em) picA^width 30 (Tm Em things/pics id5 Em)))'),
			Evv('[id5/picB picA picA^height 20 picA^width 30 things/pics id5]'));

		//2023-8-12-510pEST it was backward, but is the test backward, or is the VM code backward?
		//Wikibinator203DragAndDropTree.html:1 Uncaught Test Foch on Ns of LamNs and treemap of 4 things -- fixme did i get the Ns 2 params bakcward? failed cuz [id5/picB picA picA^height 20 picA^width 30 things/pics id5 a% valA b% valB c% valC] != [a% valA b% valB c% valC id5/picB picA picA^height 20 picA^width 30 things/pics id5]
		//vm.xt('Foch on Ns of LamNs and treemap of 4 things -- fixme did i get the Ns 2 params bakcward?', Evv('(Foch [] (Ns (LamNs (λ [a b c I#(F U)] valA valB) valC) (Tm#(Treemap GodelLessThan) (Tm (Tm Em#(EmptyTreemap GodelLessThan) id5/picB picA Em) picA^height 20 Em) picA^width 30 (Tm Em things/pics id5 Em))))'),
		//	Evv('[a% valA b% valB c% valC id5/picB picA picA^height 20 picA^width 30 things/pics id5]'));
		//
		vm.xt('Foch on Ns of LamNs and treemap of 4 things -- fixme did i get the Ns 2 params bakcward?',
			Evv('(Foch [] (Ns (LamNs (λ [a b c I#(F U)] valA valB) valC) (Tm#(Treemap GodelLessThan) (Tm (Tm Em#(EmptyTreemap GodelLessThan) id5/picB picA Em) picA^height 20 Em) picA^width 30 (Tm Em things/pics id5 Em))))'),
			Evv('[a% valA b% valB c% valC id5/picB picA picA^height 20 picA^width 30 things/pics id5]'));

		vm.xtTodo('TODO what if some keys occur multiple times in different ns childs of the Ns op? What if they occur multiple times in λ[a a b a c (F U)] etc?');

		//2023-8-2+ making [keyA valA keyB valB keyC valC...] be a ns.
		vm.xt('Infcur/[] list as ns - a%', Evv('(a% [a valA b valB c valC])'), Evv('valA'));
		vm.xt('Infcur/[] list as ns - c%', Evv('(c% [a valA b valB c valC])'), Evv('valC'));
		vm.xt('Infcur/[] list as ns - [c% a%]', Evv('(<[] c% a%> [a valA b valB c valC])'), Evv('[valC valA]'));
		vm.xt('Infcur/[] list as ns - d% not found returns U', Evv('(d% [a valA b valB c valC])'), Evv('U'));
		vm.xt('Infcur/[] list as ns - d% not found by Has', Evv('(Has d% [a valA b valB c valC])'), Evv('F'));
		vm.xt('Infcur/[] list as ns - b% found by Has', Evv('(Has b% [a valA b valB c valC])'), Evv('T'));
		vm.xtTodo('TODO test Foch of Infcur/[] as ns');
		vm.xt('Infcur/[] list as ns - a$ not found', Evv('(a$ [a valA b valB c valC])'), Evv('U')) ;
		vm.xt('Infcur/[] list as ns - a@ not found', Evv('(a@ [a valA b valB c valC])'), Evv('U'));
		vm.xt('Infcur/[] list Put b valB2', Evv('(Put b% valB2 [a valA b valB c valC])'), Evv('[a valA b valB2 c valC]'));
		vm.xt('Infcur/[] list Put aa valAA', Evv('(Put aa% valAA [a valA b valB c valC])'), Evv('[a valA b valB c valC aa valAA]'));
		vm.xt('Infcur/[] list as ns with duplicate keys gets last', Evv('(a% [a valA b valB a valA3 c valC])'), Evv('valA3'));
		vm.xtTodo('Infcur/[] list as ns with wrong number of params. [a valA b valB c] what should this do? is it valB maps to c?');
		
		vm.xt('New kind of small key/value map [keyA valA keyB valB...] [] listOfNumbers% ,and ,iota ,5 ,times ,is ...',
			Evv('(<[] listOfNumbers% ,and ,iota ,5 ,times ,is {iota% {iota% {iota% {iota% iota%}}}} ,and ,iota ,is iota%> [hello world iota (Pair S T) listOfNumbers [2 3 55]])'),
			Evv('[[2 3 55] and iota 5 times is S and iota is (Pair S T)]'));

		vm.xtTodo('if(true || vm.isNsThatTakesKeyParam(l)){ //FIXME, doing this without "true ||" broke alot of testcases by infloop "Wikibinator203DragAndDropTree.html:1 Uncaught gasErr" 2023-8-3.');

		vm.xt('level 2 of ,,,close the quine loop,,, , incomplete, todo derive eval from combos of U', Evv('(Pair S T)'), ()=>(vm.ops.Pair(vm.ops.S)(vm.ops.T)));

		vm.xtTodo('Search for text in ops.Ns: FIXME should this order of inner_then_outer be flipped to match the outer_then_inner_gradually order of [a valA b valB a secondValA]? Should it also handle ops.Rucfni list which is the opposite display order of ops.Infcur/[] list, like -a secondValA b valB a valA=?');

		let canvasTestCode3245345345 =
`[canvas is (
	_[
		(DE ,height ,2)
		(DE ,width ,3)
		(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
		(Fo i <* height$ width$> _[
			(Blie ,pix <+ ,3 ByteIndex#<* i$ ,4>> ,255)
			(Blie ,pix <+ ,2 ByteIndex> ,170)
			(Blie ,pix <+ ,1 ByteIndex> <* i$ ,116>)
			(Blie ,pix ByteIndex *n[i$ i$ ,88338887])
		])
		<Canvas ,50 ,50 height$ width$ <R pix@>>
	]
	(EmptyTreemap GodelLessThan)
)]`;
		vm.xt('First code that generated canvas graphics using a loop 2023-8-12 canvasTestCode3245345345', Evv(canvasTestCode3245345345),
			Evv('[canvas is (Canvas 50 50 2 3 (0x0000aaffc774aaff1ce8aaffff5caaff 0x70d0aaff6f44aaff8000000000000000))]'));

		let mediumBlobCode = '0xff00ffffffffffff00fffffffffabcdefff00ffffffffffff00ffffffffff00ffff00ffffffffffff00ffffffffff00ffff00abcdeffffffff0abcdefffffff00ffff00ffffffffffff00ffffffffff00ffff00ffffffffffff00ffffffffff00ffff00fffffffff00ffffffffff00ff80000000000000000000000000000000';
		vm.xt('parse mediumBlob. if maxCharsInWordLiteral is big. Will probably set maxCharsInWordLiteral back down to 66 later for 0x then 64 hex digits', Evv(mediumBlobCode), Evv(mediumBlobCode));

		vm.xtTodo('test Asine Log1p Floor Expm1 Min Max, which were opcodes added 2023-8-19');
		
		vm.xt('changeSymbolForRucfniListCuz(-)IsUsedForNegativeNumbers and test that negative numbers work here. cant be -= -a b c= -a -b c d= e=, cuz -3 -2 etc. (Mi 3 10) does return -7, but -7 is viewed as parse error cuz its push and = is pop. Or was Rucfni syntax never finished to break that?',
			Evv('-7'), Evv('-7'));
			
		vm.xt('(Expm1 (Log1p 2.34))', Evv('(Expm1 (Log1p 2.34))'), Evv('2.34'));
		vm.xt('(Log1p (Expm1 2.34))', Evv('(Log1p (Expm1 2.34))'), Evv('2.34'));

		vm.xt('The Hypot Sqr example at top of readme 2023-8-20',
			Evv('[the Hypot#λ[x y <Sqrt <+ <Sqr#λ[z <* z% z%>] x%> <Sqr y%>>>] of 6 and 8 is (Hypot 6 8) and the L of Hypot is (L Hypot) and its R is (R Hypot) and of 6 and 2.34 is (Hypot 6 2.34) like in the pic in the readme]'),
			Evv('[the Hypot#(λ [x y <Sqrt <+ <Sqr#(λ [z <* z% z%>]) x%> <Sqr y%>>>]) of 6 and 8 is 10 and the L of Hypot is λ and its R is [x y <Sqrt <+ <Sqr x%> <Sqr y%>>>] and of 6 and 2.34 is 6.440155277631122 like in the pic in the readme]'));
			
		vm.xtTodo('Test VarargAx by making a list that can only contain doubles that are prime numbers less than (** 2 53) and verifying it runs out of time/mem when try to add something not matching that. Search for o.VarargAx in VM code.');

		vm.xt('(S x y z) means (((S x) y) z). S is λx.λy.λz.xz(yz). (S + (T 2) 3) -> 5 cuz ((+ 3) ((T 2) 3)) -> ((+ 3) 2) -> 5.', Evv('(S + (T 2) 3)'), Evv('5'));

		vm.xtTodo('Fix the display bug with... (S (S (S S) S)) displays in tostring correctly as (S {(S S) S}) but displays in treeUI as (S (S S) S) cuz the inner {...} is not displayed but is right tree shape');

		//This is the basic way wikibinator works, plus some other opcodes for efficiency and to make it more Human readable.
		//https://en.wikipedia.org/wiki/SKI_combinator_calculus
		//https://en.wikipedia.org/w/index.php?title=SKI_combinator_calculus&oldid=1170866480 this was here for years,
		//then someone removed it 2023-8-22 for being unsourced. like you need a source for 2+3=5 or other simple things.
		//Recursive parameter passing and quoting
		//K=λq.λi.q
		//quotes q and ignores i
		//S=λx.λy.λz.((xz)(yz))
		//forms a binary tree that parameters can flow from root to branches and be read by identityFunc=((SK)K)
		//or read a quoted lambda q using Kq.
		vm.xt('Recursive parameter passing and quoting; K=λq.λi.q; quotes q and ignores i; S=λx.λy.λz.((xz)(yz)); forms a binary tree that parameters can flow from root to branches and be read by identityFunc=((SK)K) or read a quoted lambda q using Kq; since they removed it from https://en.wikipedia.org/w/index.php?title=SKI_combinator_calculus&oldid=1170866480 around 2023-8 for having no source, heres a possible source though could use more explanation; ((a b) c) displays as (a b c); (S x y) displays as {x y}; {{x y} z} displays as {x y z}; {,a b c d} displays as <a b c d>;',
			Evv('({,+ ,7 {,* ,10 (S T T)}} 100)'), Evv('1007'));

		//last vm.xt


		/*TODO get transpiler working for canvas, with examples like this...

		_[
			(DE ,height ,2)
			(DE ,width ,3)
			(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
			(Fo i <* height$ width$> _[
				(Blie ,pix <+ ,3 ByteIndex#<* i$ ,4>> ,255)
				(Blie ,pix <+ ,2 ByteIndex> ,170)
				(Blie ,pix <+ ,1 ByteIndex> <* i$ ,116>)
				(Blie ,pix ByteIndex *n[i$ i$ ,88338887])
			])
			<Canvas ,50 ,50 height$ width$ <R pix@>>
		]


		*/




		/*2023-8-19 this bigger canvas worked but I dont want to make it a vm.xt test case cuz its slow without the lazyDedup optimization on vm.Node.blob
		[canvas is (
			_[
				(DE ,height ,24)
				(DE ,width ,40)
				(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
				(Fo i <* height$ width$> _[
					(Blie ,pix <+ ,3 ByteIndex#<* i$ ,4>> ,255)
					(Blie ,pix <+ ,2 ByteIndex> ,170)
					(Blie ,pix <+ ,1 ByteIndex> <* i$ ,116>)
					(Blie ,pix ByteIndex *n[i$ i$ ,88338887])
				])
				<Canvas ,10 ,10 height$ width$ <R pix@>>
			]
			(EmptyTreemap GodelLessThan)
		)]

		[canvas is (Canvas 10 10 24 40 
		*/


		/*
		[canvas is (
			_[
				(DE ,height ,42)
				(DE ,width ,52)
				(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
				(Fo i <* height$ width$> _[
					(DE ,x <Mod i$ width$>)
					(DE ,y <Div <Mi i$ x$> width$>)
					(Blie ,pix <+ ,3 ByteIndex#<* i$ ,4>> ,255)
					(Blie ,pix <+ ,2 ByteIndex> ,170)
					(Blie ,pix <+ ,1 ByteIndex> <* y$ <Mod y$ x$>>)
					(Blie ,pix ByteIndex *n[y$ i$ ,8887])
				])
				<Canvas ,10 ,10 height$ width$ <R pix@>>
			]
			(EmptyTreemap GodelLessThan)
		)]

		[canvas is (Canvas 10 10 42 52 
		*/

		/*
		[canvas is (
			_[
				(DE ,height ,40)
				(DE ,width ,60)
				(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
				(Fo i <* height$ width$> _[ 
					(DE ,x <Mod i$ width$>)
					(DE ,y <Div <Mi i$ x$> width$>)
					(Blie ,pix <+ ,3 ByteIndex#<* i$ ,4>> ,255) 
					(Blie ,pix <+ ,2 ByteIndex> ,170) 
					(Blie ,pix <+ ,1 ByteIndex> <* y$ <Mod y$ x$>>)
					(Blie ,pix ByteIndex *n[y$ i$ ,8887])
				])
				<Canvas ,10 ,10 height$ width$ <R pix@>>
			]
			(EmptyTreemap GodelLessThan)
		)]
		*/




		//TODO
		/*
		[canvas is (
			_[
				(DE ,height ,2)
				(DE ,width ,3)
				(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
				(Blie ,pix ,0 ,255)
				(Blie ,pix ,1 ,255)
				<Canvas ,50 ,50 height$ width$ <R pix@>>
			]
			(EmptyTreemap GodelLessThan)
		)]

		[canvas is (
			_[
				(DE ,height ,2)
				(DE ,width ,3)
				(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
				(Blie ,pix ,0 ,255)
				(Blie ,pix ,1 ,50)
				(Blie ,pix ,2 ,100)
				(Blie ,pix ,3 ,200)
				(Fo i <* height$ width$>
					(Blie ,pix ,0 ,255)
					(Blie ,pix ,3 <* i$ ,40>)
				)
				<Canvas ,50 ,50 height$ width$ <R pix@>>
			]
			(EmptyTreemap GodelLessThan)
		)]

		[canvas is (
			_[
				(DE ,height ,2)
				(DE ,width ,3)
				(BlE ,pix <NewBl ,b* *n[height$ width$ ,4 ,8]>)
				(Fo i <* height$ width$> _[
					(Blie ,pix ByteIndex#<* i$ ,4> ,255)
					(Blie ,pix <+ ,1 ByteIndex> ,60)
					(Blie ,pix <+ ,3 ByteIndex> <* i$ ,36>)
					(Blie ,pix <+ ,2 ByteIndex> *n[i$ i$ ,16])
				])
				<Canvas ,50 ,50 height$ width$ <R pix@>>
			]
			(EmptyTreemap GodelLessThan)
		)]

		TODO should (Canvas ... data) allow typedBlob as data, or only cbt?
		*/

		
		
		

		vm.extraTests.reverse();
		
		vm.htmlForExtraTests = ()=>{
			if(!vm || !vm.extraTests) throw 'Couldnt find vm or vm.extraTests';
			let html = '<div id=vmExtraTests>';
			let idPrefix = 'extraTestBtn_'+randIntSize(1e9)+randIntSize(1e9)+'_';
			let testAllBtn = '<input type=button onclick="for(let i=0; i<vm.extraTests.length; i++) try{ document.getElementById(\''+idPrefix+'\'+i).click(); }catch(e){}" value="Test ALL"></input>&nbsp;&nbsp;&nbsp;';
			//background-color: red
			let countFails = '<input type=button onclick="let countFails = 0; let countTodos = 0; let countPasses = 0; for(let i=0; i<vm.extraTests.length; i++){ let btn = document.getElementById(\''+idPrefix+'\'+i); if(btn.style[\'background-color\'] == \'orange\') countTodos++; else if(btn.style[\'background-color\'] == \'red\') countFails++; else if(btn.style[\'background-color\'] == \'green\') countPasses++; } alert(\'countFails=\'+countFails+\' countTodos=\'+countTodos+\' countPasses=\'+countPasses+\' total=\'+(countFails+countTodos+countPasses)+\' but u have to click Test ALL or click individual tests first. It counts red buttons.\');" value="Count fails (2023-8-24-1220pET it was countFails=10 countTodos=42 countPasses=344 total=396)"></input>&nbsp;&nbsp;&nbsp;';
			html += testAllBtn;
			html += countFails;
			html += '<input type=button onclick="if(!vm) throw \'No vm. TODO get it from Wikibinator203.n.vm or U.n.vm?\'; vm.clearCache()" value="Clear cache (warning, may cause dedup problems)"></input> (advanced and newer tests first (buttons below), and farther below are basic tests)<br>';
			for(let i=0; i<vm.extraTests.length; i++){
				let x = vm.extraTests[i];
				let name = vm.extraTests[i].name;
				html += '<input id="'+idPrefix+i+'" type=button onclick="try{ console.log(\'Testing vm.extraTests['+i+'] = \'+vm.extraTests['+i+']); vm.extraTests['+i+'].run(); this.style.backgroundColor=\'green\'; }catch(e){ if(this.value.includes(\'].run(); // TODO\') || this.value.includes(\'].run(); // FIXME\')){ this.style.backgroundColor=\'orange\'; console.log(\'Button becomes orange for TODO: \'+this.value); }else{ this.style.backgroundColor=\'red\'; throw e; } }" value="vm.extraTests['+i+'].run(); // '+name+'"></input>';
				html += '<input type=button onclick="console.log(\'vm.extraTests['+i+'] = \'+vm.extraTests['+i+']);" value="get code" title="display code of this on browser console without evaling it"></input>';
				html += '<br>\n';
			}
			html += testAllBtn;
			html += `TODO Wikib this fixes Ns stuff do asap
Fix what foes KE Dput etc do in Ns (recursive namespace)?
Alloc of var name or (OO ob key) etc, would need to specify deepest ns or innermost ns.
If x$ is optimized as a js let var at innerns, and x/y exists at outerns...
x is literal either way.
All ns stuff has 2 keys x$ or OO ob key, etc. Nomatter the ns level.
So every write op needs a bit for does it create at innermost possible vs outermost ns, if not exist.
Default all writes to outermost if they dont find key. Have jsletlikeop to define a var at inner ns. Fo and PushNs auto create next inner ns.
Float32Array etc does its own memory fencing. Convert from undefined or to NAN or something.
Gpujs will be used with mask per array of powof2 size or try min and max ints. Start with just cpu vm.Mut optimization.
Make simple games, rule110 puzzle, musicinstruments, and other mm:wikibisecases stuff.
Remember the wikib graphics un wikib graphics, vms in vms or something like that, sharing gamequicksaves, etc... I want to do everything from inside there incl working with other humans on AI.
But first get rootwormswithcobraboat working... And throw in some rule110convfield.
Listweb as left column, incl incoming mutablewrapperlambda calls. Bottom right as treeUI. Topright as canvas.`;
			html += '<div id=vmExtraTests>';
			return html;
		};
		
		//vm.temp is just stuff you might find useful while testing the vm in browser debugger (push f12 in most browsers). its not part of the spec.
		vm.temp.breakpointOn = false;
		
		if(1<=vm.loglev)console.log('Passed very basic vm.eval tests');
		
		//vm.test("B Del('e')(Del('c')(ABCDEF)) leaves a treemap of a->b", vm.ops.Treemap(vm.ops.GodelLessThan)(Em)('a')('b')(Em), vm.ops.Del('e')(vm.ops.Del('c')(ABCDEF)));
		
		console.log('Passed more tests, this time that can use vm.eval');
		
		
		
		let prevStackTime = vm.stackTime;
		let prevStackMem = vm.stackMem;
		vm.prepay(1,2);
		if(vm.stackTime != prevStackTime-1) throw 'stackTime is broken';
		if(vm.stackMem != prevStackMem-2) throw 'stackMem is broken';
		
		if(1<=vm.loglev)console.log('this='+this);
	
		console.log('Wikibinator203.js about to return the universal function, then call itself on itself a few times and do one last log. In case something goes wrong during that, this log line shows you how far it got.');
		return u; //the universal function
	//} //end with(ops)	//dont do this cuz with(...) makes things very slow.
})();
console.log('Script ended. Todo rewrite this confusing text. Wikibinator203 = '+Wikibinator203+' which is the universal combinator/lambda you can build anything with. Nobody owns the lambdas made of combos of calling the universal lambda on itself (such as Wikibinator203(Wikibinator203)(Wikibinator203(Wikibinator203)))='+Wikibinator203(Wikibinator203)(Wikibinator203(Wikibinator203))+' aka opcode 5 (0 to 255) aka Op101 in base2, and see license for details about that. By design, there are an infinite number of possible variants of https://en.wikipedia.org/wiki/Technological_singularity which Wikibinator203 may generate (or it may do other simpler things) but only as, kind of, lazy-evals. It is by design neutral. It does not tend to do that on its own (but even a broken clock is right twice a day, so whatever may already have execute permission on your computer (including unknown hackers, or some generated lambda may, if you view it as a conversation or as text etc, ask you to give it more permissions, so like they say about email, dont run any files received)...) - may not execute anything ever for any reason, as it has "recursively-tightenable-higher-on-stack permissions system" (search comments in this file or earlier versions of it) whose max level is sandbox (though an opensource fork of it could give execute or higher permissions similarly as long as its stateless, thats probably not a good idea). If a "singularity" is to happen, then it should support https://en.wikipedia.org/wiki/Breakpoint and, as motivation to it or to more generally any user(s), this system should (TODO verify) in practice be able to EFFICIENTLY run a debugger of a debugger of a debugger of a debugger (like a Hypervisor/VMWare/etc inside a Hypervisor/VMWare/etc inside... except those kinds of VMs are far to complex to do efficiently in this system, as this is more of a nanokernel or smaller/simpler), just a few levels deep, as compute is the bottleneck there, but in abstract math can do that to any finite depth, even in the middle of a "optimization to throw sound processing code faster than the speed of sound from one computer to a nearby computer which formal-verifies, compiles, and runs that code in time to hear the sound arrive and think about and respond.".\r\n\r\n\r\nThere are '+Wikibinator203.n.vm.extraTests.length+' extra tests in Wikibinator203.n.vm.extraTests, which are either slow or failing or cuz they are likely to fail during coding in the VM and you want the universal function to still be returned to see which test cases pass and which dont individually, (todo rewrite this sentence its confusing) which is why I put them there instead of the few basic tests it runs before VM script ends. Maybe the UI should have a button to run those, then find errors on browser console, where its easier to use them cuz u have a UI.\r\n\r\n\r\nLicense: Wikibinator203 license: The whole turing-complete and hypercomputing space derived from this universal combinator/lambda or forks of it and other software (prototype by Ben F Rayfield Y2023), including every lambda of this kind called on a lambda to find/create a lambda or which never halts (which the author of is defined as the universal combinator since these are tiny shared math objects), is offered to everyone under opensource GNU AGPL 3 license, plus these extra permissions: * Classpath/linking exception. Hook it to whatever you want, but within the space (no proprietary lambdas) is AGPL. * License is instantly unterminated when you start obeying it. * Free speech absolutism in the evilbit=true namespace in which all possible lambdas are allowed, even viruses etc. (then quotes the GNU AGPL 3 license and quotes classpath exception). Opcode 0 is anything thats not halted. Opcode 1 is the universal combinator. Opcodes 1 to 127 are just currying the first 7 params each being the universal combinator vs anything except universal combinator (1 of the 7 bits in o8 opcode byte, padded with a high 1 bit). Opcodes 128 to 255 are the main opcodes. The 256 opcodes in order are: '+Wikibinator203.n.vm.opInfo.map(oi=>oi.name).join(' ')+'. Theres '+Wikibinator203.n.vm.countReservedOps()+' reserved opcodes for future expansion. You can put them in params of vm.ops.Plug instead and use with vm.mask_allowOther which is an incomplete system and might need more security so you can choose which params of Plug are allowed and which are not similar to you can tighten permissions higher on stack.');













































//renaming jsmathbinator to wikibinator203.


/*
TODO important...
could hyperquasicrystal's cardinality be counted down from 0 toward -infinity (never reaching it)
(and optionally sorting the integers any way you like such as by height then recursively by left child then recursively by right child?)
???
cuz if so, then cardinality 0 is the highest cardinality.
lazycardinalityeval op would take 4 params: cardinality func param ignore, and edge goes toward (haltsymbol returnVal) or toward doesnthaltsymbol,
	and opCrossRedEdge or opCrossBlueEdge etc point at either where the edge actually points at or at callerdoesnthaveenoughcardinality.
	so the earlier hyperquasicrystal design as usual (and of course only clean (all 3 kinds of clean at once) applies at the higher cardinalities),
		except counts down from max cardinality instead of counts up from lowest cardinality.
PROBLEM???: can this be used to compute a haltingOracle (which are impossible) by emulating self,
	and calling haltingOracle on self to check if (self u) would halt or not then choosing to do the opposite (disproof by contradiction of haltingOracles)?
Since there would be an opGetCardinalityOnStack, it wouldnt be an actual emulation of self???
But since cardinality exists only on stack...
But what if a call of doesItHaltAtLowerCardinalityThanCaller never returns? By definition it must return (haltsymbol returnVal) or doesnthaltsymbol or callerdoesnthaveenoughcardinality,
and by definition a lazycardinalityeval must have a redEdge toward (haltsymbol returnVal) or doesnthaltsymbol (and cant have such an edge toward callerdoesnthaveenoughcardinality).
(doesItHaltAtLowerCardinalityThanCaller someCardinality func param) just checks if (func param), at someCardinality, halts or not and if it halts what does it return.
But doesItHaltAtLowerCardinalityThanCaller should actually be a derived node, derived from redEdge etc.
I'm unsure if this is consistent, but if it is, I'm likely to want the cardinality design back in hyperquasicrystal.
Try to disproveByContradiction in it. Try to prove (isleaf (u u)) or true=false or something like that.
What if cardinality is infinite in both directions, a kind of unaryNumber that ranges between -infinity (exclusive) and infinity (exclusive) of the integers between?
	I could easily make such a number type by just having 2 kinds of unary number, one for negatives and one for nonnegatives, and a +1 and -1 op etc.
*/














































/*
matmul...
TODO... (
	lambda
	{
		(
			opmut
			
			TODO some kind of sequence/progn...[[[
				sum=0
				TODO loop over a and c. make this able to generate gpujs code and js code and run in interpreted mode (3 ways)...
				(
					for b=0 {,< b bSize?} b++
					sum+={,* ?ab[{,+ {,* a bSize?} b}] ?bc[{,+ {,* b cSize?} c}]}
				)
				
			]]]
		)
	}
	?ab ?bc ?aSize ?bSize ?cSize
)
TODO



clean/dirty bits that only exist on stack:
	isDirtyGas //limit compute resources recursively by stackTime, stackMem, etc, but that prevents it from being deterministic so can limit to just 1 level of that deep on stack.
	isDirtyRoundoff //allow Math.sin(double) Math.tanh(double) etc, vs those funcs always infloop and you only get 
	//(opMutableWrapperLambda derivedFuncOfEd25519OrWhateverDigsigAlgorithm passwordOrU pubkeyOrU message) -> some signed form,
	//maybe with a minTime maxTime and time (utcFloat64) or maybe just a pubkey func return, or maybe pubkey func time return.
	isDirtyMutableWrapperLambdaOrSolve
	//dont need this cuz inside hyperquasirystal op it will already do that: isAllowAnythingExceptHyperquasicrystal




FIXME its 4x2: stackIsAllowstackTimestackMem, stackIsAllowNondetRoundoff, stackIsAllowMutableWrapperLambdaAndSolve, stackIsAllowAx.
FIXME should be 3x2 levels of clean/dirty, instead of 2x2. mutableWrapperLambda and solve* are above the level of just allowing spend/stackTime/stackMem.



TODO should it be ?varname optionally, if you want to give vars names? not sure how i'd optimize that, but it would just be (opOneMoreParam varnameorcomment func).
Example: (lambda funcBody ?abc j ?ddee?ghi k xyz).
Instead of getParam7 getParam22 it could be (ddee? (pair (lambda funcBody ?abc j ?ddee?ghi k) xyz))->k .
ddee? would be a syntax for (getnamedparam "ddee").
wont hurt to include it, even if it ends up not being used, cuz could just use  (opOneMoreParam u func).

vararg using opOneMoreParam such as (lambda funcBody ?? a b ??? c d e) -> (funcBody (pair (lambda funcBody ?? a b ??? c d) e)),
and (a b ?? c) means (opOneMoreParam (opOneMoreParam (a b)) c) but is displayed as (a b ?? c).
curriesLeft is counted up to 254 and above that it means "more than 254" so have to count it by lambda call (will get cached in a double but the ids just store 8 bits of it).

levels of clean: clean, allowSinTanhSqrtRoundoffEtc, allowSpendEtc..orJustCallItDirty
	NO, have clean be 2x2 kinds, 1 dim is clean/dirty and the other is allowSinTanhSqrtRoundoffEtc/not_allowSinTanhSqrtRoundoffEtc.

2 params and 128 bits of salt, no cx. use mutableSLike funcs to unitarytransform salt higher on stack.

256 opcodes. curriesSoFar. curriesLeft.


TODO vararg? or just a big max curriesLeft such as 126?


FIXME its 4x2: stackIsAllowstackTimestackMem, stackIsAllowNondetRoundoff, stackIsAllowMutableWrapperLambdaAndSolve, stackIsAllowAx.









TODO make this fast. its a variant of wikibinator202 that has these changes:
* will code audivolv, augmentedballs, neuralnets, canvas graphics, webaudioapi, jsoundcard that thing where it hears you whisper from across the room speaker microphone feedback, etc, in this system asap. have fun.
* theres only halted lambdas stored, 2 childs each.
* built in ed25519 op for mutableWrapperLambda, used with spend call andOr an op to say if it has an answer yet, but only in twothirdsdirty on stack.
* async opcode to prepare to do something, get the call started in a forked greenthread or thread etc, and another op to check if such a call is done, in progress, etc. also only in twothirdsdirty.
* no wiki op since it would tend toward things becoming less standardized, and the spend and mutableWrapperLambda etc ops will have their own opcodes.
* separate funcallcache (func param return touchtime) and binary forest of funcs. use same 4 ints of localid per node as in wikibinator202, 2 ints for idA and idB and 2 ints for start and end of Int32Array.
* salt128 on stack will only be unitary transformed, and that will be done by mutableS-like fns cuz they're so fast, using ops like << + & etc, to read any 2 of the 4 ints and write 1 of the others, or deeper binary forests of int int -> int ops.
* has a GPU.js opcode that tells it to use float32 etc instead of doubles, and with the strangeness of GPU.js opcodes recursively inside.
* has all the js Math funcs such as sine tanh
* has all the js operators on doubles such as * / ** - & | <<.
* has onethirdclean and twothirdsclean levels, instead of clean and dirty, and these levels only allow access to the 4 ints of salt on stack and (spend maxstackTime maxstackMem func param) and getstackTime and getstackMem and getestimatedeconacycmemcost(...by some combo of fulleconacyc zapeconacyc andor recent use of stackMem...).
* theres no vararg but theres up to around 126 or maybe 63 params, with an opcode for each. make it 63, and have space for 64 other opcodes, so o8.
* same mutableS-like abc.def[mutmap]<mutdouble>={+ {* abc[x] ,3}} syntax, which is a function that in an opmut call does 3 gets and a 3-way put like a[b]=c, or 2way like a=c.
* bitstrings are limited to 2^31-1 bits, so bize fits in int.
* blobs are wrappers of Float64Array of powOf2Size, still immutable??? a double/float64 is itself as an object and doesnt need to be converted. blobs can still be viewed as left and right childs of half their size recursively, down to a double. Or maybe still use Int32Array?
* derive IF func used like this { ... (if {...condition...} {iftrue} {iffalse}) ...} notice the IF is in () aka normalCall inside {} aka sCall. the IF function is (if condition iftrue iffalse state) and calls (condition state) and gets a t or f from it (todo what if its neither?) then based on that calls (iftrue state) or (iffalse state), therefore theres less nodes and more efficient than the equals functions derived in earlier universal functions. Do similar for FOR and WHILE and DOWHILE etc loops and PROGN etc.
* syntax: () is normal call. {} is sCall. [] is mutmapget. <> is mutmapdoublearrayget (or put in some cases).


*/


//let Em = Wikibinator203.n.vm.ops.EmptyTreemap(Wikibinator203.n.vm.ops.GodelLessThan);
//Wikibinator203.n.vm.test("Del('e')(Del('c')(ABCDEF)) leaves a treemap of a->b", Wikibinator203.n.vm.ops.Treemap(Wikibinator203.n.vm.ops.GodelLessThan)(Em)('a')('b')(Em), Wikibinator203.n.vm.ops.Del('e')(Wikibinator203.n.vm.ops.Del('c')(Wikibinator203.n.vm.ABCDEF)));